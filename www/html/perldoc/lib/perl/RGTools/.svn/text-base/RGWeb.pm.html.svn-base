<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Mon Dec 29 15:36:00 2008 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>lib/perl/RGTools/RGWeb.pm</title>
<style type="text/css">
<!--
/* default style sheet generated by perltidy */
body {background: #FFFFFF; color: #000000}
pre { color: #000000; 
      background: #FFFFFF;
      font-family: courier;
    } 

.c  { color: #228B22;} /* comment */
.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.h  { color: #CD5555; font-weight:bold;} /* here-doc-target */
.hh { color: #CD5555; font-style:italic;} /* here-doc-text */
.i  { color: #00688B;} /* identifier */
.j  { color: #CD5555; font-weight:bold;} /* label */
.k  { color: #8B008B; font-weight:bold;} /* keyword */
.m  { color: #FF0000; font-weight:bold;} /* subroutine */
.n  { color: #B452CD;} /* numeric */
.p  { color: #000000;} /* paren */
.pd { color: #228B22; font-style:italic;} /* pod-text */
.pu { color: #000000;} /* punctuation */
.q  { color: #CD5555;} /* quote */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.v  { color: #B452CD;} /* v-string */
.w  { color: #000000;} /* bareword */
-->
</style>
</head>
<body>
<a name="-top-"></a>
<h1>lib/perl/RGTools/RGWeb.pm</h1>
<!-- BEGIN CODE INDEX --><a name="code-index"></a>
<ul>
<li><a href="#package-RGTools::RGWeb-">package RGTools::RGWeb</a>
<ul>
<li><a href="#Create_Tab-">Create_Tab</a></li>
<li><a href="#expandable_input-">expandable_input</a></li>
<li><a href="#get_parameters-">get_parameters</a></li>
</ul>
</li>
<li><a href="#EOF-">EOF</a></li>
</ul>
<!-- END CODE INDEX -->
<hr />
<!-- contents of filename: lib/perl/RGTools/RGWeb.pm -->
<pre>
<a name="package-RGTools::RGWeb-"></a><span class="k">package </span><span class="i">RGTools::RGWeb</span><span class="sc">;</span>

<span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">Data::Dumper</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">CGI</span> <span class="q">qw(:standard)</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">CGI::Carp</span> <span class="q">qw(fatalsToBrowser)</span><span class="sc">;</span>

<span class="k">use</span> <span class="w">SDB::HTML</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">RGTools::RGIO</span><span class="sc">;</span>

<span class="c">########################################</span>
<span class="c"># Method to create a tab bar</span>
<span class="c">#</span>
<span class="c"># &lt;snip&gt;</span>
<span class="c"># my %tabs_hash = ( 'tab1' =&gt; '&lt;h1&gt; content of page 1 &lt;/h1&gt;',</span>
<span class="c">#                   'tab2' =&gt; '&lt;table&gt;&lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'</span>
<span class="c">#                 );</span>
<span class="c">#</span>
<span class="c"># my ($tab,$tabcontent) = RGTools::Web::Create_Tab(-items=&gt;\%tabs_hash, -default=&gt;$default_tab);</span>
<span class="c">#</span>
<span class="c"># print $tab . $tabcontent;</span>
<span class="c"># &lt;/snip&gt;</span>
<span class="c">#</span>
<span class="c"># Returns two strings. First one is the tab itself, and second one is the tab content</span>
<span class="c">#</span>
<span class="c">####################</span>
<a name="Create_Tab-"></a><span class="k">sub </span><span class="m">Create_Tab</span> <span class="s">{</span>
<span class="c">####################</span>

    <span class="k">my</span> <span class="i">%args</span> = <span class="i">filter_input</span><span class="s">(</span>
         \<span class="i">@_</span><span class="cm">,</span>
        -<span class="w">args</span>      <span class="cm">=&gt;</span> <span class="q">'items,default,order'</span><span class="cm">,</span>
        -<span class="w">mandatory</span> <span class="cm">=&gt;</span> <span class="q">'items'</span>
    <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$items</span>   = <span class="i">$args</span>{-<span class="w">items</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$default</span> = <span class="i">$args</span>{-<span class="w">default</span>}<span class="sc">;</span>    <span class="c">#Default Tab</span>
    <span class="k">my</span> <span class="i">$order</span>   = <span class="i">$args</span>{-<span class="w">order</span>}<span class="sc">;</span>      <span class="c">#Order array ref</span>

    <span class="k">my</span> <span class="i">%elements</span> = <span class="i">%</span>{<span class="i">$items</span>}<span class="sc">;</span>

    <span class="c">#Figure out the order</span>
    <span class="k">my</span> <span class="i">@order</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$order</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">@order</span> = <span class="i">@</span>{<span class="i">$order</span>}<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="i">@order</span> = <span class="k">sort</span> <span class="k">keys</span> <span class="i">%elements</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="c">#The tab itself</span>
    <span class="k">my</span> <span class="i">$tab</span> = <span class="q">qq^&lt;div id=&quot;tablist&quot;&gt;\n^</span><span class="sc">;</span>

    <span class="c">#The content of the tab</span>
    <span class="k">my</span> <span class="i">$tabcontent</span> = <span class="q">qq^&lt;div id=&quot;tabcontentcontainer&quot;&gt;\n^</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$item</span> <span class="s">(</span><span class="i">@order</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> !<span class="i">$elements</span>{<span class="i">$item</span>} <span class="s">)</span> <span class="s">{</span><span class="k">next</span><span class="s">}</span>

        <span class="i">$tab</span> .= <span class="q">qq^&lt;li onClick=&quot;expandcontent('$item', this)&quot;&gt;$item&lt;/li&gt;\n^</span><span class="sc">;</span>

        <span class="i">$tabcontent</span> .= <span class="q">qq^&lt;div id='$item' class=&quot;tabcontent&quot;&gt;\n$elements{$item}\n&lt;/div&gt;\n\n^</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="i">$tab</span>        .= <span class="q">&quot;&lt;/div&gt;\n&quot;</span><span class="sc">;</span>
    <span class="i">$tabcontent</span> .= <span class="q">&quot;&lt;/div&gt;\n&quot;</span><span class="sc">;</span>
    <span class="i">$tabcontent</span> .= <span class="q">&quot;&lt;script&gt; do_onload('$default') &lt;/script&gt;\n&quot;</span><span class="sc">;</span>

    <span class="c">#Return the tab and tab content as two strings</span>
    <span class="k">return</span> <span class="s">(</span> <span class="i">$tab</span><span class="cm">,</span> <span class="i">$tabcontent</span> <span class="s">)</span><span class="sc">;</span>

<span class="s">}</span>

<span class="c">########################################</span>
<span class="c"># Method to create an expandable input</span>
<span class="c">#</span>
<span class="c"># &lt;snip&gt;</span>
<span class="c">#</span>
<span class="c"># my @elements = (101..105);</span>
<span class="c"># my %labels=&gt; { '1' =&gt; 'first',</span>
<span class="c">#	         '2' =&gt; 'second',</span>
<span class="c">#	         '3' =&gt; 'third'</span>
<span class="c">#	       };</span>
<span class="c"># print expandable_input(-name=&gt;'myTxt3', -type=&gt;'text', -elements=&gt;\@elements, -options=&gt;\%labels, -default=&gt;[1,1,2,3,3], -propagate=&gt;3);</span>
<span class="c">#</span>
<span class="c"># &lt;/snip&gt;</span>
<span class="c">#</span>
<span class="c"># Returns an HTML string that can be printed out</span>
<span class="c">#</span>
<span class="c">####################</span>
<a name="expandable_input-"></a><span class="k">sub </span><span class="m">expandable_input</span> <span class="s">{</span>
<span class="c">####################</span>

    <span class="k">my</span> <span class="i">%args</span> = <span class="i">filter_input</span><span class="s">(</span> \<span class="i">@_</span><span class="cm">,</span> -<span class="w">args</span> <span class="cm">=&gt;</span> <span class="q">'name'</span><span class="cm">,</span> -<span class="w">mandatory</span> <span class="cm">=&gt;</span> <span class="q">'name'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$elements</span> = <span class="k">join</span><span class="s">(</span> <span class="q">&quot;','&quot;</span><span class="cm">,</span> <span class="i">@</span>{ <span class="i">$args</span>{-<span class="w">elements</span>} } <span class="s">)</span><span class="sc">;</span>    <span class="c">#Elements array. Array ref</span>
    <span class="k">my</span> <span class="i">$fieldtype</span>  = <span class="i">$args</span>{-<span class="w">type</span>} || <span class="q">'text'</span><span class="sc">;</span>                             <span class="c">#Type of this input field. Either text or hidden (button)</span>
    <span class="k">my</span> <span class="i">$fieldname</span>  = <span class="i">$args</span>{-<span class="w">name</span>}<span class="sc">;</span>                                       <span class="c">#Name of this input field.</span>
    <span class="k">my</span> <span class="i">$opt_header</span> = <span class="i">$args</span>{-<span class="w">opt_header</span>} || <span class="s">[</span> <span class="q">'Element ID'</span><span class="cm">,</span> <span class="q">'Value'</span> <span class="s">]</span><span class="sc">;</span>    <span class="c">#Headers for options input field. Array ref of size 2</span>
    <span class="k">my</span> <span class="i">$opt_type</span>   = <span class="i">$args</span>{-<span class="w">opt_type</span>} || <span class="q">'dropdown'</span><span class="sc">;</span>                     <span class="c">#Type of options input field. dropdown or text</span>
    <span class="k">my</span> <span class="i">$options</span>    = <span class="i">$args</span>{-<span class="w">options</span>}<span class="sc">;</span>                                    <span class="c">#List of Options available. An array ref or a hash ref</span>
    <span class="k">my</span> <span class="i">$propagate</span>  = <span class="i">$args</span>{-<span class="w">propagate</span>} || <span class="n">0</span><span class="sc">;</span>                             <span class="c">#0: No propagate (default), 1: Normal Propagate, 2:Incremental Propagate, 3:Propagate All</span>
    <span class="k">my</span> <span class="i">$default</span>    = <span class="i">$args</span>{ - <span class="w">default</span> }<span class="sc">;</span>                                 <span class="c">#Default value for this input. Either a string or array of size elements</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$opt_type</span> <span class="k">ne</span> <span class="q">'dropdown'</span> &amp;&amp; <span class="i">$opt_type</span> <span class="k">ne</span> <span class="q">'text'</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="q">'Error: Invalid options type'</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="s">(</span> <span class="i">$labels</span><span class="cm">,</span> <span class="i">$keys</span> <span class="s">)</span> = <span class="q">' '</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$opt_type</span> <span class="k">eq</span> <span class="q">'text'</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$propagate</span> == <span class="n">2</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">return</span> <span class="q">&quot;Error: Does not make sense to use incremental propagate when opt_type is 'text'&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">if</span> <span class="s">(</span><span class="i">$options</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">return</span> <span class="q">&quot;Error: Does not make sense to specify options when opt_type is 'text', perhaps you want defaults&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>

        <span class="c">#Populate the options lists</span>
        <span class="k">if</span> <span class="s">(</span> <span class="k">ref</span><span class="s">(</span><span class="i">$options</span><span class="s">)</span> =~ <span class="q">/ARRAY/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$keys</span> = <span class="q">&quot;','&quot;</span> . <span class="k">join</span><span class="s">(</span> <span class="q">&quot;','&quot;</span><span class="cm">,</span> <span class="k">sort</span> <span class="i">@</span>{<span class="i">$options</span>} <span class="s">)</span><span class="sc">;</span>
            <span class="i">$labels</span> = <span class="i">$keys</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="k">ref</span><span class="s">(</span><span class="i">$options</span><span class="s">)</span> =~ <span class="q">/HASH/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">foreach</span> <span class="s">(</span> <span class="k">sort</span> <span class="k">keys</span> <span class="i">%</span>{<span class="i">$options</span>} <span class="s">)</span> <span class="s">{</span>
                <span class="i">$keys</span>   .= <span class="q">&quot;','&quot;</span> . <span class="i">$_</span><span class="sc">;</span>
                <span class="i">$labels</span> .= <span class="q">&quot;','&quot;</span> . <span class="i">$options</span>-&gt;{<span class="i">$_</span>}<span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="k">return</span> <span class="q">'Error: Invalid options list type'</span> . <span class="k">ref</span><span class="s">(</span><span class="i">$options</span><span class="s">)</span> . <span class="i">$options</span> . <span class="q">'!'</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$opt_header</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$opt_header</span> = <span class="k">join</span><span class="s">(</span> <span class="q">&quot;','&quot;</span><span class="cm">,</span> <span class="i">@</span>{<span class="i">$opt_header</span>} <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$default</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> !<span class="k">ref</span><span class="s">(</span><span class="i">$default</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$default</span> = <span class="q">&quot;$default,&quot;</span> x <span class="k">scalar</span><span class="s">(</span> <span class="i">@</span>{ <span class="i">$args</span>{-<span class="w">elements</span>} } <span class="s">)</span><span class="sc">;</span>
            <span class="i">$default</span> =~ <span class="q">s/,$//</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="k">ref</span><span class="s">(</span><span class="i">$default</span><span class="s">)</span> =~ <span class="q">/ARRAY/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">if</span> <span class="s">(</span> <span class="k">scalar</span><span class="s">(</span> <span class="i">@</span>{ <span class="i">$args</span>{-<span class="w">elements</span>} } <span class="s">)</span> == <span class="k">scalar</span><span class="s">(</span> <span class="i">@</span>{<span class="i">$default</span>} <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$default</span> = <span class="k">join</span><span class="s">(</span> <span class="q">','</span><span class="cm">,</span> <span class="i">@</span>{<span class="i">$default</span>} <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="k">return</span> <span class="q">&quot;Error: Length of elements (&quot;</span> . <span class="k">scalar</span><span class="s">(</span> <span class="i">@</span>{ <span class="i">$args</span>{-<span class="w">elements</span>} } <span class="s">)</span> . <span class="q">&quot;) does not match the length of defaults (&quot;</span> . <span class="k">scalar</span><span class="s">(</span> <span class="i">@</span>{<span class="i">$default</span>} <span class="s">)</span> . <span class="q">&quot;)&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="c">#A flag to keep track of whether the window is open or closed (default closed)</span>
    <span class="k">my</span> <span class="i">$flag</span> = <span class="q">&quot;&lt;input type='hidden' id='$fieldname&quot;</span> . <span class="q">&quot;_windowOpen' value=0&gt;&quot;</span><span class="sc">;</span>
    <span class="c">## for some reason CGI.pm doesn't print the id attribute, so we have to write the hidden tag by hand</span>
    <span class="c">#  my $flag = hidden(-name=&gt;$fieldname . &quot;_windowOpen&quot;, -id=&gt;&quot;fieldname_windowOpen&quot;, -value=&gt;0);</span>
    <span class="k">my</span> <span class="i">$onClickScript</span> = <span class="q">qq^get_options('$fieldname',['$elements'],'$opt_type',['$keys'],['$labels'],['$opt_header'],$propagate)^</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$fieldtype</span> <span class="k">eq</span> <span class="q">'text'</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">textfield</span><span class="s">(</span>
            -<span class="w">name</span>     <span class="cm">=&gt;</span> <span class="i">$fieldname</span><span class="cm">,</span>
            -<span class="w">id</span>       <span class="cm">=&gt;</span> <span class="i">$fieldname</span><span class="cm">,</span>
            -<span class="w">value</span>    <span class="cm">=&gt;</span> <span class="i">$default</span><span class="cm">,</span>
            -<span class="w">size</span>     <span class="cm">=&gt;</span> <span class="n">15</span><span class="cm">,</span>
            -<span class="w">readonly</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span>
            -<span class="w">onClick</span>  <span class="cm">=&gt;</span> <span class="i">$onClickScript</span>
        <span class="s">)</span> . <span class="q">&quot;\n$flag\n&quot;</span><span class="sc">;</span>

    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$fieldtype</span> =~ <span class="q">/hidden|button/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$onClick</span> = <span class="q">qq^onClick=&quot;this.value='Modify $fieldname';$onClickScript&quot;^</span><span class="sc">;</span>

        <span class="c">#    my $hidden = hidden(-name=&gt;$fieldname, -id=&gt;$fieldname, -value=&gt;$default);</span>
        <span class="k">my</span> <span class="i">$hidden</span> = <span class="q">&quot;&lt;input type='hidden' id='$fieldname' value='$default'&gt;&quot;</span><span class="sc">;</span>
        <span class="k">return</span> <span class="i">button</span><span class="s">(</span>
            -<span class="w">name</span>    <span class="cm">=&gt;</span> <span class="q">&quot;$fieldname button&quot;</span><span class="cm">,</span>
            -<span class="w">value</span>   <span class="cm">=&gt;</span> <span class="q">&quot;Set $fieldname&quot;</span><span class="cm">,</span>
            -<span class="w">onClick</span> <span class="cm">=&gt;</span> <span class="q">&quot;this.value='Modify $fieldname';$onClickScript&quot;</span>
        <span class="s">)</span> . <span class="q">&quot;\n$hidden\n$flag\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">return</span> <span class="q">'Invalid input type.'</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<a name="get_parameters-"></a><span class="k">sub </span><span class="m">get_parameters</span> <span class="s">{</span>

    <span class="k">my</span> <span class="i">%hash</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="s">(</span> <span class="i">param</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">unless</span> <span class="s">(</span> <span class="i">$_</span> =~ <span class="q">/Database|Value|Method|User|Name|Time|url|Session|Project/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$hash</span>{<span class="i">$_</span>} = <span class="k">join</span><span class="s">(</span> <span class="q">','</span><span class="cm">,</span> <span class="i">param</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">return</span> \<span class="i">%hash</span><span class="sc">;</span>
<span class="s">}</span>
<span class="k">return</span> <span class="n">1</span><span class="sc">;</span>

<a name="EOF-"></a></pre>
</body>
</html>
