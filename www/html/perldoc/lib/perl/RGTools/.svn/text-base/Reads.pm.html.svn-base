<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Reads.pm</title>
<link rev="made" href="mailto:root@localhost" />
</head>

<style type="text/css">
<!--
/* default style sheet generated by perltidy */
body {background: #FFFFFF; color: #000000}
pre { color: #000000; 
      background: #F0F0F0;
      font-family: courier;
    } 

.c  { color: #228B22;} /* comment */
.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.h  { color: #CD5555; font-weight:bold;} /* here-doc-target */
.hh { color: #CD5555; font-style:italic;} /* here-doc-text */
.i  { color: #00688B;} /* identifier */
.j  { color: #CD5555; font-weight:bold;} /* label */
.k  { color: #8B008B; font-weight:bold;} /* keyword */
.m  { color: #FF0000; font-weight:bold;} /* subroutine */
.n  { color: #B452CD;} /* numeric */
.p  { color: #000000;} /* paren */
.pd { color: #228B22; font-style:italic;} /* pod-text */
.pu { color: #000000;} /* punctuation */
.q  { color: #CD5555;} /* quote */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.v  { color: #B452CD;} /* v-string */
.w  { color: #000000;} /* bareword */
-->
</style>
<body style="background-color: white">
<a name="-top-"></a>
<h1>Reads.pm</h1>

<p><a name="__index__"></a></p>
<!-- INDEX BEGIN -->

<ul>

	<li><a href="#name__uplink_">NAME &lt;UPLINK&gt;</a></li>
	<li><a href="#synopsis__uplink_">SYNOPSIS &lt;UPLINK&gt;</a></li>
	<li><a href="#description__uplink_">DESCRIPTION &lt;UPLINK&gt;</a></li>
	<li><a href="#known_issues__uplink_">KNOWN ISSUES &lt;UPLINK&gt;</a></li>
	<li><a href="#future_improvements__uplink_">FUTURE IMPROVEMENTS &lt;UPLINK&gt;</a></li>
	<li><a href="#authors__uplink_">AUTHORS &lt;UPLINK&gt;</a></li>
	<li><a href="#created__uplink_">CREATED &lt;UPLINK&gt;</a></li>
	<li><a href="#revision__uplink_">REVISION &lt;UPLINK&gt;</a></li>
</ul>
<!-- INDEX END -->
<h2>Code Index:</h2>
<!-- BEGIN CODE INDEX --><a name="code-index"></a>
<ul>
<li><a href="#package-Reads-">package Reads</a>
<ul>
<li><a href="#new-">new</a></li>
<li><a href="#parse_directory-">parse_directory</a></li>
<li><a href="#run_phred-">run_phred</a></li>
<li><a href="#run_cross_match-">run_cross_match</a></li>
<li><a href="#parse_reads-">parse_reads</a></li>
<li><a href="#get_Read-">get_Read</a></li>
<li><a href="#print-">print</a></li>
<li><a href="#dump-">dump</a></li>
<li><a href="#create_CSV_file-">create_CSV_file</a></li>
<li><a href="#_check_for_repeating_sequence-">_check_for_repeating_sequence</a></li>
</ul>
</li>
<li><a href="#EOF-">EOF</a></li>
</ul>
<!-- END CODE INDEX -->

<hr />
<pre><span class="c">###############################################################</span>
<span class="c">#</span>
<span class="c">#  Reads</span>
<span class="c">#</span>
<span class="c"># This program handles read data</span>
<span class="c">#</span>
<span class="c">###############################################################</span>
<a name="package-Reads-"></a><span class="k">package </span><span class="i">Reads</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># perldoc_header             #</span>
<span class="c">##############################</span>

</pre><p></p>
<hr />
<h1><a name="name__uplink_">NAME &lt;UPLINK&gt;</a></h1>
<p>Reads.pm - This program handles read data</p>
<p>
</p>
<hr />
<h1><a name="synopsis__uplink_">SYNOPSIS &lt;UPLINK&gt;</a></h1>
<pre>
        &lt;&lt;SYNOPSIS&gt;&gt;</pre>
<p>
</p>
<hr />
<h1><a name="description__uplink_">DESCRIPTION &lt;UPLINK&gt;</a></h1>
This program handles read data <BR><pre>
<span class="c">##############################</span>
<span class="c"># superclasses               #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># system_variables           #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># standard_modules_ref       #</span>
<span class="c">##############################</span>
<span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">Storable</span> <span class="q">qw(freeze thaw)</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">Data::Dumper</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">RGTools::RGIO</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># custom_modules_ref         #</span>
<span class="c">##############################</span>
<span class="k">use</span> <span class="w">RGTools::Read</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># global_vars                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># modular_vars               #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># constants                  #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># main_header                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># constructor                #</span>
<span class="c">##############################</span>

<span class="c">#######</span>
<a name="new-"></a><span class="k">sub </span><span class="m">new</span> <span class="s">{</span>
<span class="c">#######</span>
    <span class="c">#</span>
    <span class="c">#Constructor of the Reads object</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$this</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="s">(</span><span class="i">$class</span><span class="s">)</span> = <span class="k">ref</span><span class="s">(</span><span class="i">$this</span><span class="s">)</span> || <span class="i">$this</span><span class="sc">;</span>
    <span class="k">my</span> <span class="s">(</span><span class="i">$self</span><span class="s">)</span> = <span class="s">{</span><span class="s">}</span><span class="sc">;</span>

    <span class="i">$self</span>-&gt;{<span class="w">reads_count</span>}           = <span class="n">0</span><span class="sc">;</span>     <span class="c">#Number of reads found [Int]</span>
    <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}           = <span class="s">{</span><span class="s">}</span><span class="sc">;</span>    <span class="c">#Indexes to the Read objects [Hash]</span>
    <span class="i">$self</span>-&gt;{<span class="w">reads</span>}                 = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>    <span class="c">#An array of individual Read objects [Array]</span>
    <span class="i">$self</span>-&gt;{<span class="w">phred_output</span>}          = <span class="q">''</span><span class="sc">;</span>    <span class="c">#Output file of phred [String]</span>
    <span class="i">$self</span>-&gt;{<span class="w">phred_screened_output</span>} = <span class="q">''</span><span class="sc">;</span>    <span class="c">#Screened output file of phred [string]</span>
    <span class="i">$self</span>-&gt;{<span class="w">screen_output</span>}         = <span class="q">''</span><span class="sc">;</span>    <span class="c">#Output file of Cross Match [String]</span>
    <span class="i">$self</span>-&gt;{<span class="w">quality_output</span>}        = <span class="q">''</span><span class="sc">;</span>    <span class="c">#Quality output file of phred [String]</span>

    <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>}     = <span class="q">''</span><span class="sc">;</span>              <span class="c">#Location of phd_dir [String]</span>
    <span class="i">$self</span>-&gt;{<span class="w">chromat_dir</span>} = <span class="q">''</span><span class="sc">;</span>              <span class="c">#Location of chromat_dir [String]</span>

    <span class="i">$self</span>-&gt;{<span class="w">phred_version</span>}       = <span class="q">''</span><span class="sc">;</span>      <span class="c">#Version of the phred bin [String]</span>
    <span class="i">$self</span>-&gt;{<span class="w">phred_command</span>}       = <span class="q">''</span><span class="sc">;</span>      <span class="c">#Phred command that will be run [String]</span>
    <span class="i">$self</span>-&gt;{<span class="w">cross_match_command</span>} = <span class="q">''</span><span class="sc">;</span>      <span class="c">#Cross Match command that will be run [String]</span>

    <span class="k">bless</span> <span class="i">$self</span><span class="cm">,</span> <span class="i">$class</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">$self</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">##############################</span>
<span class="c"># public_methods             #</span>
<span class="c">##############################</span>

<span class="c">#######################</span>
<a name="parse_directory-"></a><span class="k">sub </span><span class="m">parse_directory</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="c">#</span>
    <span class="c">#Generate data for chromat files in a given directory</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$dir</span>     = <span class="i">$args</span>{<span class="w">dir</span>}         || <span class="q">''</span><span class="sc">;</span>    <span class="c">#Working directory [String]</span>
    <span class="k">my</span> <span class="i">$vectors</span> = <span class="i">$args</span>{<span class="w">vector_file</span>} || <span class="q">''</span><span class="sc">;</span>    <span class="c">#Location of vector file [String]</span>
                                               <span class="c">#my $dump = $args{dump};</span>
                                               <span class="c">#my $freeze = $args{freeze};</span>
                                               <span class="c">#my $verbose = $args{verbose};</span>
    <span class="k">my</span> <span class="i">$phredpar</span>        = <span class="i">$args</span>{<span class="w">phredpar</span>}<span class="sc">;</span>                                           <span class="c">#Location of the phredpar.dat file [String]</span>
    <span class="k">my</span> <span class="i">$phred_bin</span>       = <span class="i">$args</span>{<span class="w">phred_bin</span>} || <span class="q">'/usr/local/bin/phred'</span><span class="sc">;</span>                <span class="c">#Location of the phred bin file [String]</span>
    <span class="k">my</span> <span class="i">$cross_match_bin</span> = <span class="i">$args</span>{<span class="w">cross_match_bin</span>} || <span class="q">'/usr/local/bin/cross_match'</span><span class="sc">;</span>    <span class="c"># Location of the cross match bin file [String]</span>
    <span class="k">my</span> <span class="i">$trim</span>            = <span class="i">$args</span>{<span class="w">trim</span>}<span class="sc">;</span>                                               <span class="c"># include phredscores.trimmed file - trimmed for quality and vector</span>
    <span class="k">my</span> <span class="i">$phred_file</span>      = <span class="i">$args</span>{<span class="w">phredfile</span>}<span class="sc">;</span>

    <span class="i">$self</span>-&gt;{<span class="w">dir</span>} = <span class="i">$dir</span><span class="sc">;</span>

    <span class="c">#    $self-&gt;{chromat_dir} = $args{chromat_dir} || '';    ## directory for trace files</span>
    <span class="i">$self</span>-&gt;{<span class="w">chromat_dir</span>} = <span class="q">&quot;$dir/chromat_dir&quot;</span><span class="sc">;</span>

    <span class="c">#    $self-&gt;{phd_dir} = $args{phd_dir};             ## directory for phd files</span>
    <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>} = <span class="q">&quot;$dir/phd_dir&quot;</span><span class="sc">;</span>

    <span class="i">$self</span>-&gt;{<span class="w">phred_output</span>}          = <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>} . <span class="q">&quot;/phredscores&quot;</span><span class="sc">;</span>
    <span class="i">$self</span>-&gt;{<span class="w">phred_screened_output</span>} = <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>} . <span class="q">&quot;/phredscores.screen&quot;</span><span class="sc">;</span>
    <span class="i">$self</span>-&gt;{<span class="w">screen_output</span>}         = <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>} . <span class="q">&quot;/screen&quot;</span><span class="sc">;</span>

    <span class="k">print</span> <span class="q">&quot;Run Phred -&gt; phredscores \n$self-&gt;{phred_command} ...\n&quot;</span><span class="sc">;</span>
    <span class="k">print</span> <span class="i">$self</span><span class="i">-&gt;run_phred</span><span class="s">(</span>
        <span class="w">trim_alt</span>   <span class="cm">=&gt;</span> <span class="q">'a'</span><span class="cm">,</span>
        <span class="w">dir</span>        <span class="cm">=&gt;</span> <span class="i">$self</span>-&gt;{<span class="w">dir</span>}<span class="cm">,</span>
        <span class="w">phred_file</span> <span class="cm">=&gt;</span> <span class="q">'phredscores'</span><span class="cm">,</span>
        <span class="w">run</span>        <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span>
        <span class="w">phredpar</span>   <span class="cm">=&gt;</span> <span class="i">$phredpar</span><span class="cm">,</span>
        <span class="w">phred_bin</span>  <span class="cm">=&gt;</span> <span class="i">$phred_bin</span><span class="cm">,</span>
        <span class="w">phredfile</span>  <span class="cm">=&gt;</span> <span class="i">$phred_file</span>
    <span class="s">)</span><span class="sc">;</span>
    <span class="k">print</span> <span class="q">&quot;Run Cross_Match -&gt; phredscores.screen \n$self-&gt;{cross_match_command} ...\n\n&quot;</span><span class="sc">;</span>
    <span class="i">$self</span><span class="i">-&gt;run_cross_match</span><span class="s">(</span>
        <span class="w">dir</span>             <span class="cm">=&gt;</span> <span class="i">$self</span>-&gt;{<span class="w">dir</span>}<span class="cm">,</span>
        <span class="w">phred_file</span>      <span class="cm">=&gt;</span> <span class="q">'phredscores'</span><span class="cm">,</span>
        <span class="w">screen_file</span>     <span class="cm">=&gt;</span> <span class="q">'phredscores.screen'</span><span class="cm">,</span>
        <span class="w">vector_file</span>     <span class="cm">=&gt;</span> <span class="i">$vectors</span><span class="cm">,</span>
        <span class="w">run</span>             <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span>
        <span class="w">cross_match_bin</span> <span class="cm">=&gt;</span> <span class="i">$cross_match_bin</span>
    <span class="s">)</span><span class="sc">;</span>
    <span class="i">$self</span><span class="i">-&gt;parse_reads</span><span class="s">(</span><span class="i">$trim</span><span class="s">)</span><span class="sc">;</span>

    <span class="c">#if ($dump) {</span>
    <span class="c">#print $self-&gt;dump();</span>
    <span class="c">#}</span>
    <span class="c">#elsif ($print) {</span>
    <span class="c">#print $self-&gt;print();</span>
    <span class="c">#}</span>
    <span class="c">#elsif ($freeze) {</span>
    <span class="c">#return freeze($self);    ## return frozen copy of object</span>
    <span class="c">#}</span>

    <span class="k">return</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">############</span>
<a name="run_phred-"></a><span class="k">sub </span><span class="m">run_phred</span> <span class="s">{</span>
<span class="c">############</span>
    <span class="c">#</span>
    <span class="c">#Generate and run phred command ##</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$trim_alt</span>     = <span class="i">$args</span>{<span class="w">trim_alt</span>}<span class="sc">;</span>                               <span class="c">#Trim alt [String]</span>
    <span class="k">my</span> <span class="i">$phred_output</span> = <span class="i">$args</span>{<span class="w">phred_file</span>}<span class="sc">;</span>                             <span class="c"># phred filename [String]</span>
    <span class="k">my</span> <span class="i">$run</span>          = <span class="i">$args</span>{<span class="w">run</span>}<span class="sc">;</span>                                    <span class="c"># run after generating command [Boolean]</span>
    <span class="k">my</span> <span class="i">$phd_dir</span>      = <span class="i">$args</span>{<span class="w">phd_dir</span>}<span class="sc">;</span>                                <span class="c"># (optional) - defaults to $dir/phd_dir [String]</span>
    <span class="k">my</span> <span class="i">$chromat_dir</span>  = <span class="i">$args</span>{<span class="w">chromat_dir</span>}<span class="sc">;</span>                            <span class="c"># (optional) - defaults to $dir/chromat_dir [String]</span>
                                                                      <span class="c">#my $log = $args{log} || &quot;$phd_dir/phred_command.log&quot;;</span>
    <span class="k">my</span> <span class="i">$phredpar</span>     = <span class="i">$args</span>{<span class="w">phredpar</span>}<span class="sc">;</span>                               <span class="c">#Location of the phredpar.dat file [String]</span>
    <span class="k">my</span> <span class="i">$phred_bin</span>    = <span class="i">$args</span>{<span class="w">phred_bin</span>} || <span class="q">'/usr/local/bin/phred'</span><span class="sc">;</span>    <span class="c">#Location of the phred bin file [String]</span>

<span class="c">## Generate phred files ##</span>
    <span class="i">$chromat_dir</span> = <span class="i">$self</span>-&gt;{<span class="w">dir</span>} . <span class="q">'/chromat_dir'</span><span class="sc">;</span>                     <span class="c"># trace dir</span>
    <span class="i">$phd_dir</span>     = <span class="i">$self</span>-&gt;{<span class="w">dir</span>} . <span class="q">'/phd_dir'</span><span class="sc">;</span>                         <span class="c"># phred dir</span>
    <span class="k">my</span> <span class="i">$qual_file</span> = <span class="q">&quot;$phd_dir/phredscores.qual&quot;</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$pc</span> = <span class="q">&quot;$phred_bin -V -id $chromat_dir -qa $qual_file&quot;</span><span class="sc">;</span>
    <span class="i">$pc</span> .= <span class="q">&quot; -st fasta -sa $phd_dir/$phred_output -qt mix  -pd $phd_dir -p&quot;</span><span class="sc">;</span>

    <span class="k">if</span>   <span class="s">(</span> <span class="i">$trim_alt</span> =~ <span class="q">/[a-zA-Z]+/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$pc</span> .= <span class="q">&quot; -trim_alt $trim_alt &quot;</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                              <span class="s">{</span> <span class="i">$pc</span> .= <span class="q">&quot; -trim_alt \&quot;\&quot;&quot;</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$phredpar</span><span class="s">)</span> <span class="s">{</span> <span class="i">$pc</span> = <span class="q">&quot;export PHRED_PARAMETER_FILE=$phredpar;\n&quot;</span> . <span class="i">$pc</span> <span class="s">}</span>
    <span class="i">$self</span>-&gt;{<span class="w">phred_command</span>} = <span class="i">$pc</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$fback</span> = <span class="i">$self</span>-&gt;{<span class="w">phred_command</span>}<span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$run</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$fback</span> = <span class="i">try_system_command</span><span class="s">(</span> <span class="i">$self</span>-&gt;{<span class="w">phred_command</span>} <span class="s">)</span><span class="sc">;</span>
        <span class="i">$fback</span> =~ <span class="q">/phred version\: (\S+)/ms</span><span class="sc">;</span>
        <span class="i">$self</span>-&gt;{<span class="w">phred_version</span>} = <span class="i">$1</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$fback</span> =~ <span class="q">/unknown chemistry\s+(\S+).*?(\S+\.dat)$/ms</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;UNKNOWN CHEMISTRY: ($1) in $2\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="c">#if ($log) {`echo \'$fback\' &gt; $log`}</span>

    <span class="k">return</span> <span class="i">$fback</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">##################</span>
<a name="run_cross_match-"></a><span class="k">sub </span><span class="m">run_cross_match</span> <span class="s">{</span>
<span class="c">##################</span>
    <span class="c">#</span>
    <span class="c">#Generate and run phred command ##</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$phred_file</span>      = <span class="i">$args</span>{<span class="w">phred_file</span>}<span class="sc">;</span>                                         <span class="c">#Location of the phd file [String]</span>
    <span class="k">my</span> <span class="i">$vector_file</span>     = <span class="i">$args</span>{<span class="w">vector_file</span>}<span class="sc">;</span>                                        <span class="c">#Location of the vector file [String]</span>
    <span class="k">my</span> <span class="i">$screen_file</span>     = <span class="i">$args</span>{<span class="w">screen_file</span>}<span class="sc">;</span>                                        <span class="c">#Location of the screen file [Strng]</span>
    <span class="k">my</span> <span class="i">$phd_dir</span>         = <span class="i">$args</span>{<span class="w">phd_dir</span>} || <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>}<span class="sc">;</span>                        <span class="c">## optional (defaults to $dir/phd_dir)</span>
    <span class="k">my</span> <span class="i">$run</span>             = <span class="i">$args</span>{<span class="w">run</span>}<span class="sc">;</span>                                                <span class="c">#run after generating comand [Boolean]</span>
                                                                                     <span class="c">#my $log = $args{log} || &quot;$phd_dir/cross_match_command.log&quot;;</span>
    <span class="k">my</span> <span class="i">$cross_match_bin</span> = <span class="i">$args</span>{<span class="w">cross_match_bin</span>} || <span class="q">'/usr/local/bin/cross_match'</span><span class="sc">;</span>    <span class="c"># Location of the cross match bin file [String]</span>

    <span class="k">unless</span> <span class="s">(</span> <span class="i">$phred_file</span> &amp;&amp; <span class="i">$vector_file</span> &amp;&amp; <span class="i">$screen_file</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Require phred_file ($phred_file), vector_file ($vector_file), screen_file ($screen_file)\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span><span class="sc">;</span>
    <span class="s">}</span>

<span class="c">## Generate cross_match command ##</span>

    <span class="k">my</span> <span class="i">$options</span> = <span class="q">&quot; -minmatch 12 -minscore 20 -screen &quot;</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$cmc</span>     = <span class="q">&quot;$cross_match_bin $phd_dir/$phred_file $vector_file $options &gt; $phd_dir/$screen_file.log&quot;</span><span class="sc">;</span>

    <span class="i">$self</span>-&gt;{<span class="w">cross_match_command</span>} = <span class="q">&quot;$cross_match_bin $phd_dir/$phred_file $vector_file $options &gt; $phd_dir/$screen_file.log&quot;</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$fback</span> = <span class="i">$self</span>-&gt;{<span class="w">cross_match_command</span>}<span class="sc">;</span>

    <span class="c">#print &quot;*** $self-&gt;{cross_match_command} ***\n&quot;;</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$run</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$fback</span> = <span class="i">try_system_command</span><span class="s">(</span> <span class="i">$self</span>-&gt;{<span class="w">cross_match_command</span>} <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$fback</span> =~ <span class="q">/^(.*?error.*?)$/ms</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;ERROR: ($1)\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="c">#if ($log) {`echo \'$fback\' &gt; $log`}</span>

    <span class="k">return</span> <span class="i">$fback</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#######################</span>
<a name="parse_reads-"></a><span class="k">sub </span><span class="m">parse_reads</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="c">#</span>
    <span class="c">#Go through screen file and phred files</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$trim</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$generate_trimmed_fasta</span> = <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>} . <span class="q">&quot;/phredscores.trimmed&quot;</span> <span class="k">if</span> <span class="i">$trim</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$generate_trimmed_fasta</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">open</span><span class="s">(</span> <span class="w">TRIMMED</span><span class="cm">,</span> <span class="q">&quot;&gt;$generate_trimmed_fasta&quot;</span> <span class="s">)</span> <span class="k">or</span> <span class="k">print</span> <span class="q">&quot;Cannot open $generate_trimmed_fasta file&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">$p</span><span class="sc">;</span>

    <span class="c">#print &quot;open $self-&gt;{screen_output} and parse data in here...\n&quot;;</span>
    <span class="k">my</span> <span class="i">$screen</span> = <span class="i">$self</span>-&gt;{<span class="w">phred_screened_output</span>}<span class="sc">;</span>

    <span class="k">open</span><span class="s">(</span> <span class="w">SCREEN</span><span class="cm">,</span> <span class="i">$screen</span> <span class="s">)</span> <span class="k">or</span> <span class="k">die</span><span class="s">(</span><span class="q">&quot;Error opening Screen file: $screen: $!\n&quot;</span><span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@Q20</span><span class="sc">;</span>    <span class="c">### array of Phred 20 quality values for each run..</span>
    <span class="k">my</span> <span class="i">@SL</span><span class="sc">;</span>     <span class="c">### array of sequence length values for each run..</span>
    <span class="k">while</span> <span class="s">(</span><span class="q">&lt;SCREEN&gt;</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$label</span> = <span class="i">$_</span><span class="sc">;</span>
        <span class="i">$p</span> .= <span class="q">&quot;$label&quot;</span><span class="sc">;</span>    <span class="c"># extract header line</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$label</span> =~ <span class="q">/^&gt;(\S*)\s+(\d+)\s+(\d+)\s+(\d+)\s+[a-zA-Z]{3}\s*$/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$clone</span>          = <span class="i">$1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$total_length</span>   = <span class="i">$2</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$Ql</span>             = <span class="i">$3</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$quality_length</span> = <span class="i">$4</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$Qr</span>             = <span class="i">$quality_length</span> + <span class="i">$Ql</span> - <span class="n">1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$good_length</span>    = <span class="n">0</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">@comments</span>       = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$note_id</span>        = <span class="q">'NULL'</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$error</span>          = <span class="q">''</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">@warnings</span>       = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>

            <span class="i">$p</span> .= <span class="q">&quot;Length (of $clone): $total_length&quot;</span><span class="sc">;</span>

            <span class="k">my</span> <span class="i">$line</span><span class="sc">;</span>
            <span class="k">if</span> <span class="s">(</span><span class="i">$total_length</span><span class="s">)</span> <span class="s">{</span> <span class="i">$line</span> = <span class="q">&lt;SCREEN&gt;</span><span class="sc">;</span> <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="i">$error</span>   = <span class="q">'Empty Read'</span><span class="sc">;</span>
                <span class="i">$note_id</span> = <span class="n">5</span><span class="sc">;</span>
            <span class="s">}</span>

            <span class="k">chop</span> <span class="i">$line</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$total_read</span>   = <span class="k">length</span><span class="s">(</span><span class="i">$line</span><span class="s">)</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$screened_seq</span> = <span class="i">$line</span><span class="sc">;</span>

            <span class="c"># Read the rest of the sequence</span>
            <span class="k">while</span> <span class="s">(</span> <span class="i">$total_read</span> &lt; <span class="i">$total_length</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$line</span> = <span class="q">&lt;SCREEN&gt;</span><span class="sc">;</span>
                <span class="k">chop</span> <span class="i">$line</span><span class="sc">;</span>
                <span class="i">$screened_seq</span> .= <span class="i">$line</span><span class="sc">;</span>
                <span class="i">$total_read</span> += <span class="k">length</span><span class="s">(</span><span class="i">$line</span><span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>

            <span class="c"># Calculate Vector Left, Vector Right</span>
            <span class="k">my</span> <span class="i">$Vl</span>         = <span class="n">-1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$Vr</span>         = <span class="n">-1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$Vq</span>         = <span class="n">0</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$Vt</span>         = <span class="n">0</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$trim_left</span>  = <span class="n">-1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$trim_right</span> = <span class="n">-1</span><span class="sc">;</span>

            <span class="k">if</span> <span class="s">(</span> <span class="i">$quality_length</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">my</span> <span class="i">$left_seq</span> = <span class="k">substr</span> <span class="i">$screened_seq</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="i">$Ql</span><span class="sc">;</span>
                <span class="k">my</span> <span class="i">$right_seq</span> = <span class="k">substr</span> <span class="i">$screened_seq</span><span class="cm">,</span> <span class="i">$Qr</span> + <span class="n">1</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$left_seq</span>  =~ <span class="q">/[xX]$/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$Vl</span> = <span class="i">$Ql</span> - <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$right_seq</span> =~ <span class="q">/^[xX]/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$Vr</span> = <span class="i">$Qr</span><span class="sc">;</span> <span class="s">}</span>
                <span class="k">my</span> <span class="i">$ll</span> = <span class="k">length</span><span class="s">(</span><span class="i">$left_seq</span><span class="s">)</span><span class="sc">;</span>
                <span class="k">my</span> <span class="i">$rl</span> = <span class="k">length</span><span class="s">(</span><span class="i">$right_seq</span><span class="s">)</span><span class="sc">;</span>

                <span class="c">#	           print &quot;\nLeft: $left_seq ($ll)\n&quot;;</span>
                <span class="c">#	           print &quot;\nRight: $right_seq ($rl)\n&quot;;</span>

                <span class="c">## quality region</span>
                <span class="k">my</span> <span class="i">$mid_seq</span> = <span class="k">substr</span> <span class="i">$screened_seq</span><span class="cm">,</span> <span class="i">$Ql</span><span class="cm">,</span> <span class="i">$quality_length</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$mid_seq</span> =~ <span class="q">m/^([xX]*)([actgACTGnN]+)([xX]*)$/</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$good_length</span> = <span class="k">length</span><span class="s">(</span><span class="i">$2</span><span class="s">)</span><span class="sc">;</span>
                    <span class="k">if</span> <span class="s">(</span><span class="i">$1</span><span class="s">)</span> <span class="s">{</span> <span class="i">$Vl</span> = <span class="k">length</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span> + <span class="i">$Ql</span> - <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>
                    <span class="k">if</span> <span class="s">(</span><span class="i">$3</span><span class="s">)</span> <span class="s">{</span> <span class="i">$Vr</span> = <span class="i">$Ql</span> + <span class="k">length</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span> + <span class="k">length</span><span class="s">(</span><span class="i">$2</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span>
                    <span class="i">$Vq</span> = <span class="k">length</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span> + <span class="k">length</span><span class="s">(</span><span class="i">$3</span><span class="s">)</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">elsif</span> <span class="s">(</span> <span class="i">$mid_seq</span> =~ <span class="q">m/^([xX]+)$/</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$good_length</span> = <span class="n">0</span><span class="sc">;</span>
                    <span class="i">$Vl</span>          = <span class="i">$total_length</span> - <span class="n">1</span><span class="sc">;</span>
                    <span class="i">$Vr</span>          = <span class="n">0</span><span class="sc">;</span>
                    <span class="i">$Vq</span>          = <span class="i">$quality_length</span><span class="sc">;</span>
                    <span class="k">push</span><span class="s">(</span> <span class="i">@warnings</span><span class="cm">,</span> <span class="q">'Vector Only'</span> <span class="s">)</span><span class="sc">;</span>
                    <span class="i">$note_id</span> = <span class="n">3</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">else</span> <span class="s">{</span>
                    <span class="k">my</span> <span class="i">$format</span><span class="sc">;</span>
                    <span class="i">$Vq</span> = <span class="n">0</span><span class="sc">;</span>
                    <span class="k">my</span> <span class="i">$IEseq</span> = <span class="i">$mid_seq</span><span class="sc">;</span>
                    <span class="k">while</span> <span class="s">(</span><span class="i">$IEseq</span><span class="s">)</span> <span class="s">{</span>
                        <span class="k">if</span> <span class="s">(</span> <span class="i">$IEseq</span> =~ <span class="q">/^([agtcAGTCnN]+)(.*)$/</span> <span class="s">)</span> <span class="s">{</span>
                            <span class="i">$IEseq</span> = <span class="i">$2</span><span class="sc">;</span>
                            <span class="i">$format</span> .= <span class="q">&quot;N(&quot;</span> . <span class="k">length</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span> . <span class="q">&quot;)&quot;</span><span class="sc">;</span>
                        <span class="s">}</span>
                        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$IEseq</span> =~ <span class="q">/^([xX]+)(.*)$/</span> <span class="s">)</span> <span class="s">{</span>
                            <span class="i">$Vq</span> += <span class="k">length</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span><span class="sc">;</span>
                            <span class="i">$IEseq</span> = <span class="i">$2</span><span class="sc">;</span>
                            <span class="i">$format</span> .= <span class="q">&quot;X(&quot;</span> . <span class="k">length</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span> . <span class="q">&quot;)&quot;</span><span class="sc">;</span>
                        <span class="s">}</span>
                        <span class="k">else</span> <span class="s">{</span>
                            <span class="k">last</span><span class="sc">;</span>
                        <span class="s">}</span>
                    <span class="s">}</span>

                    <span class="c">#print &quot;Vector segment found: $format. (Qleft:$Ql)\n&quot;;</span>
                    <span class="i">$note_id</span> = <span class="n">4</span><span class="sc">;</span>
                    <span class="k">push</span><span class="s">(</span> <span class="i">@warnings</span><span class="cm">,</span> <span class="q">'Vector Segment'</span> <span class="s">)</span><span class="sc">;</span>
                    <span class="k">push</span><span class="s">(</span> <span class="i">@comments</span><span class="cm">,</span> <span class="i">$format</span> <span class="s">)</span><span class="sc">;</span>
                <span class="s">}</span>

                <span class="k">if</span> <span class="s">(</span> <span class="i">$Vr</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$Vt</span> += <span class="i">$total_length</span> - <span class="i">$Vr</span> + <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$Vl</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$Vt</span> += <span class="i">$Vl</span> + <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>

                <span class="k">if</span> <span class="s">(</span> <span class="i">$Vt</span> &gt; <span class="i">$total_length</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$Vt</span> = <span class="i">$total_length</span><span class="sc">;</span>
                    <span class="i">$Vl</span> = <span class="i">$total_length</span><span class="sc">;</span>
                    <span class="i">$Vr</span> = <span class="n">0</span><span class="sc">;</span>
                <span class="s">}</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$total_length</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$Vl</span>             = <span class="n">-1</span><span class="sc">;</span>
                <span class="i">$Vr</span>             = <span class="n">-1</span><span class="sc">;</span>
                <span class="i">$Vq</span>             = <span class="n">0</span><span class="sc">;</span>
                <span class="i">$Vt</span>             = <span class="n">0</span><span class="sc">;</span>
                <span class="i">$Ql</span>             = <span class="n">-1</span><span class="sc">;</span>
                <span class="i">$Qr</span>             = <span class="n">-1</span><span class="sc">;</span>
                <span class="i">$quality_length</span> = <span class="n">0</span><span class="sc">;</span>
                <span class="i">$note_id</span>        = <span class="n">1</span><span class="sc">;</span>
                <span class="k">push</span><span class="s">(</span> <span class="i">@warnings</span><span class="cm">,</span> <span class="q">'Poor Quality'</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="i">$error</span>          = <span class="q">'Empty Read'</span><span class="sc">;</span>
                <span class="i">$quality_length</span> = <span class="n">0</span><span class="sc">;</span>
                <span class="i">$total_length</span>   = <span class="n">0</span><span class="sc">;</span>
            <span class="s">}</span>

            <span class="k">my</span> <span class="i">$phd_file</span> = <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>} . <span class="q">&quot;/$clone.phd.1&quot;</span><span class="sc">;</span>
            <span class="c">## open phd files to get scores</span>
            <span class="k">open</span><span class="s">(</span> <span class="w">PFILE</span><span class="cm">,</span> <span class="i">$phd_file</span> <span class="s">)</span> <span class="k">or</span> <span class="k">die</span><span class="s">(</span><span class="q">&quot;Error opening Phd file: $phd_file: $!\n&quot;</span><span class="s">)</span><span class="sc">;</span>

            <span class="k">my</span> <span class="i">@hist</span> = <span class="k">map</span> <span class="s">{</span><span class="n">0</span><span class="s">}</span> <span class="s">(</span> <span class="n">0</span> .. <span class="n">99</span> <span class="s">)</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">@good</span> = <span class="k">map</span> <span class="s">{</span><span class="n">0</span><span class="s">}</span> <span class="s">(</span> <span class="n">0</span> .. <span class="n">99</span> <span class="s">)</span><span class="sc">;</span>

            <span class="k">while</span> <span class="s">(</span><span class="q">&lt;PFILE&gt;</span><span class="s">)</span> <span class="s">{</span>
                <span class="i">$line</span> = <span class="i">$_</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span><span class="q">/^TRIM:\s+(\d+)\s+(\d+)\s+(\d+[.]?\d+)/</span><span class="s">)</span> <span class="s">{</span>
                    <span class="i">$trim_left</span>  = <span class="i">$1</span><span class="sc">;</span>
                    <span class="i">$trim_right</span> = <span class="i">$2</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">if</span> <span class="s">(</span><span class="q">/^BEGIN_DNA/</span><span class="s">)</span> <span class="s">{</span>
                    <span class="k">last</span><span class="sc">;</span>
                <span class="s">}</span>
            <span class="s">}</span>

            <span class="k">my</span> <span class="i">$total_score</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$total_seq</span>   = <span class="q">&quot;&quot;</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">@all_scores</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$length</span> = <span class="n">0</span><span class="sc">;</span>

            <span class="k">my</span> <span class="i">$index</span>      = <span class="n">1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$good_left</span>  = <span class="i">$Ql</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$good_right</span> = <span class="i">$Qr</span><span class="sc">;</span>
            <span class="k">if</span> <span class="s">(</span> <span class="i">$Vl</span> &gt; <span class="i">$Ql</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$good_left</span> = <span class="i">$Vl</span><span class="sc">;</span> <span class="s">}</span>
            <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$Vr</span> &gt;= <span class="n">0</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$Vr</span> &lt; <span class="i">$Qr</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$good_right</span> = <span class="i">$Vr</span><span class="sc">;</span> <span class="s">}</span>

            <span class="k">while</span> <span class="s">(</span><span class="q">&lt;PFILE&gt;</span><span class="s">)</span> <span class="s">{</span>
                <span class="s">(</span> <span class="k">my</span> <span class="i">$seq_bp</span><span class="cm">,</span> <span class="k">my</span> <span class="i">$score</span><span class="cm">,</span> <span class="k">my</span> <span class="i">$cumulative</span> <span class="s">)</span> = <span class="k">split</span> <span class="q">/[\s]/</span><span class="cm">,</span> <span class="i">$_</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$seq_bp</span> =~ <span class="q">m/DNA/</span> <span class="s">)</span> <span class="s">{</span><span class="k">last</span><span class="s">}</span>
                <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$index</span> &gt;= <span class="i">$good_left</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$index</span> &lt;= <span class="i">$good_right</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$good</span>[<span class="i">$score</span>]++<span class="sc">;</span>
                <span class="s">}</span>
                <span class="i">$total_seq</span> .= <span class="i">$seq_bp</span><span class="sc">;</span>
                <span class="k">push</span><span class="s">(</span> <span class="i">@all_scores</span><span class="cm">,</span> <span class="i">$score</span> <span class="s">)</span><span class="sc">;</span>
                <span class="i">$hist</span>[<span class="i">$score</span>]++<span class="sc">;</span>
                <span class="i">$length</span>++<span class="sc">;</span>
            <span class="s">}</span>

            <span class="c"># Check for Repeating sequences</span>
            <span class="k">my</span> <span class="i">$insert</span> = <span class="k">substr</span><span class="s">(</span> <span class="i">$total_seq</span><span class="cm">,</span> <span class="i">$Ql</span><span class="cm">,</span> <span class="i">$quality_length</span> <span class="s">)</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$repeat</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$repeat_length</span> = <span class="n">2</span><span class="sc">;</span>
            <span class="k">while</span> <span class="s">(</span> !<span class="i">$repeat</span> &amp;&amp; <span class="i">$repeat_length</span> &lt; <span class="n">5</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$repeat</span> = <span class="i">$self</span><span class="i">-&gt;_check_for_repeating_sequence</span><span class="s">(</span> <span class="i">$insert</span><span class="cm">,</span> <span class="i">$repeat_length</span> <span class="s">)</span><span class="sc">;</span>
                <span class="i">$repeat_length</span>++<span class="sc">;</span>
            <span class="s">}</span>

            <span class="k">if</span> <span class="s">(</span> <span class="i">$repeat</span> &amp;&amp; <span class="i">$insert</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$note_id</span> = <span class="n">6</span><span class="sc">;</span>
                <span class="i">$p</span> .= <span class="q">&quot;** Add note: $repeat\n&quot;</span><span class="sc">;</span>
                <span class="k">push</span><span class="s">(</span> <span class="i">@warnings</span><span class="cm">,</span> <span class="q">'Recurring String $repeat'</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>

            <span class="i">$p</span> .= <span class="q">&quot;Tr=$trim_right($Qr), Tl=$trim_left($Ql), Qlength=$quality_length, (trimmed = $good_length), Vl=$Vl, Vr=$Vr, Vq=$Vq; Vt=$Vt\n&quot;</span><span class="sc">;</span>

            <span class="c">#my @values = ($total_seq, $length, $Ql, $quality_length, $Vl, $Vr, $Vq, $Vt);</span>

            <span class="k">my</span> <span class="i">$warnings</span> = <span class="k">join</span> <span class="q">&quot;,&quot;</span><span class="cm">,</span> <span class="i">@warnings</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$comments</span> = <span class="k">join</span> <span class="q">&quot;,&quot;</span><span class="cm">,</span> <span class="i">@comments</span><span class="sc">;</span>

            <span class="c">#Populate the Read object</span>
            <span class="k">my</span> <span class="i">$read</span> = <span class="w">Read</span><span class="w">-&gt;new</span><span class="s">(</span>
                <span class="w">trace_name</span>      <span class="cm">=&gt;</span> <span class="i">$clone</span><span class="cm">,</span>
                <span class="w">trace_file</span>      <span class="cm">=&gt;</span> <span class="q">&quot;$self-&gt;{chromat_dir}/$clone&quot;</span><span class="cm">,</span>
                <span class="w">sequence</span>        <span class="cm">=&gt;</span> <span class="i">$total_seq</span><span class="cm">,</span>
                <span class="w">quality_scores</span>  <span class="cm">=&gt;</span> \<span class="i">@all_scores</span><span class="cm">,</span>
                <span class="w">sequence_length</span> <span class="cm">=&gt;</span> <span class="i">$length</span><span class="cm">,</span>
                <span class="w">quality_length</span>  <span class="cm">=&gt;</span> <span class="i">$quality_length</span><span class="cm">,</span>
                <span class="w">quality_left</span>    <span class="cm">=&gt;</span> <span class="i">$Ql</span><span class="cm">,</span>
                <span class="w">vector_left</span>     <span class="cm">=&gt;</span> <span class="i">$Vl</span><span class="cm">,</span>
                <span class="w">vector_right</span>    <span class="cm">=&gt;</span> <span class="i">$Vr</span><span class="cm">,</span>
                <span class="w">warnings</span>        <span class="cm">=&gt;</span> <span class="i">$warnings</span><span class="cm">,</span>
                <span class="w">errors</span>          <span class="cm">=&gt;</span> <span class="i">$error</span><span class="cm">,</span>
                <span class="w">comments</span>        <span class="cm">=&gt;</span> <span class="i">$comments</span>
            <span class="s">)</span><span class="sc">;</span>
            <span class="k">if</span> <span class="s">(</span><span class="i">$generate_trimmed_fasta</span><span class="s">)</span> <span class="s">{</span>
                <span class="k">my</span> <span class="i">$start</span>          = <span class="i">$Ql</span><span class="sc">;</span>
                <span class="k">my</span> <span class="i">$end</span>            = <span class="i">$Ql</span> + <span class="i">$quality_length</span> - <span class="n">1</span><span class="sc">;</span>
                <span class="k">my</span> <span class="i">$vector_quality</span> = <span class="n">0</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$Vl</span> &gt; <span class="i">$Ql</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$start</span> = <span class="i">$Vl</span> + <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$Vr</span> &gt; <span class="n">0</span> &amp;&amp; <span class="i">$Vr</span> &lt; <span class="i">$end</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$end</span> = <span class="i">$Vr</span> - <span class="n">1</span> <span class="s">}</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$start</span> &lt; <span class="i">$end</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="k">my</span> <span class="i">$t_length</span>         = <span class="i">$end</span> - <span class="i">$start</span> + <span class="n">1</span><span class="sc">;</span>
                    <span class="k">my</span> <span class="i">$poor_quality</span>     = <span class="i">$length</span> - <span class="i">$quality_length</span><span class="sc">;</span>
                    <span class="k">my</span> <span class="i">$trimmed_sequence</span> = <span class="k">substr</span><span class="s">(</span> <span class="i">$total_seq</span><span class="cm">,</span> <span class="i">$start</span><span class="cm">,</span> <span class="i">$t_length</span> <span class="s">)</span><span class="sc">;</span>
                    <span class="k">my</span> <span class="i">$version</span>          = <span class="i">$self</span>-&gt;{<span class="w">phred_version</span>}<span class="sc">;</span>
                    <span class="k">print</span> <span class="i">TRIMMED</span> <span class="q">&quot;&gt;$clone\t$t_length\t$start-$end / $total_length ($quality_length quality)\t(Trimmed: $poor_quality (poor) + $Vq (vector)) phred $version\n$trimmed_sequence\n&quot;</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">else</span> <span class="s">{</span> <span class="k">print</span> <span class="i">TRIMMED</span> <span class="q">&quot;$clone : (no trimmed sequence)\n&quot;</span><span class="sc">;</span> <span class="s">}</span>
            <span class="s">}</span>
            <span class="k">push</span><span class="s">(</span> <span class="i">@</span>{ <span class="i">$self</span>-&gt;{<span class="w">reads</span>} }<span class="cm">,</span> <span class="i">$read</span> <span class="s">)</span><span class="sc">;</span>
            <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}-&gt;{<span class="i">$clone</span>} = <span class="i">$self</span>-&gt;{<span class="w">reads_count</span>}<span class="sc">;</span>
            <span class="i">$self</span>-&gt;{<span class="w">reads_count</span>}++<span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">close</span><span class="s">(</span><span class="w">PFILE</span><span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">close</span><span class="s">(</span><span class="w">TRIMMED</span><span class="s">)</span> <span class="k">if</span> <span class="i">$generate_trimmed_fasta</span><span class="sc">;</span>
    <span class="k">close</span><span class="s">(</span><span class="w">SCREEN</span><span class="s">)</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">$p</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="get_Read-"></a><span class="k">sub </span><span class="m">get_Read</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="c">#</span>
    <span class="c">#Gets a particular read object</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$trace_name</span> = <span class="i">$args</span>{<span class="w">trace_name</span>} || <span class="k">shift</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="k">exists</span> <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}-&gt;{<span class="i">$trace_name</span>} <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">$self</span>-&gt;{<span class="w">reads</span>}[ <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}-&gt;{<span class="i">$trace_name</span>} ]<span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="print-"></a><span class="k">sub </span><span class="m">print</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="c">#</span>
    <span class="c">#Prints the content of the Reads object</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$clone</span> <span class="s">(</span> <span class="k">sort</span> <span class="k">keys</span> <span class="i">%</span>{ <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>} } <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$index</span> = <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}-&gt;{<span class="i">$clone</span>}<span class="sc">;</span>
        <span class="i">$self</span>-&gt;{<span class="w">reads</span>}[<span class="i">$index</span>]<span class="i">-&gt;print</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
        <span class="k">print</span> <span class="q">&quot;\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">print</span> <span class="q">&quot;Total Number of Reads: $self-&gt;{reads_count}\n&quot;</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="dump-"></a><span class="k">sub </span><span class="m">dump</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="c">#</span>
    <span class="c">#Dumps the content of the Reads into a hash</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">%reads</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$clone</span> <span class="s">(</span> <span class="k">sort</span> <span class="k">keys</span> <span class="i">%</span>{ <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>} } <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$index</span> = <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}-&gt;{<span class="i">$clone</span>}<span class="sc">;</span>
        <span class="i">%</span>{ <span class="i">$reads</span>{<span class="i">$clone</span>} } = <span class="i">%</span>{ <span class="i">$self</span>-&gt;{<span class="w">reads</span>}[<span class="i">$index</span>] }<span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="i">%reads</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#####################</span>
<a name="create_CSV_file-"></a><span class="k">sub </span><span class="m">create_CSV_file</span> <span class="s">{</span>
<span class="c">#####################</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$dir</span> = <span class="k">shift</span> || <span class="i">$self</span>-&gt;{<span class="w">phd_dir</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">$output</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$clone</span> <span class="s">(</span> <span class="k">sort</span> <span class="k">keys</span> <span class="i">%</span>{ <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>} } <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$index</span> = <span class="i">$self</span>-&gt;{<span class="w">reads_index</span>}-&gt;{<span class="i">$clone</span>}<span class="sc">;</span>
        <span class="i">$output</span> .= <span class="i">$self</span>-&gt;{<span class="w">reads</span>}[<span class="i">$index</span>]-&gt;{<span class="w">trace_name</span>} . <span class="q">&quot;\t&quot;</span> . <span class="i">$self</span>-&gt;{<span class="w">reads</span>}[<span class="i">$index</span>]-&gt;{<span class="w">Q20</span>} . <span class="q">&quot;\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">open</span><span class="s">(</span> <span class="w">FILE</span><span class="cm">,</span> <span class="q">&quot;&gt;$dir/Q20.csv&quot;</span> <span class="s">)</span> <span class="k">or</span> <span class="k">die</span><span class="s">(</span><span class="q">&quot;Cannot open $dir/Q20.csv&quot;</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">print</span> <span class="i">FILE</span> <span class="i">$output</span><span class="sc">;</span>
    <span class="k">close</span><span class="s">(</span><span class="w">FILE</span><span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">##############################</span>
<span class="c"># public_functions           #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># private_methods            #</span>
<span class="c">##############################</span>

<span class="c">#########################################</span>
<a name="_check_for_repeating_sequence-"></a><span class="k">sub </span><span class="m">_check_for_repeating_sequence</span> <span class="s">{</span>
<span class="c">#########################################</span>
    <span class="c">#</span>
    <span class="c">#  Check for repeating string given repetition length.</span>
    <span class="c">#</span>
    <span class="c">#  (ie 'atatatatat' has a repetition length of 2.</span>
    <span class="c">#</span>
    <span class="c">#  To qualify:</span>
    <span class="c">#</span>
    <span class="c">#   Total string length should be at least 5 x the repetition length</span>
    <span class="c">#</span>
    <span class="c">#   The non-repeating portion of the string reduces to less than twice the repetition length</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$sequence</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">### input sequence string</span>
    <span class="k">my</span> <span class="i">$length</span>   = <span class="k">shift</span><span class="sc">;</span>    <span class="c">### specify length of repeating sequence to check for</span>

    <span class="k">my</span> <span class="i">$Slength</span> = <span class="k">length</span><span class="s">(</span><span class="i">$sequence</span><span class="s">)</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$Slength</span> &lt; <span class="i">$length</span> * <span class="n">2</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;Very short sequence&quot;</span> <span class="s">}</span>

    <span class="k">my</span> <span class="i">$seq</span> = <span class="k">substr</span><span class="s">(</span> <span class="i">$sequence</span><span class="cm">,</span> <span class="i">$length</span><span class="cm">,</span> <span class="i">$length</span> <span class="s">)</span><span class="sc">;</span>    <span class="c">### pull out N chars (offset by N)</span>
    <span class="i">$sequence</span> =~ <span class="q">s/$seq//g</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$Slength</span> &gt; <span class="n">5</span> * <span class="i">$length</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="k">length</span><span class="s">(</span><span class="i">$sequence</span><span class="s">)</span> &lt; <span class="s">(</span> <span class="i">$length</span> * <span class="n">2</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$times</span> = <span class="s">(</span> <span class="i">$Slength</span> - <span class="k">length</span><span class="s">(</span><span class="i">$sequence</span><span class="s">)</span> <span class="s">)</span> / <span class="i">$length</span><span class="sc">;</span>
            <span class="k">return</span> <span class="q">&quot;$seq($times)&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span> <span class="k">return</span> <span class="n">0</span><span class="sc">;</span> <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;Too short to check for repeats&quot;</span><span class="sc">;</span> <span class="s">}</span>
<span class="s">}</span>

<span class="c">##############################</span>
<span class="c"># private_functions          #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># main_footer                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># perldoc_footer             #</span>
<span class="c">##############################</span>

</pre><p></p>
<hr />
<h1><a name="known_issues__uplink_">KNOWN ISSUES &lt;UPLINK&gt;</a></h1>
<p>None.</p>
<p>
</p>
<hr />
<h1><a name="future_improvements__uplink_">FUTURE IMPROVEMENTS &lt;UPLINK&gt;</a></h1>
<p>Add more attributes to the object.</p>
<p>
</p>
<hr />
<h1><a name="authors__uplink_">AUTHORS &lt;UPLINK&gt;</a></h1>
<p>Ran Guin and Andy Chan at the Canada's Michael Smith Genome Sciences Centre.</p>
<p>
</p>
<hr />
<h1><a name="created__uplink_">CREATED &lt;UPLINK&gt;</a></h1>
<p>2003-07-14</p>
<p>
</p>
<hr />
<h1><a name="revision__uplink_">REVISION &lt;UPLINK&gt;</a></h1>
<p>$Id: Reads.pm,v 1.13 2004/02/27 17:50:35 achan Exp $ (Release: $Name:  $)</p>

<pre>
<span class="k">return</span> <span class="n">1</span><span class="sc">;</span>
<a name="EOF-"></a></pre></body>

</html>
