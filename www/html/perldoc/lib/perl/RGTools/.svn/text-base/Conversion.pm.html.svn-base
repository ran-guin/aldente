<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Conversion.pm</title>
<link rev="made" href="mailto:root@localhost" />
</head>

<style type="text/css">
<!--
/* default style sheet generated by perltidy */
body {background: #FFFFFF; color: #000000}
pre { color: #000000; 
      background: #F0F0F0;
      font-family: courier;
    } 

.c  { color: #228B22;} /* comment */
.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.h  { color: #CD5555; font-weight:bold;} /* here-doc-target */
.hh { color: #CD5555; font-style:italic;} /* here-doc-text */
.i  { color: #00688B;} /* identifier */
.j  { color: #CD5555; font-weight:bold;} /* label */
.k  { color: #8B008B; font-weight:bold;} /* keyword */
.m  { color: #FF0000; font-weight:bold;} /* subroutine */
.n  { color: #B452CD;} /* numeric */
.p  { color: #000000;} /* paren */
.pd { color: #228B22; font-style:italic;} /* pod-text */
.pu { color: #000000;} /* punctuation */
.q  { color: #CD5555;} /* quote */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.v  { color: #B452CD;} /* v-string */
.w  { color: #000000;} /* bareword */
-->
</style>
<body style="background-color: white">
<a name="-top-"></a>
<h1>Conversion.pm</h1>

<p><a name="__index__"></a></p>
<!-- INDEX BEGIN -->

<ul>

	<li><a href="#name__uplink_">NAME &lt;UPLINK&gt;</a></li>
	<li><a href="#synopsis__uplink_">SYNOPSIS &lt;UPLINK&gt;</a></li>
	<li><a href="#description__uplink_">DESCRIPTION &lt;UPLINK&gt;</a></li>
	<li><a href="#known_issues__uplink_">KNOWN ISSUES &lt;UPLINK&gt;</a></li>
	<li><a href="#future_improvements__uplink_">FUTURE IMPROVEMENTS &lt;UPLINK&gt;</a></li>
	<li><a href="#authors__uplink_">AUTHORS &lt;UPLINK&gt;</a></li>
	<li><a href="#created__uplink_">CREATED &lt;UPLINK&gt;</a></li>
	<li><a href="#revision__uplink_">REVISION &lt;UPLINK&gt;</a></li>
</ul>
<!-- INDEX END -->
<h2>Code Index:</h2>
<!-- BEGIN CODE INDEX --><a name="code-index"></a>
<ul>
<li><a href="#package-RGTools::Conversion-">package RGTools::Conversion</a>
<ul>
<li><a href="#subtract_amounts-">subtract_amounts</a></li>
<li><a href="#add_amounts-">add_amounts</a></li>
<li><a href="#get_amount_units-">get_amount_units</a></li>
<li><a href="#get_base_units-">get_base_units</a></li>
<li><a href="#unpack_to_array-">unpack_to_array</a></li>
<li><a href="#extract_range-">extract_range</a></li>
<li><a href="#pad_Distribution-">pad_Distribution</a></li>
<li><a href="#convert_to_regexp-">convert_to_regexp</a></li>
<li><a href="#convert_to_condition-">convert_to_condition</a></li>
<li><a href="#convert_units-">convert_units</a></li>
<li><a href="#normalize_time-">normalize_time</a></li>
<li><a href="#end_of_day-">end_of_day</a></li>
<li><a href="#convert_to_hours-">convert_to_hours</a></li>
<li><a href="#week_days-">week_days</a></li>
<li><a href="#convert_to_mils-">convert_to_mils</a></li>
<li><a href="#format_well-">format_well</a></li>
<li><a href="#SQL_well-">SQL_well</a></li>
<li><a href="#wildcard_to_SQL-">wildcard_to_SQL</a></li>
<li><a href="#SQL_hours-">SQL_hours</a></li>
<li><a href="#text_SQL_date-">text_SQL_date</a></li>
<li><a href="#convert_date-">convert_date</a></li>
<li><a href="#convert_time-">convert_time</a></li>
<li><a href="#SQL_day-">SQL_day</a></li>
<li><a href="#SQL_weekdays-">SQL_weekdays</a></li>
<li><a href="#translate_date-">translate_date</a></li>
<li><a href="#convert_HofA_to_AofH-">convert_HofA_to_AofH</a></li>
<li><a href="#get_units-">get_units</a></li>
<li><a href="#normalize_units-">normalize_units</a></li>
<li><a href="#simplify_units-">simplify_units</a></li>
<li><a href="#Get_Best_Units-">Get_Best_Units</a></li>
<li><a href="#get_number-">get_number</a></li>
<li><a href="#number-">number</a></li>
<li><a href="#Convert_Case-">Convert_Case</a></li>
<li><a href="#Custom_Convert_Units-">Custom_Convert_Units</a></li>
<li><a href="#convert_volume-">convert_volume</a></li>
<li><a href="#wiki_to_HTML-">wiki_to_HTML</a></li>
<li><a href="#convert_tags-">convert_tags</a></li>
<li><a href="#escape_regex_special_chars-">escape_regex_special_chars</a></li>
<li><a href="#HTML_to_xml-">HTML_to_xml</a></li>
<li><a href="#wiki_to_xml_old-">wiki_to_xml_old</a></li>
<li><a href="#wiki_to_xml-">wiki_to_xml</a></li>
</ul>
</li>
<li><a href="#EOF-">EOF</a></li>
</ul>
<!-- END CODE INDEX -->

<hr />
<pre><span class="c">################################################################################</span>
<span class="c">#</span>
<span class="c"># Conversion.pm</span>
<span class="c">#</span>
<span class="c"># Conversion : This provides a variety of tools to convert information between formats</span>
<span class="c">#</span>
<span class="c">################################################################################</span>
<span class="c">################################################################################</span>
<span class="c"># $Id: Conversion.pm,v 1.20 2004/12/09 17:42:07 rguin Exp $</span>
<span class="c">################################################################################</span>
<span class="c"># CVS Revision: $Revision: 1.20 $</span>
<span class="c">################################################################################</span>
<a name="package-RGTools::Conversion-"></a><span class="k">package </span><span class="i">RGTools::Conversion</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># perldoc_header             #</span>
<span class="c">##############################</span>

</pre><p></p>
<hr />
<h1><a name="name__uplink_">NAME &lt;UPLINK&gt;</a></h1>
<p>Conversion.pm - Conversion : This provides a variety of tools to convert information between formats</p>
<p>
</p>
<hr />
<h1><a name="synopsis__uplink_">SYNOPSIS &lt;UPLINK&gt;</a></h1>
<pre>
        &lt;&lt;SYNOPSIS&gt;&gt;</pre>
<p>
</p>
<hr />
<h1><a name="description__uplink_">DESCRIPTION &lt;UPLINK&gt;</a></h1>
Conversion : This provides a variety of tools to convert information between formats<BR><pre>
<span class="c">##############################</span>
<span class="c"># superclasses               #</span>
<span class="c">##############################</span>

<span class="i">@ISA</span> = <span class="q">qw(Exporter)</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># system_variables           #</span>
<span class="c">##############################</span>
<span class="k">require</span> <span class="w">Exporter</span><span class="sc">;</span>
<span class="i">@EXPORT</span> = <span class="q">qw(</span>
    <span class="q">week_days</span>
    <span class="q">convert_to_regexp</span>
    <span class="q">convert_to_condition</span>
    <span class="q">convert_to_hours</span>
    <span class="q">normalize_time</span>
    <span class="q">unpack_to_array</span>
    <span class="q">extract_range</span>
    <span class="q">pad_Distribution</span>
    <span class="q">get_units</span>
    <span class="q">normalize_units</span>
    <span class="q">simplify_units</span>
    <span class="q">Get_Best_Units</span>
    <span class="q">get_number</span>
    <span class="q">number</span>
    <span class="q">format_well</span>
    <span class="q">SQL_hours</span>
    <span class="q">SQL_well</span>
    <span class="q">SQL_day</span>
    <span class="q">text_SQL_date</span>
    <span class="q">convert_date</span>
    <span class="q">convert_time</span>
    <span class="q">SQL_weekdays</span>
    <span class="q">convert_HofA_to_AofH</span>
    <span class="q">Convert_Case</span>
    <span class="q">convert_to_mils</span>
    <span class="q">convert_units</span>
    <span class="q">subtract_amounts</span>
    <span class="q">add_amounts</span>
    <span class="q">get_base_units</span>
    <span class="q">Custom_Convert_Units</span>
    <span class="q">pad_Distribution</span>
    <span class="q">end_of_day</span>
<span class="q">)</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># standard_modules_ref       #</span>
<span class="c">##############################</span>

<span class="k">use</span> <span class="w">POSIX</span> <span class="q">qw(strftime)</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>

<span class="c">##############################</span>
<span class="c"># custom_modules_ref         #</span>
<span class="c">##############################</span>
<span class="k">use</span> <span class="w">RGTools::RGIO</span><span class="sc">;</span>

<span class="c">#use Date::Calc qw(Day_of_Week Delta_Days Add_Delta_Days Parse_Date);</span>
<span class="k">use</span> <span class="w">Data::Dumper</span><span class="sc">;</span>
<span class="c">##############################</span>
<span class="c"># global_vars                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># modular_vars               #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># constants                  #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># main_header                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># constructor                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># public_methods             #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># public_functions           #</span>
<span class="c">##############################</span>

<span class="c">################################</span>
<span class="c">#</span>
<span class="c"># subtract amounts of possibly different units and converts them to desired unitd</span>
<span class="c">#################</span>
<a name="subtract_amounts-"></a><span class="k">sub </span><span class="m">subtract_amounts</span> <span class="s">{</span>
<span class="c">#################</span>
    <span class="k">my</span> <span class="i">$qty1</span>         = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$units1</span>       = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units originally quoted</span>
    <span class="k">my</span> <span class="i">$qty2</span>         = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$units2</span>       = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units originally quoted</span>
    <span class="k">my</span> <span class="i">$target_units</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units to convert to</span>

    <span class="k">my</span> <span class="i">$amount</span> = <span class="n">0</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$base1</span>       = <span class="i">get_base_units</span><span class="s">(</span><span class="i">$units1</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$base2</span>       = <span class="i">get_base_units</span><span class="s">(</span><span class="i">$units2</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$target_base</span> = <span class="i">$base1</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$target_units</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$target_base</span> = <span class="i">get_base_units</span><span class="s">(</span><span class="i">$target_units</span><span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="k">uc</span><span class="s">(</span><span class="i">$base1</span><span class="s">)</span> <span class="k">eq</span> <span class="k">uc</span><span class="s">(</span><span class="i">$base2</span><span class="s">)</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="k">uc</span><span class="s">(</span><span class="i">$base1</span><span class="s">)</span> <span class="k">eq</span> <span class="k">uc</span><span class="s">(</span><span class="i">$target_base</span><span class="s">)</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>

        <span class="k">if</span> <span class="s">(</span> <span class="i">$units1</span> =~ <span class="q">/^$units2$/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$amount</span> = <span class="i">$qty1</span> - <span class="i">$qty2</span><span class="sc">;</span>

            <span class="c">#if($amount &lt; 0){</span>
            <span class="c">#    $amount = 0;</span>
            <span class="c">#}</span>

            <span class="c"># if not target units secified</span>
            <span class="k">if</span> <span class="s">(</span> !<span class="i">$target_units</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">Get_Best_Units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">convert_units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span><span class="cm">,</span> <span class="i">$target_units</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>

        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>

            <span class="s">(</span> <span class="i">$qty1</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span> = <span class="i">convert_to_mils</span><span class="s">(</span> <span class="i">$qty1</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">(</span> <span class="i">$qty2</span><span class="cm">,</span> <span class="i">$units2</span> <span class="s">)</span> = <span class="i">convert_to_mils</span><span class="s">(</span> <span class="i">$qty2</span><span class="cm">,</span> <span class="i">$units2</span> <span class="s">)</span><span class="sc">;</span>

            <span class="i">$amount</span> = <span class="i">$qty1</span> - <span class="i">$qty2</span><span class="sc">;</span>

            <span class="c">#if ($amount &lt; 0){</span>
            <span class="c">#    $amount = 0;</span>
            <span class="c">#}</span>

            <span class="c"># if not target units secified</span>
            <span class="k">if</span> <span class="s">(</span> !<span class="i">$target_units</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">Get_Best_Units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">convert_units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span><span class="cm">,</span> <span class="i">$target_units</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="i">Call_Stack</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
        <span class="k">print</span> <span class="q">&quot;Warning: Incompatible units ($units1 &lt;-&gt; $units2 &lt;-&gt; $target_units)&lt;BR&gt;&quot;</span><span class="sc">;</span>
        <span class="k">return</span> <span class="s">(</span> <span class="k">undef</span><span class="cm">,</span> <span class="k">undef</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

<span class="s">}</span>

<span class="c">################################</span>
<span class="c">#</span>
<span class="c"># adds amounts of possibly different units and converts them to desired unitd</span>
<span class="c">####################</span>
<a name="add_amounts-"></a><span class="k">sub </span><span class="m">add_amounts</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="k">my</span> <span class="i">$qty1</span>         = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$units1</span>       = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units originally quoted</span>
    <span class="k">my</span> <span class="i">$qty2</span>         = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$units2</span>       = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units originally quoted</span>
    <span class="k">my</span> <span class="i">$target_units</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units to convert to</span>

    <span class="k">my</span> <span class="i">$amount</span> = <span class="n">0</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$base1</span>       = <span class="i">get_base_units</span><span class="s">(</span><span class="i">$units1</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$base2</span>       = <span class="i">get_base_units</span><span class="s">(</span><span class="i">$units2</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$target_base</span> = <span class="i">$base1</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$target_units</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$target_base</span> = <span class="i">get_base_units</span><span class="s">(</span><span class="i">$target_units</span><span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="k">uc</span><span class="s">(</span><span class="i">$base1</span><span class="s">)</span> <span class="k">eq</span> <span class="k">uc</span><span class="s">(</span><span class="i">$base2</span><span class="s">)</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="k">uc</span><span class="s">(</span><span class="i">$base1</span><span class="s">)</span> <span class="k">eq</span> <span class="k">uc</span><span class="s">(</span><span class="i">$target_base</span><span class="s">)</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>

        <span class="k">if</span> <span class="s">(</span> <span class="i">$units1</span> =~ <span class="q">/^$units2$/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$amount</span> = <span class="i">$qty1</span> + <span class="i">$qty2</span><span class="sc">;</span>

            <span class="c"># if not target units secified</span>
            <span class="k">if</span> <span class="s">(</span> !<span class="i">$target_units</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">Get_Best_Units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">convert_units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span><span class="cm">,</span> <span class="i">$target_units</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>

        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>

            <span class="s">(</span> <span class="i">$qty1</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span> = <span class="i">convert_to_mils</span><span class="s">(</span> <span class="i">$qty1</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">(</span> <span class="i">$qty2</span><span class="cm">,</span> <span class="i">$units2</span> <span class="s">)</span> = <span class="i">convert_to_mils</span><span class="s">(</span> <span class="i">$qty2</span><span class="cm">,</span> <span class="i">$units2</span> <span class="s">)</span><span class="sc">;</span>

            <span class="i">$amount</span> = <span class="i">$qty1</span> + <span class="i">$qty2</span><span class="sc">;</span>

            <span class="c"># if not target units secified</span>
            <span class="k">if</span> <span class="s">(</span> !<span class="i">$target_units</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">Get_Best_Units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="k">return</span> <span class="i">convert_units</span><span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units1</span><span class="cm">,</span> <span class="i">$target_units</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Warning: Incompatible units ($units1 &lt;-&gt; $units2 &lt;-&gt; $target_units)&quot;</span><span class="sc">;</span>
        <span class="k">return</span> <span class="s">(</span> <span class="k">undef</span><span class="cm">,</span> <span class="k">undef</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

<span class="s">}</span>

<span class="c">################################</span>
<span class="c"># parses amount and units out of a string</span>
<span class="c">#</span>
<span class="c"># ex: my ($amount,$units) = get_amount_units('2.3ng');</span>
<span class="c">#     $amount -&gt; '2.3'</span>
<span class="c">#     $units -&gt; 'ng'</span>
<span class="c"># Note: entering 32.g is invalid, but just 'mg' is valid</span>
<span class="c">######################</span>
<a name="get_amount_units-"></a><span class="k">sub </span><span class="m">get_amount_units</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">$input</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$input</span> =~ <span class="q">/^(\d*\.?\d+)(\w+)$/</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## Split the quantity into amount and units.</span>
        <span class="i">$amount</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$units</span>  = <span class="i">$2</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$input</span> =~ <span class="q">/(\w+)$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$units</span> = <span class="i">$1</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">return</span> <span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">################################</span>
<span class="c">#</span>
<span class="c"># returns base units</span>
<span class="c">######################</span>
<a name="get_base_units-"></a><span class="k">sub </span><span class="m">get_base_units</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">$units</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$base_unit</span><span class="sc">;</span>

    <span class="c"># for non-standard units eg. organs</span>
    <span class="k">if</span> <span class="s">(</span> <span class="k">length</span><span class="s">(</span><span class="i">$units</span><span class="s">)</span> &gt; <span class="n">2</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">$units</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/(g|l)$/i</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## kilograms or litres ##</span>
        <span class="k">return</span> <span class="k">lc</span><span class="s">(</span><span class="i">$1</span><span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">$units</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">##################</span>
<a name="unpack_to_array-"></a><span class="k">sub </span><span class="m">unpack_to_array</span> <span class="s">{</span>
<span class="c">##################</span>
    <span class="c">#</span>
    <span class="c"># grab statistics from an array...</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$array</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$bytes</span> = <span class="k">shift</span> || <span class="n">2</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@array</span> = <span class="k">unpack</span> <span class="q">&quot;S*&quot;</span><span class="cm">,</span> <span class="i">$array</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">@array</span><span class="sc">;</span>

<span class="s">}</span>

<span class="c">#######################</span>
<a name="extract_range-"></a><span class="k">sub </span><span class="m">extract_range</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="c">#</span>
    <span class="c"># converts range specs to list...</span>
    <span class="c">#  (eg. 1-4,5,7-9 becomes 1,2,3,4,5,7,9) or A-C to A,B,C)</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">&amp;filter_input</span><span class="s">(</span>
         \<span class="i">@_</span><span class="cm">,</span>
        -<span class="w">args</span>      <span class="cm">=&gt;</span> <span class="q">'list,delimiter,max_letter,max_number,format384'</span><span class="cm">,</span>
        -<span class="w">mandatory</span> <span class="cm">=&gt;</span> <span class="q">'list'</span>
    <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$list</span>         = <span class="i">$args</span>{-<span class="w">list</span>}<span class="sc">;</span>                                               <span class="c"># list (string such as &quot;1,2,4-7&quot; or &quot;A-D,G&quot;</span>
    <span class="k">my</span> <span class="i">$delimiter</span>    = <span class="i">$args</span>{-<span class="w">delimiter</span>} || <span class="q">&quot;,&quot;</span><span class="sc">;</span>                                   <span class="c"># optional delimiter (comma used as default);</span>
    <span class="k">my</span> <span class="i">$max_letter</span>   = <span class="i">$args</span>{-<span class="w">max_letter</span>} || <span class="q">'H'</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$max_number</span>   = <span class="s">(</span> <span class="k">defined</span> <span class="i">$args</span>{-<span class="w">max_number</span>} <span class="s">)</span> ? <span class="i">$args</span>{-<span class="w">max_number</span>} <span class="co">:</span> <span class="n">12</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$min_number</span>   = <span class="n">1</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$format384</span>    = <span class="i">$args</span>{-<span class="w">format384</span>} || <span class="q">''</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$strip_quotes</span> = <span class="n">1</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$strip_quotes</span><span class="s">)</span> <span class="s">{</span> <span class="i">$list</span> =~ <span class="q">s /(\'|\&quot;)//g</span><span class="sc">;</span> <span class="s">}</span>                                 <span class="c">## strip quotes</span>

    <span class="i">$list</span> =~ <span class="q">s/ //g</span><span class="sc">;</span>                                                               <span class="c"># remove spaces;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$list</span> =~ <span class="q">/[I-Zi-z]/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$max_letter</span> = <span class="q">'P'</span><span class="sc">;</span> <span class="i">$max_number</span> = <span class="n">24</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span><span class="i">$format384</span><span class="s">)</span> <span class="s">{</span> <span class="i">$max_letter</span> = <span class="q">'P'</span><span class="sc">;</span> <span class="i">$max_number</span> = <span class="n">24</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">my</span> <span class="i">@formatted_list</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$list_element</span> <span class="s">(</span> <span class="k">split</span> <span class="q">','</span><span class="cm">,</span> <span class="i">$list</span> <span class="s">)</span> <span class="s">{</span>

        <span class="k">while</span> <span class="s">(</span> <span class="i">$list_element</span> =~ <span class="q">/(\d+)\s?-\s?(\d+)/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$range</span> = <span class="k">join</span> <span class="q">&quot;$delimiter&quot;</span><span class="cm">,</span> <span class="s">(</span> <span class="i">$1</span> .. <span class="i">$2</span> <span class="s">)</span><span class="sc">;</span>
            <span class="i">$list_element</span> =~ <span class="q">s/$1\s?-\s?$2/$range/</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">while</span> <span class="s">(</span> <span class="i">$list_element</span> =~ <span class="q">/([A-Za-z])\s?-\s?([A-Za-z])/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$range</span> = <span class="k">join</span> <span class="q">&quot;$delimiter&quot;</span><span class="cm">,</span> <span class="s">(</span> <span class="i">$1</span> .. <span class="i">$2</span> <span class="s">)</span><span class="sc">;</span>
            <span class="i">$list_element</span> =~ <span class="q">s/$1\s?-\s?$2/$range/</span><span class="sc">;</span>
        <span class="s">}</span>

        <span class="c">##### the following assumes wells A..H 1..12 ############</span>

        <span class="k">my</span> <span class="i">$range</span><span class="sc">;</span>
        <span class="k">while</span> <span class="s">(</span> <span class="i">$list_element</span> =~ <span class="q">/([A-Za-z])(\d+)\s?-\s?([A-Za-z])(\d+)/</span> <span class="s">)</span> <span class="s">{</span>

            <span class="k">foreach</span> <span class="k">my</span> <span class="i">$letter</span> <span class="s">(</span> <span class="q">&quot;$1&quot;</span> .. <span class="q">&quot;$3&quot;</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">my</span> <span class="i">$min</span> = <span class="i">$min_number</span><span class="sc">;</span>
                <span class="k">my</span> <span class="i">$max</span> = <span class="i">$max_number</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$1</span> <span class="k">eq</span> <span class="i">$3</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$min</span> = <span class="i">$2</span><span class="sc">;</span> <span class="i">$max</span> = <span class="i">$4</span><span class="sc">;</span> <span class="s">}</span>
                <span class="k">elsif</span> <span class="s">(</span> <span class="i">$letter</span> <span class="k">eq</span> <span class="i">$1</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$min</span> = <span class="i">$2</span><span class="sc">;</span> <span class="s">}</span>
                <span class="k">elsif</span> <span class="s">(</span> <span class="i">$letter</span> <span class="k">eq</span> <span class="i">$3</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$max</span> = <span class="i">$4</span><span class="sc">;</span> <span class="s">}</span>

                <span class="k">foreach</span> <span class="k">my</span> <span class="i">$number</span> <span class="s">(</span> <span class="i">$min</span> .. <span class="i">$max</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$range</span> .= <span class="q">&quot;$letter$number,&quot;</span><span class="sc">;</span>
                <span class="s">}</span>
            <span class="s">}</span>
            <span class="k">chop</span> <span class="i">$range</span><span class="sc">;</span>
            <span class="i">$list_element</span> =~ <span class="q">s/$1$2\s?-\s?$3$4/$range/</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">push</span><span class="s">(</span> <span class="i">@formatted_list</span><span class="cm">,</span> <span class="i">$list_element</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="i">$list</span> = <span class="k">join</span> <span class="q">&quot;$delimiter&quot;</span><span class="cm">,</span> <span class="i">@formatted_list</span><span class="sc">;</span>
    <span class="k">return</span> <span class="i">$list</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">##########################################################</span>
<span class="c"># Pad Distribution as supplied by frequency_distribution</span>
<span class="c"># (it generates distribution from min -&gt; max)</span>
<span class="c">#</span>
<span class="c"># The binsize specified groups N keys in the Distribution hash together</span>
<span class="c"># Note: The frequency_distribution should have been run with a bin size of 1</span>
<span class="c">#</span>
<span class="c"># Return: array of bins from 0 -&gt; max+</span>
<span class="c">####################</span>
<a name="pad_Distribution-"></a><span class="k">sub </span><span class="m">pad_Distribution</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="k">my</span> <span class="i">$dist</span>       = <span class="k">shift</span><span class="sc">;</span>                   <span class="c">## hash reference (to output of frequency_distribution ##</span>
    <span class="k">my</span> <span class="i">%args</span>       = <span class="i">@_</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$min</span>        = <span class="i">$args</span>{-<span class="w">min</span>} || <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$max</span>        = <span class="i">$args</span>{-<span class="w">max</span>} || <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$binsize</span>    = <span class="i">$args</span>{-<span class="w">binsize</span>} || <span class="n">10</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$accumulate</span> = <span class="i">$args</span>{-<span class="w">accumulate</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">@padded_Distribution</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$accumulate</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">@padded_Distribution</span> = <span class="i">@$accumulate</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="i">%Distribution</span> = <span class="i">%</span>{<span class="i">$dist</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">$bin</span> = <span class="i">$min</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="k">sort</span> <span class="s">{</span> <span class="i">$a</span> &lt;=&gt; <span class="i">$b</span> <span class="s">}</span> <span class="k">keys</span> <span class="i">%Distribution</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">#### fill distribution graph with values from 0 -&gt; min first time through if necessary ###</span>
        <span class="k">unless</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$bin</span> &gt; <span class="i">$min</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$key</span> &lt;= <span class="i">$min</span> + <span class="n">1</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">while</span> <span class="s">(</span> <span class="i">$bin</span> &lt; <span class="i">$key</span> / <span class="i">$binsize</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$padded_Distribution</span>[<span class="i">$bin</span>] = <span class="n">0</span> <span class="k">unless</span> <span class="i">$padded_Distribution</span>[<span class="i">$bin</span>]<span class="sc">;</span>
                <span class="i">$bin</span>++<span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
        <span class="k">unless</span> <span class="s">(</span> <span class="i">$Distribution</span>{<span class="i">$key</span>} <span class="s">)</span> <span class="s">{</span><span class="k">next</span><span class="s">}</span>
        <span class="i">$bin</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$key</span> / <span class="i">$binsize</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$padded_Distribution</span>[<span class="i">$bin</span>] += <span class="i">$Distribution</span>{<span class="i">$key</span>}<span class="sc">;</span>
    <span class="s">}</span>

    <span class="c">## add right padding if desired ##</span>
    <span class="i">$max</span> = <span class="k">int</span><span class="s">(</span><span class="i">$max</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$max</span> &amp;&amp; <span class="s">(</span> <span class="i">$max</span> &gt; <span class="i">$bin</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">foreach</span> <span class="k">my</span> <span class="i">$right_pad</span> <span class="s">(</span> <span class="i">$bin</span> .. <span class="i">$max</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$padded_Distribution</span>[<span class="i">$right_pad</span>] = <span class="n">0</span> <span class="k">unless</span> <span class="i">$padded_Distribution</span>[<span class="i">$right_pad</span>]<span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">return</span> \<span class="i">@padded_Distribution</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">################################################</span>
<span class="c">#</span>
<span class="c"># Convert input string to regexp search pattern</span>
<span class="c">#</span>
<span class="c"># Return : Regexp search pattern.</span>
<span class="c">###########################</span>
<a name="convert_to_regexp-"></a><span class="k">sub </span><span class="m">convert_to_regexp</span> <span class="s">{</span>
<span class="c">###########################</span>
    <span class="k">my</span> <span class="i">$string</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$regexp</span> = <span class="q">'%'</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/^\'(.*)\'$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$regexp</span> = <span class="i">$1</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/^\&quot;(.*)\&quot;$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$regexp</span> = <span class="i">$1</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/(\*|\?)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$regexp</span> = <span class="i">$string</span><span class="sc">;</span>
        <span class="i">$regexp</span> =~ <span class="q">s /\*/\%/g</span><span class="sc">;</span>
        <span class="i">$regexp</span> =~ <span class="q">s /\?/_/g</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/\?/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$regexp</span> = <span class="i">$string</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/^./</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$regexp</span> = <span class="q">&quot;$string&quot;</span><span class="sc">;</span>    <span class="c">## search for explicit string anywhere in target</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span> <span class="k">return</span> <span class="i">$string</span> <span class="s">}</span>     <span class="c">## empty string</span>
    <span class="k">return</span> <span class="i">$regexp</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">################################################</span>
<span class="c">#</span>
<span class="c"># Convert input string to search condition</span>
<span class="c">#</span>
<span class="c"># Return : search condition.</span>
<span class="c">###########################</span>
<a name="convert_to_condition-"></a><span class="k">sub </span><span class="m">convert_to_condition</span> <span class="s">{</span>
<span class="c">###########################</span>
    <span class="k">my</span> <span class="i">$string</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%args</span>   = <span class="i">&amp;filter_input</span><span class="s">(</span> \<span class="i">@_</span><span class="cm">,</span> -<span class="w">args</span> <span class="cm">=&gt;</span> <span class="q">'field,type'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$field</span>  = <span class="i">$args</span>{-<span class="w">field</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$type</span>   = <span class="i">$args</span>{-<span class="w">type</span>} || <span class="q">''</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$cond</span>   = <span class="n">1</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> &amp;&amp; <span class="i">$string</span> =~ <span class="q">/^([\&gt;\&lt;]\=?)([\d\s\:\-]+)$/</span> <span class="s">)</span> <span class="s">{</span>

        <span class="c">## convert date if reqd ##</span>
        <span class="k">my</span> <span class="s">(</span> <span class="i">$op</span><span class="cm">,</span> <span class="i">$num</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span> <span class="s">)</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$num</span> = <span class="i">convert_date</span><span class="s">(</span> <span class="i">$num</span><span class="cm">,</span> <span class="q">'SQL'</span><span class="cm">,</span> <span class="q">'quote'</span> <span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field $op $num&quot;</span><span class="sc">;</span>    <span class="c">## allows for Field &gt;= 25.6 or Field &lt; '2005-01-01'</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/int/i</span> &amp;&amp; <span class="i">$string</span> =~ <span class="q">/^(\-?\d*)\.?(\d*)?\s?\-\s?(\-?\d*)\.?(\d*)?/</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## numerical range</span>
        <span class="c">##</span>
        <span class="k">my</span> <span class="s">(</span> <span class="i">$d1</span><span class="cm">,</span> <span class="i">$d2</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$d1</span> = <span class="i">$1</span> ? <span class="i">$1</span> <span class="co">:</span> <span class="n">0</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span><span class="i">$2</span><span class="s">)</span> <span class="s">{</span> <span class="i">$d1</span> .= <span class="q">'.'</span> . <span class="i">$2</span> <span class="s">}</span>

        <span class="i">$d2</span> = <span class="i">$3</span> ? <span class="i">$3</span> <span class="co">:</span> <span class="n">0</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span><span class="i">$4</span><span class="s">)</span> <span class="s">{</span> <span class="i">$d2</span> .= <span class="q">'.'</span> . <span class="i">$4</span> <span class="s">}</span>

        <span class="i">$cond</span> = <span class="q">&quot;$field BETWEEN $d1 AND $d2&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> &amp;&amp; <span class="i">$string</span> =~ <span class="q">/^(\d\d\d\d)\s*\-\s*(\d\d\d\d)$/</span> <span class="s">)</span> <span class="s">{</span>                <span class="c">## date range</span>
        <span class="c">## convert date if reqd ##</span>
        <span class="k">my</span> <span class="s">(</span> <span class="i">$d1</span><span class="cm">,</span> <span class="i">$d2</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span> <span class="s">)</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$d1</span> = <span class="i">convert_date</span><span class="s">(</span> <span class="i">$d1</span><span class="cm">,</span> <span class="q">'SQL'</span><span class="cm">,</span> <span class="q">'quote'</span> <span class="s">)</span><span class="sc">;</span>
            <span class="i">$d2</span> = <span class="i">convert_date</span><span class="s">(</span> <span class="i">$d2</span><span class="cm">,</span> <span class="q">'SQL'</span><span class="cm">,</span> <span class="q">'quote'</span> <span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field BETWEEN $d1 AND $d2&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/int/i</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/^[\d\.\,\s]+$/</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>                          <span class="c">## list of integers</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field IN ($string)&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/\|/</span> <span class="s">)</span> <span class="s">{</span>                                                                <span class="c">## list of options</span>
        <span class="c">## convert date if reqd ##</span>
        <span class="k">my</span> <span class="i">@list</span> = <span class="k">split</span> <span class="q">'\|'</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span>
        <span class="k">my</span> <span class="i">@options</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">map</span> <span class="s">{</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> <span class="s">)</span>
                <span class="s">{</span>
                    <span class="i">$string</span> = <span class="i">convert_date</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="q">'SQL'</span><span class="cm">,</span> <span class="q">'quote'</span> <span class="s">)</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span> <span class="i">@options</span><span class="cm">,</span> <span class="i">$string</span><span class="sc">;</span>
            <span class="s">}</span> <span class="i">@list</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="i">@options</span> = <span class="i">Cast_List</span><span class="s">(</span> -<span class="w">list</span> <span class="cm">=&gt;</span> \<span class="i">@list</span><span class="cm">,</span> -<span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">'array'</span><span class="cm">,</span> -<span class="w">autoquote</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>

        <span class="k">if</span> <span class="s">(</span><span class="i">@options</span><span class="s">)</span> <span class="s">{</span>
            <span class="i">$cond</span> = <span class="q">&quot;$field IN (&quot;</span><span class="sc">;</span>
            <span class="i">$cond</span> .= <span class="k">join</span> <span class="q">&quot;,&quot;</span><span class="cm">,</span> <span class="i">@options</span><span class="sc">;</span>
            <span class="i">$cond</span> .= <span class="q">&quot;)&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/^(null|undef)$/</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## NULL or undef</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field IS NULL&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/^empty$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field = ''&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> <span class="k">eq</span> <span class="q">'0'</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$cond</span> = <span class="q">&quot;($field=0 OR $field='' OR $field IS NULL)&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/[\*\?]/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$pattern</span> = <span class="i">convert_to_regexp</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field LIKE '$pattern'&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$string</span> =~ <span class="q">/[\%]/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field LIKE '$string'&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="c">## convert date if reqd ##</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/date/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$string</span> = <span class="i">convert_date</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="q">'SQL'</span> <span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>

        <span class="c"># only add quotes if the string is already not quoted</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$string</span> !~ <span class="q">/^\'.*\'$/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$string</span> = <span class="q">&quot;'$string'&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="i">$cond</span> = <span class="q">&quot;$field = $string&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">return</span> <span class="i">$cond</span><span class="sc">;</span>
<span class="s">}</span>
<span class="c">##########################</span>
<span class="c">#</span>
<span class="c">#</span>
<span class="c"># Return value after conversion</span>
<span class="c">#################</span>
<a name="convert_units-"></a><span class="k">sub </span><span class="m">convert_units</span> <span class="s">{</span>
<span class="c">#################</span>
    <span class="k">my</span> <span class="i">$qty</span>         = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$start_units</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units originally quoted</span>
    <span class="k">my</span> <span class="i">$end_units</span>   = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## units to convert to</span>
    <span class="k">my</span> <span class="i">$quiet</span>       = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## Suppress error messages</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$start_units</span> =~ <span class="q">/^$end_units$/i</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$start_units</span> <span class="s">)</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> !<span class="i">$end_units</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$start_units</span> <span class="s">)</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">my</span> <span class="s">(</span> <span class="i">$start</span><span class="cm">,</span>  <span class="i">$units1</span> <span class="s">)</span> = <span class="i">convert_to_mils</span><span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$start_units</span><span class="cm">,</span> <span class="k">undef</span><span class="cm">,</span> <span class="i">$quiet</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="s">(</span> <span class="i">$invert</span><span class="cm">,</span> <span class="i">$units2</span> <span class="s">)</span> = <span class="i">convert_to_mils</span><span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$end_units</span><span class="cm">,</span>   <span class="k">undef</span><span class="cm">,</span> <span class="i">$quiet</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$end_qty</span> = <span class="i">$qty</span><span class="sc">;</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="i">$units1</span> =~ <span class="q">/^$units2$/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Warning: Cannot convert $units1 -&gt; $units2&quot;</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$start_units</span><span class="cm">,</span> <span class="q">'error'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$invert</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$end_qty</span> = <span class="i">$qty</span> * <span class="i">$start</span> / <span class="i">$invert</span><span class="sc">;</span>
        <span class="k">print</span> <span class="q">&quot;** Converted $qty $start_units -&gt; $end_qty $end_units.**&quot;</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$end_qty</span><span class="cm">,</span> <span class="i">$end_units</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Warning: problem converting to $end_units.&quot;</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$start_units</span><span class="cm">,</span> <span class="q">'error'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">#########################</span>
<span class="c">#  Convert time units to hours</span>
<span class="c">#</span>
<span class="c">#</span>
<span class="c">#########################</span>
<a name="normalize_time-"></a><span class="k">sub </span><span class="m">normalize_time</span> <span class="s">{</span>
<span class="c">#########################</span>

    <span class="k">my</span> <span class="i">%args</span>          = <span class="i">@_</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$time</span>          = <span class="i">$args</span>{ -<span class="k">time</span> }<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>         = <span class="i">$args</span>{-<span class="w">units</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$hours_in_day</span>  = <span class="i">$args</span>{-<span class="w">hours_in_day</span>} || <span class="n">8</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$days_in_month</span> = <span class="i">$args</span>{-<span class="w">days_in_month</span>} || <span class="n">22</span><span class="sc">;</span>    <span class="c">## average working days...</span>
    <span class="k">my</span> <span class="i">$days_in_week</span>  = <span class="i">$args</span>{-<span class="w">days_in_week</span>} || <span class="n">5</span><span class="sc">;</span>      <span class="c">## average working days...</span>
    <span class="k">my</span> <span class="i">$use</span>           = <span class="i">$args</span>{ -<span class="k">use</span> }<span class="sc">;</span>                  <span class="c">## array reference to units used...</span>
    <span class="k">my</span> <span class="i">$truncate</span>      = <span class="i">$args</span>{ -<span class="k">truncate</span> } || <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$set_units</span>     = <span class="i">$args</span>{-<span class="w">set_units</span>} || <span class="q">''</span><span class="sc">;</span>        <span class="c">## specify units to return .</span>

    <span class="k">unless</span> <span class="s">(</span><span class="i">$use</span><span class="s">)</span> <span class="s">{</span> <span class="i">$use</span> = <span class="s">[</span> <span class="q">'sec'</span><span class="cm">,</span> <span class="q">'min'</span><span class="cm">,</span> <span class="q">'hrs'</span><span class="cm">,</span> <span class="q">'days'</span><span class="cm">,</span> <span class="q">'wks'</span><span class="cm">,</span> <span class="q">'months'</span> <span class="s">]</span> <span class="s">}</span>

    <span class="k">my</span> <span class="i">$multiplier</span> = <span class="n">1</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> !<span class="s">(</span> <span class="k">defined</span> <span class="i">$time</span> <span class="s">)</span> <span class="s">)</span> || <span class="s">(</span> !<span class="s">(</span> <span class="k">defined</span> <span class="i">$units</span> <span class="s">)</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Units or time undefined ? ($time $units)\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$time</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="s">(</span><span class="i">$hours</span><span class="s">)</span> = <span class="i">convert_to_hours</span><span class="s">(</span>
        -<span class="w">time</span>         <span class="cm">=&gt;</span> <span class="i">$time</span><span class="cm">,</span>
        -<span class="w">units</span>        <span class="cm">=&gt;</span> <span class="i">$units</span><span class="cm">,</span>
        -<span class="w">hours_in_day</span> <span class="cm">=&gt;</span> <span class="i">$hours_in_day</span>
    <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$converted</span> = <span class="i">$hours</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$set_units</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/sec/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> * <span class="n">60</span> * <span class="n">60</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'sec'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/min/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> * <span class="n">60</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'min'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/month/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> / <span class="i">$hours_in_day</span> / <span class="i">$days_in_month</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'months'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/(wk|week)/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> / <span class="i">$hours_in_day</span> / <span class="i">$days_in_week</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'wks'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/day/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> / <span class="i">$hours_in_day</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'days'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/(hr|hour)/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$units</span> = <span class="q">'hr|hour'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$set_units</span> =~ <span class="q">/^FTE$/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$units</span> = <span class="q">'FTE'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="i">Message</span><span class="s">(</span><span class="q">&quot;Unit: $set_units Not recognized&quot;</span><span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$hours</span> &lt; <span class="n">1</span> / <span class="n">60</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> * <span class="n">60</span> * <span class="n">60</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'sec'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$hours</span> &lt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> * <span class="n">60</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'min'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$hours</span> &gt; <span class="i">$hours_in_day</span> * <span class="i">$days_in_month</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> / <span class="i">$hours_in_day</span> / <span class="i">$days_in_month</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'months'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$hours</span> &gt; <span class="i">$hours_in_day</span> * <span class="n">4</span> * <span class="i">$days_in_week</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> / <span class="i">$hours_in_day</span> / <span class="i">$days_in_week</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'wks'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$hours</span> &gt; <span class="n">2</span> * <span class="i">$hours_in_day</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted</span> = <span class="i">$hours</span> / <span class="i">$hours_in_day</span><span class="sc">;</span>
            <span class="i">$units</span>     = <span class="q">'days'</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="i">$units</span> = <span class="q">'hr|hour'</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$unit</span> <span class="s">(</span><span class="i">@$use</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$unit</span> =~ <span class="q">/^$units/i</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$units</span> = <span class="i">$unit</span> <span class="s">}</span>
    <span class="s">}</span>
    <span class="c">## allow truncation to only a couple of decimal places</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$truncate</span> &amp;&amp; <span class="i">$converted</span> &gt; <span class="n">100</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$converted</span> = <span class="k">int</span><span class="s">(</span><span class="i">$converted</span><span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$truncate</span> &amp;&amp; <span class="i">$converted</span> &gt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$converted</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$converted</span> * <span class="n">100</span> <span class="s">)</span> / <span class="n">100</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$truncate</span> &amp;&amp; <span class="i">$converted</span> &gt; <span class="n">0.1</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$converted</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$converted</span> * <span class="n">1000</span> <span class="s">)</span> / <span class="n">1000</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="s">(</span> <span class="i">$converted</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#########################</span>
<span class="c"># Add time argument to date</span>
<span class="c">#########################</span>
<a name="end_of_day-"></a><span class="k">sub </span><span class="m">end_of_day</span> <span class="s">{</span>
<span class="c">#########################</span>
    <span class="k">my</span> <span class="i">$date</span>      = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$autoquote</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/:/</span> <span class="s">)</span> <span class="s">{</span>

        <span class="c"># add time in case user omits time argument (encompass whole $until day)</span>
        <span class="i">$date</span> .= <span class="q">&quot; 23:59:59&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$autoquote</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="q">&quot;'$date'&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">$date</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">#########################</span>
<span class="c">#  Convert time units to hours</span>
<span class="c">#</span>
<span class="c">#</span>
<span class="c">#########################</span>
<a name="convert_to_hours-"></a><span class="k">sub </span><span class="m">convert_to_hours</span> <span class="s">{</span>
<span class="c">#########################</span>

    <span class="k">my</span> <span class="i">%args</span>         = <span class="i">@_</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$time</span>         = <span class="i">$args</span>{ -<span class="k">time</span> }<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>        = <span class="i">$args</span>{-<span class="w">units</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$hours_in_day</span> = <span class="i">$args</span>{-<span class="w">hours_in_day</span>} || <span class="n">8</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$multiplier</span> = <span class="n">1</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> !<span class="s">(</span> <span class="k">defined</span> <span class="i">$time</span> <span class="s">)</span> <span class="s">)</span> || <span class="s">(</span> !<span class="s">(</span> <span class="k">defined</span> <span class="i">$units</span> <span class="s">)</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$time</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/hours/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$multiplier</span> = <span class="n">1</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/min/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$multiplier</span> = <span class="n">1</span> / <span class="n">60</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/day/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$multiplier</span> = <span class="i">$hours_in_day</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/week/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$multiplier</span> = <span class="n">5</span> * <span class="i">$hours_in_day</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/month/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$multiplier</span> = <span class="n">20</span> * <span class="i">$hours_in_day</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">$converted_time</span> = <span class="i">$time</span> * <span class="i">$multiplier</span><span class="sc">;</span>
    <span class="k">return</span> <span class="s">(</span> <span class="i">$converted_time</span><span class="cm">,</span> <span class="q">'Units'</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">########################################################</span>
<span class="c">#  Find the number of weekdays given a date a range</span>
<span class="c">###################</span>
<a name="week_days-"></a><span class="k">sub </span><span class="m">week_days</span> <span class="s">{</span>
<span class="c">###################</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>
    <span class="k">require</span> <span class="w">Date::Calc</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$date_from</span> = <span class="i">$args</span>{-<span class="w">date_from</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$date_to</span>   = <span class="i">$args</span>{-<span class="w">date_to</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$date_from</span> =~ <span class="q">/(\d+)-(\d+)-(\d+)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="i">@start</span> = <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$date_to</span> =~ <span class="q">/(\d+)-(\d+)-(\d+)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="i">@stop</span> = <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$date_diff</span> = <span class="i">Delta_Days</span><span class="s">(</span> <span class="i">@start</span><span class="cm">,</span> <span class="i">@stop</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$week_days</span><span class="sc">;</span>
    <span class="k">for</span> <span class="s">(</span> <span class="k">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$i</span> &lt;= <span class="i">$date_diff</span><span class="sc">;</span> <span class="i">$i</span>++ <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">@date</span> = <span class="i">Add_Delta_Days</span><span class="s">(</span> <span class="i">@start</span><span class="cm">,</span> <span class="i">$i</span> <span class="s">)</span><span class="sc">;</span>
        <span class="c">## skip weekend</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">Day_of_Week</span><span class="s">(</span><span class="i">@date</span><span class="s">)</span> =~ <span class="q">/6|7/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">next</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="i">$week_days</span>++<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">return</span> <span class="i">$week_days</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">################################</span>
<span class="c">#</span>
<span class="c"># Converts anything to mils</span>
<span class="c"># if quantity or units is undefined, returns arguments (essential to preserve undefined state)</span>
<span class="c">#</span>
<span class="c"># (Assumes either litres or grams)</span>
<span class="c">#######################</span>
<a name="convert_to_mils-"></a><span class="k">sub </span><span class="m">convert_to_mils</span> <span class="s">{</span>
<span class="c">########################</span>
    <span class="k">my</span> <span class="i">$qty</span>      = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original quantity</span>
    <span class="k">my</span> <span class="i">$units</span>    = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## original units (eg. mg / ml )</span>
    <span class="k">my</span> <span class="i">$decimals</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$quiet</span>    = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$qty</span> =~ <span class="q">/([pumkgl]+)/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$units</span> = <span class="i">$1</span><span class="sc">;</span>         <span class="c">## allow for units supplied in qty field.</span>
    <span class="s">}</span>

    <span class="k">unless</span> <span class="s">(</span> <span class="i">$qty</span> &amp;&amp; <span class="i">$units</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$qty</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">$units_alias</span> = <span class="q">''</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$multiplier</span>  = <span class="n">1</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^\s*(g|l)/i</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## kilograms or litres ##</span>
        <span class="i">$units_alias</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$multiplier</span>  = <span class="n">1000</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^m(g|l)/i</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## kilograms or litres ##</span>
        <span class="i">$units_alias</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$multiplier</span>  = <span class="n">1</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^u(g|l)/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$units_alias</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$multiplier</span>  = <span class="n">1</span> / <span class="n">1000</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^n(g|l)/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$units_alias</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$multiplier</span>  = <span class="n">1</span> / <span class="n">1000000</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^p(g|l)/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$units_alias</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$multiplier</span>  = <span class="n">1</span> / <span class="n">1000000000</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^k(g|l)/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$units_alias</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$multiplier</span>  = <span class="n">1000000</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">unless</span> <span class="s">(</span><span class="i">$quiet</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">print</span> <span class="q">&quot;Warning : Unknown units found : $units ?&quot;</span><span class="sc">;</span>
            <span class="i">RGTools::RGIO::Call_Stack</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="i">$end_qty</span> = <span class="i">$qty</span> * <span class="i">$multiplier</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$decimals</span> &amp;&amp; <span class="i">$end_qty</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">##### if large number reduce number of decimal points..</span>
        <span class="k">my</span> <span class="i">$format</span> = <span class="q">&quot;%0.$decimals&quot;</span> . <span class="q">&quot;f&quot;</span><span class="sc">;</span>
        <span class="i">$end_qty</span> = <span class="k">sprintf</span><span class="s">(</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$end_qty</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="s">(</span> <span class="i">$end_qty</span><span class="cm">,</span> <span class="q">'m'</span> . <span class="i">$units_alias</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">###############################</span>
<span class="c"># Subroutine: takes in a scalar representing a well ie A01, a1, p4 P04</span>
<span class="c"># Return: a string representing the same well, but uppercased and removed/added zero-padding depending on switches. By default, pads the wells.</span>
<span class="c">###############################</span>
<a name="format_well-"></a><span class="k">sub </span><span class="m">format_well</span> <span class="s">{</span>
<span class="c">############################</span>
    <span class="k">my</span> <span class="i">$well</span>       = <span class="k">shift</span><span class="sc">;</span>              <span class="c"># (Scalar) a well string</span>
    <span class="k">my</span> <span class="i">$zero_pad</span>   = <span class="k">shift</span> || <span class="q">'pad'</span><span class="sc">;</span>     <span class="c"># (Scalar) format command - either 'pad' or 'nopad'</span>
    <span class="k">my</span> <span class="i">@well_array</span> = <span class="k">split</span> <span class="q">','</span><span class="cm">,</span> <span class="i">$well</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="s">(</span><span class="i">@well_array</span><span class="s">)</span> <span class="s">{</span>

        <span class="c"># uppercase</span>
        <span class="i">$_</span> = <span class="k">uc</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$zero_pad</span> <span class="k">eq</span> <span class="q">&quot;nopad&quot;</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$_</span> =~ <span class="q">s/(\w{1})\Q0\E(\d{1})/$1$2/i</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>

            <span class="c"># pad well</span>
            <span class="i">$_</span> =~ <span class="q">s/^(\w)(\d)$/$1\Q0\E$2/</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">return</span> <span class="k">join</span> <span class="q">','</span><span class="cm">,</span> <span class="i">@well_array</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">################</span>
<a name="SQL_well-"></a><span class="k">sub </span><span class="m">SQL_well</span> <span class="s">{</span>
<span class="c">################</span>
    <span class="k">my</span> <span class="i">$field</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">return</span> <span class="q">&quot;CASE WHEN LENGTH($field) &gt; 2 THEN UPPER($field) ELSE UPPER( CONCAT(LEFT($field,1), '0' , RIGHT($field,1))) END&quot;</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">######################</span>
<span class="c">#</span>
<span class="c"># Convert a string with * or ? wildcards to SQL format (using %, _)</span>
<span class="c">#</span>
<span class="c">#</span>
<span class="c">#</span>
<span class="c">######################</span>
<a name="wildcard_to_SQL-"></a><span class="k">sub </span><span class="m">wildcard_to_SQL</span> <span class="s">{</span>

    <span class="k">my</span> <span class="i">$pattern</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="i">$pattern</span> =~ <span class="q">s /\*/%/g</span><span class="sc">;</span>    <span class="c">## &lt;CONSTRUCTION&gt; - move to a wildcard_SQL conversion method</span>
    <span class="i">$pattern</span> =~ <span class="q">s /\?/\_/g</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">$pattern</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">################</span>
<a name="SQL_hours-"></a><span class="k">sub </span><span class="m">SQL_hours</span> <span class="s">{</span>
<span class="c">################</span>

    <span class="k">my</span> <span class="i">$number</span>      = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>       = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$HPD</span>         = <span class="k">shift</span> || <span class="n">7</span><span class="sc">;</span>    <span class="c">## hours per day for calculation</span>
    <span class="k">my</span> <span class="i">$case_option</span> = <span class="k">shift</span> || <span class="q">''</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$round</span>       = <span class="k">shift</span> || <span class="n">1</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$number</span> &amp;&amp; <span class="i">$units</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span>
            <span class="q">&quot;CASE $case_option WHEN $units LIKE 'Hour%' THEN ROUND($number,$round) WHEN $units LIKE 'Day%' THEN ROUND($number * $HPD,$round) WHEN $units LIKE 'Week%' THEN ROUND($number * $HPD * 7,$round) WHEN $units LIKE 'Month%' THEN ROUND($number*$HPD*30,$round) WHEN $units like 'Minute%' THEN ROUND($number/60,$round) ELSE ROUND($units,$round) END&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">$number</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">################</span>
<a name="text_SQL_date-"></a><span class="k">sub </span><span class="m">text_SQL_date</span> <span class="s">{</span>
<span class="c">################</span>
    <span class="k">my</span> <span class="i">$field</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">return</span> <span class="q">&quot;concat(Left(DayName($field),3),'_',Left(MonthName($field),3),'_',DayofMonth($field))&quot;</span><span class="sc">;</span>
<span class="s">}</span>
<span class="c">#############################################</span>
<span class="c">#</span>
<span class="c"># Convert date to and from SQL format</span>
<span class="c">#  (allows for inclusion of wildcard characters for day and month using * or %).</span>
<span class="c">#</span>
<span class="c">#  (allows for custom formatting using YYYY or YY, DD, MM or Mon, TIME in the format specification)</span>
<span class="c">#</span>
<span class="c"># 'SQL' format converts from 'Jun-24-2001' to '06-24-2001'</span>
<span class="c"># 'Simple' format converts from '06-24-2001' to 'Jun-24-2001'</span>
<span class="c"># 'DD Mon / 2005' converts to '24 Jun / 2005'</span>
<span class="c">#</span>
<span class="c"># Return: converted date</span>
<span class="c">#######################</span>
<a name="convert_date-"></a><span class="k">sub </span><span class="m">convert_date</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="k">my</span> <span class="i">$date</span>   = <span class="k">shift</span> || <span class="n">0</span><span class="sc">;</span>        <span class="c">## input date (eg 'Jun 2nd, 2005' or '2006-01-15')</span>
    <span class="k">my</span> <span class="i">$format</span> = <span class="k">shift</span> || <span class="q">'SQL'</span><span class="sc">;</span>    <span class="c">## format ('SQL' -&gt; 2005-01-31', 'Simple' -&gt; 'Jan-01-2005', or Custom: 'Mon DD/YY'-&gt; Jan 31/2005</span>
    <span class="k">my</span> <span class="i">$quote</span>  = <span class="k">shift</span> || <span class="n">0</span><span class="sc">;</span>        <span class="c">## return quoted date.</span>

    <span class="k">unless</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/[1-9]/</span> <span class="s">)</span> <span class="s">{</span>

        <span class="c"># if there is no date specified, return a blank string</span>
        <span class="k">return</span> <span class="q">'0000-00-00'</span><span class="sc">;</span>

        <span class="c">#	my ($sec,$min,$hour,$mday,$mon,$year)=localtime();</span>
        <span class="c">#    	my $nowdate = sprintf &quot;%04d-%02d-%02d&quot;,$year+1900,$mon+1,$mday;</span>
        <span class="c">#	$nowdate =~ s/ /0/g;</span>
        <span class="c">#	$date = $nowdate;                             ## find current date and use that if not otherwise specified...</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/^\'(.*)\'/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$date</span> = <span class="i">$1</span><span class="sc">;</span>
        <span class="i">$quote</span>++<span class="sc">;</span>
    <span class="s">}</span>    <span class="c">## if quoted date, supplied, return quoted date.</span>

    <span class="k">my</span> <span class="i">$newdate</span> = <span class="i">$date</span><span class="sc">;</span>

    <span class="c">## replace with Decode_Month if avail...</span>
    <span class="k">my</span> <span class="i">$Month</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">JAN</span>} = <span class="q">'01'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">FEB</span>} = <span class="q">'02'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">MAR</span>} = <span class="q">'03'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">APR</span>} = <span class="q">'04'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">MAY</span>} = <span class="q">'05'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">JUN</span>} = <span class="q">'06'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">JUL</span>} = <span class="q">'07'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">AUG</span>} = <span class="q">'08'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">SEP</span>} = <span class="q">'09'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">OCT</span>} = <span class="q">'10'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">NOV</span>} = <span class="q">'11'</span><span class="sc">;</span>
    <span class="i">$Month</span>-&gt;{<span class="w">DEC</span>} = <span class="q">'12'</span><span class="sc">;</span>

    <span class="k">my</span> <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="q">'%'</span><span class="cm">,</span> <span class="q">'%'</span><span class="cm">,</span> <span class="q">'%'</span><span class="cm">,</span> <span class="q">''</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/^(\d\d\d\d)-(\d\d)-(\d\d)(.*)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">## YYYY-MM-DD ## (standard SQL) ##</span>
        <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span><span class="cm">,</span> <span class="i">$4</span> <span class="s">)</span><span class="sc">;</span>

    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/^([a-zA-Z]{3})[a-zA-Z]*[-\s\/]{1}(\d{1,2})[-\s\/\,]{1,2}(\d\d\d\d)(.*)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">## Apr 03, 1975 ## 'Simple' Format   ## also understands 'April 3, 1975'</span>
        <span class="s">(</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span><span class="cm">,</span> <span class="i">$4</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/^([a-zA-Z]{3})[a-zA-Z]*[-\s\/]{1}(\d{1,2})[-\s\/\,]{1,2}(\d\d)$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">## Apr 03/75 ## 'Simple' Format   ## also understands 'April 3, 00'</span>
        <span class="s">(</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span><span class="cm">,</span> <span class="i">$4</span> <span class="s">)</span><span class="sc">;</span>
        <span class="c">## assume years after '70 are 1970 &amp; up...</span>
        <span class="k">if</span>   <span class="s">(</span> <span class="i">$year</span> &gt;= <span class="n">70</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$year</span> += <span class="n">1900</span> <span class="s">}</span>
        <span class="k">else</span>                 <span class="s">{</span> <span class="i">$year</span> += <span class="n">2000</span> <span class="s">}</span>
    <span class="s">}</span>

    <span class="c">######### Extend flexibility for SQL searching in date field by allowing wildcards and less common formats #######</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/^(\d\d\d\d)[-\s\/]{1}([\d\*\%]{1,2})[-\s\/\,]{1,2}([\d\*\%]{1,2})(.*)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">## 2001-*-*                              ## Allow wildcards in SQL format ##</span>
        <span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span><span class="cm">,</span> <span class="i">$4</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="c">## Allow English names for Months ##</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/([a-zA-Z]{3})[a-zA-Z]*[-\s\/]{1}([\d\*\%]{1,2})(nd|st|rd|th|)[-\s\/\,]{1,2}(\d\d\d\d)(.*)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">### Format = Apr-*-2001 ####</span>
        <span class="s">(</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$4</span><span class="cm">,</span> <span class="i">$5</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/([\d\*\%]{1,2})[-\s\/\,]{1,2}([a-zA-Z]{3})[a-zA-Z]*[-\s\/\,]{1,2}(\d\d\d\d)(.*)/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">### Format = 02 February 2001 ####</span>
        <span class="s">(</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$month</span><span class="cm">,</span> <span class="i">$year</span><span class="cm">,</span> <span class="i">$time</span> <span class="s">)</span> = <span class="s">(</span> <span class="i">$1</span><span class="cm">,</span> <span class="i">$2</span><span class="cm">,</span> <span class="i">$3</span><span class="cm">,</span> <span class="i">$4</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">else</span> <span class="s">{</span> <span class="i">Message</span><span class="s">(</span><span class="q">&quot;unrecognized date format : $date ?&quot;</span><span class="s">)</span> <span class="s">}</span>

    <span class="i">$month</span> = <span class="i">$Month</span>-&gt;{ <span class="k">uc</span><span class="s">(</span> <span class="k">substr</span><span class="s">(</span> <span class="i">$month</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">3</span> <span class="s">)</span> <span class="s">)</span> } <span class="k">if</span> <span class="k">defined</span> <span class="i">$Month</span>-&gt;{ <span class="k">uc</span><span class="s">(</span> <span class="k">substr</span><span class="s">(</span> <span class="i">$month</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">3</span> <span class="s">)</span> <span class="s">)</span> }<span class="sc">;</span>    <span class="c"># convert from 'February' -&gt; 2</span>

    <span class="i">$year</span>  = <span class="k">sprintf</span> <span class="q">&quot;%04d&quot;</span><span class="cm">,</span> <span class="i">$year</span>  <span class="k">if</span> <span class="i">$year</span>  =~ <span class="q">/\d+/</span><span class="sc">;</span>
    <span class="i">$month</span> = <span class="k">sprintf</span> <span class="q">&quot;%02d&quot;</span><span class="cm">,</span> <span class="i">$month</span> <span class="k">if</span> <span class="i">$month</span> =~ <span class="q">/\d+/</span><span class="sc">;</span>
    <span class="i">$day</span>   = <span class="k">sprintf</span> <span class="q">&quot;%02d&quot;</span><span class="cm">,</span> <span class="i">$day</span>   <span class="k">if</span> <span class="i">$day</span>   =~ <span class="q">/\d+/</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$format</span> =~ <span class="q">/Simple/i</span> <span class="s">)</span> <span class="s">{</span>                                                                             <span class="c">### Convert FROM SQL</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$day</span> . <span class="i">$month</span> . <span class="i">$year</span> =~ <span class="q">/[\*\%]/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$format</span> = <span class="q">'Mon-DD-YYYYTIME'</span><span class="sc">;</span>
        <span class="s">}</span>                                                                                                     <span class="c">## use format option below if wildcards...</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$date</span> = <span class="i">strftime</span><span class="s">(</span> <span class="q">'%b-%d-%Y'</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="i">$day</span><span class="cm">,</span> <span class="i">$month</span> - <span class="n">1</span><span class="cm">,</span> <span class="i">$year</span> - <span class="n">1900</span> <span class="s">)</span><span class="sc">;</span>
            <span class="i">$newdate</span> = <span class="i">$date</span> . <span class="i">$time</span> <span class="k">if</span> <span class="i">$date</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$format</span> =~ <span class="q">/SQL/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$newdate</span> = <span class="q">&quot;$year-$month-$day&quot;</span> . <span class="i">$time</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$format</span> =~ <span class="q">/DD/</span> || <span class="i">$format</span> =~ <span class="q">/Mon/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">##  Allow custom formats using replacement options: YYYY, YY, DD, MM, Mon, TIME</span>
        <span class="i">$newdate</span> = <span class="i">$format</span><span class="sc">;</span>
        <span class="i">$newdate</span> =~ <span class="q">s /DD/$day/</span><span class="sc">;</span>
        <span class="i">$newdate</span> =~ <span class="q">s /MM/$month/</span><span class="sc">;</span>
        <span class="i">$newdate</span> =~ <span class="q">s /YYYY/$year/</span><span class="sc">;</span>
        <span class="i">$newdate</span> =~ <span class="q">s /TIME/$time/</span><span class="sc">;</span>

        <span class="k">my</span> <span class="i">$yr</span> = <span class="k">substr</span><span class="s">(</span> <span class="i">$year</span><span class="cm">,</span> <span class="n">2</span><span class="cm">,</span> <span class="n">2</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$newdate</span> =~ <span class="q">s /YY/$yr/</span><span class="sc">;</span>

        <span class="k">if</span> <span class="s">(</span> <span class="i">$newdate</span> =~ <span class="q">/Mon/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">foreach</span> <span class="k">my</span> <span class="i">$month_name</span> <span class="s">(</span> <span class="k">keys</span> <span class="i">%$Month</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">$Month</span>-&gt;{<span class="i">$month_name</span>} == <span class="i">$month</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$month</span> = <span class="k">uc</span><span class="s">(</span> <span class="k">substr</span><span class="s">(</span> <span class="i">$month_name</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span> <span class="s">)</span> <span class="s">)</span> . <span class="k">lc</span><span class="s">(</span> <span class="k">substr</span><span class="s">(</span> <span class="i">$month_name</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">2</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
                    <span class="k">last</span><span class="sc">;</span>
                <span class="s">}</span>
            <span class="s">}</span>
            <span class="i">$newdate</span> =~ <span class="q">s /Mon/$month/</span><span class="sc">;</span>
        <span class="s">}</span>

    <span class="s">}</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="i">$newdate</span> =~ <span class="q">/\d/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$newdate</span> = <span class="i">$date</span><span class="sc">;</span> <span class="s">}</span>
    <span class="i">$newdate</span> =~ <span class="q">s /\*/%/g</span><span class="sc">;</span>    <span class="c">## convert * wildcards to '%' (SQL compatible).</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$quote</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="q">&quot;'$newdate'&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">$newdate</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">#######################</span>
<span class="c"># Enables use of format 'Min.Sec' for tracking minutes and seconds.</span>
<span class="c">#  other formats are consistent with SQL standard (N -&gt; 00::00:N; M:N -&gt; M:N:0)</span>
<span class="c">#  (also enables passage of '1 m' or '500 s' - converted to SQL time format)</span>
<span class="c">#</span>
<span class="c"># return time (in SQL time format) - return 0 if unrecognized format.</span>
<span class="c">######################</span>
<a name="convert_time-"></a><span class="k">sub </span><span class="m">convert_time</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">$time</span>  = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span> = <span class="k">shift</span> || <span class="q">'s'</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$quote</span> = <span class="n">0</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$time</span> =~ <span class="q">/^\'(.*)\'/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$time</span> = <span class="i">$1</span><span class="sc">;</span> <span class="i">$quote</span>++<span class="sc">;</span> <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$time</span> =~ <span class="q">/([\d\.\:]+)\s*([smh])/i</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$time</span> = <span class="i">$1</span><span class="sc">;</span> <span class="i">$units</span> = <span class="i">$2</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$time</span> =~ <span class="q">/\:/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="c">## this format is ok... just leave it</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$time</span> =~ <span class="q">/^\s*(\d+)\.(\d+)\s*$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$time</span> =~ <span class="q">s /\./\:/g</span><span class="sc">;</span>
        <span class="i">$time</span> = <span class="q">&quot;00:$time&quot;</span><span class="sc">;</span>    <span class="c">## convert to minutes: 1.2 -&gt; 00:01:02</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$time</span> =~ <span class="q">/^(\d+)$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^h/</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;$1:00:00&quot;</span> <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^m/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$hours</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$time</span> / <span class="n">60</span> <span class="s">)</span> || <span class="q">'0'</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$min</span> = <span class="i">$time</span><span class="sc">;</span>
            <span class="i">$min</span>  = <span class="i">$time</span> - <span class="i">$hours</span> * <span class="n">60</span><span class="sc">;</span>
            <span class="i">$time</span> = <span class="q">&quot;$hours:$min:00&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^s/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$minutes</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$time</span> / <span class="n">60</span> <span class="s">)</span>    || <span class="q">'0'</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$hours</span>   = <span class="k">int</span><span class="s">(</span> <span class="i">$minutes</span> / <span class="n">60</span> <span class="s">)</span> || <span class="q">'0'</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$min</span> = <span class="i">$minutes</span> - <span class="i">$hours</span> * <span class="n">60</span><span class="sc">;</span>

            <span class="k">my</span> <span class="i">$sec</span> = <span class="i">$time</span> - <span class="i">$hours</span> * <span class="n">60</span> * <span class="n">60</span> - <span class="i">$min</span> * <span class="n">60</span><span class="sc">;</span>
            <span class="i">$time</span> = <span class="q">&quot;$hours:$min:$sec&quot;</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">if</span>   <span class="s">(</span><span class="i">$quote</span><span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;'$time'&quot;</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>          <span class="s">{</span> <span class="k">return</span> <span class="i">$time</span> <span class="s">}</span>
<span class="s">}</span>

<span class="c">#########################</span>
<span class="c"># Returns string for day</span>
<span class="c"># eg SQL_day('2005-11-30') = 'Wed. Nov 30/2005'</span>
<span class="c">#</span>
<span class="c">##############</span>
<a name="SQL_day-"></a><span class="k">sub </span><span class="m">SQL_day</span> <span class="s">{</span>
<span class="c">##############</span>
    <span class="k">my</span> <span class="i">$date</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">unless</span> <span class="s">(</span> <span class="i">$date</span> =~ <span class="q">/[a-zA-Z]/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$date</span> = <span class="q">&quot;'$date'&quot;</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">return</span> <span class="q">&quot;concat(Left(DayName($date),3),'. ',Left(MonthName($date),3),' ',DayofMonth($date),'/',Year($date))&quot;</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#######################</span>
<a name="SQL_weekdays-"></a><span class="k">sub </span><span class="m">SQL_weekdays</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="k">my</span> <span class="i">$from</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$to</span>   = <span class="k">shift</span><span class="sc">;</span>

    <span class="i">$from</span> = <span class="q">&quot;'$from'&quot;</span> <span class="k">unless</span> <span class="i">$from</span> =~ <span class="q">/^\'/</span><span class="sc">;</span>
    <span class="i">$to</span>   = <span class="q">&quot;'$to'&quot;</span>   <span class="k">unless</span> <span class="i">$to</span>   =~ <span class="q">/^\'/</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$order1</span> = <span class="i">$from</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$order2</span> = <span class="i">$to</span><span class="sc">;</span>
    <span class="i">$order1</span> =~ <span class="q">s/\W//g</span><span class="sc">;</span>
    <span class="i">$order2</span> =~ <span class="q">s/\W//g</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$order1</span> &gt; <span class="i">$order2</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## reverse order ##</span>
        <span class="k">my</span> <span class="i">$temp</span> = <span class="i">$from</span><span class="sc">;</span>
        <span class="i">$from</span> = <span class="i">$to</span><span class="sc">;</span>
        <span class="i">$to</span>   = <span class="i">$temp</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">$diff</span>      = <span class="q">&quot;(TO_DAYS($to) - TO_DAYS($from))&quot;</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$weeks</span>     = <span class="q">&quot;FLOOR($diff/7)&quot;</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$remainder</span> = <span class="q">&quot;$diff - FLOOR($diff/7)*7&quot;</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$extra_days</span>
        = <span class="q">&quot;CASE WHEN DayName($from) = 'Sunday' THEN Least($remainder,1) &quot;</span>
        . <span class="q">&quot;WHEN $remainder-WeekDay($from)-2 &lt; 0 THEN Least($remainder-2,$remainder-1,$remainder) &quot;</span>
        . <span class="q">&quot;WHEN $remainder-WeekDay($from)-2 = 0 THEN Least($remainder-1,$remainder) &quot;</span>
        . <span class="q">&quot;WHEN $remainder-WeekDay($from)-2 &gt; 0 THEN $remainder &quot;</span> . <span class="q">&quot;END&quot;</span><span class="sc">;</span>

    <span class="c">#    print &quot;R: $remainder as Remaind&lt;BR&gt;&quot;;</span>
    <span class="c">#    print &quot;D: 5*$weeks as WeekDays&lt;BR&gt;&quot;;</span>
    <span class="c">#    print &quot;X: $extra_days as extra&lt;BR&gt;&quot;;</span>

    <span class="k">my</span> <span class="i">$weekdays</span> = <span class="q">&quot;5*$weeks + $extra_days as Weekdays&quot;</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">$weekdays</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">###########################</span>
<a name="translate_date-"></a><span class="k">sub </span><span class="m">translate_date</span> <span class="s">{</span>
<span class="c">###########################</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">&amp;filter_input</span><span class="s">(</span> \<span class="i">@_</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$date</span> = <span class="i">$args</span>{-<span class="w">date</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">%date_tags</span> = <span class="s">(</span>
        <span class="q">'TODAY'</span>     <span class="cm">=&gt;</span> <span class="q">''</span><span class="cm">,</span>
        <span class="q">'YESTERDAY'</span> <span class="cm">=&gt;</span> <span class="q">'-1d'</span><span class="cm">,</span>
        <span class="q">'LASTDAY'</span>   <span class="cm">=&gt;</span> <span class="q">'-1d'</span><span class="cm">,</span>
        <span class="q">'LASTWEEK'</span>  <span class="cm">=&gt;</span> <span class="q">'-7d'</span><span class="cm">,</span>
        <span class="q">'LASTMONTH'</span> <span class="cm">=&gt;</span> <span class="q">'-30d'</span><span class="cm">,</span>
        <span class="q">'LASTYEAR'</span>  <span class="cm">=&gt;</span> <span class="q">'-365d'</span><span class="cm">,</span>
    <span class="s">)</span><span class="sc">;</span>

    <span class="i">$date</span> = <span class="k">uc</span><span class="s">(</span><span class="i">$date</span><span class="s">)</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="k">defined</span> <span class="i">$date_tags</span>{<span class="i">$date</span>} <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="i">date_time</span><span class="s">(</span> -<span class="w">offset</span> <span class="cm">=&gt;</span> <span class="i">$date_tags</span>{<span class="i">$date</span>} <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="i">Message</span><span class="s">(</span><span class="q">&quot;Warning: Unknown tag ($date)&quot;</span><span class="s">)</span><span class="sc">;</span>
        <span class="k">return</span> <span class="i">$date</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">##########################################</span>
<span class="c"># Convert a hash of indexes to arrays to an array of references</span>
<span class="c"># (each with similar keys to the original hash, and scalars for values)</span>
<span class="c">#</span>
<span class="c"># Return reference to array</span>
<span class="c">############################</span>
<a name="convert_HofA_to_AofH-"></a><span class="k">sub </span><span class="m">convert_HofA_to_AofH</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">$hash</span>       = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## data in hash form</span>
    <span class="k">my</span> <span class="i">$KEY</span>        = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## return hash keyed to this field instead of an array.</span>
    <span class="k">my</span> <span class="i">$order</span>      = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## order hash (if keys chosen).</span>
    <span class="k">my</span> <span class="i">$stack_keys</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## Flag to determine if two records of the same key will be stacked (as an array of hashes) or just overwritten</span>

    <span class="k">my</span> <span class="i">%data</span> = <span class="i">%</span>{<span class="i">$hash</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">@keys</span> = <span class="k">keys</span> <span class="i">%data</span><span class="sc">;</span>

    <span class="k">unless</span> <span class="s">(</span> <span class="k">defined</span> <span class="i">$data</span>{ <span class="i">$keys</span>[<span class="n">0</span>] } &amp;&amp; <span class="i">$data</span>{ <span class="i">$keys</span>[<span class="n">0</span>] } <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span><span class="i">$KEY</span><span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="s">{</span><span class="s">}</span><span class="sc">;</span> <span class="s">}</span>
        <span class="k">else</span>      <span class="s">{</span> <span class="k">return</span> <span class="s">[</span><span class="s">]</span><span class="sc">;</span> <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">$records</span> = <span class="k">int</span><span class="s">(</span> <span class="i">@</span>{ <span class="i">$data</span>{ <span class="i">$keys</span>[<span class="n">0</span>] } } <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@array_data</span> = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">%keyed_data</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$index</span> <span class="s">(</span> <span class="n">1</span> .. <span class="i">$records</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$this_key</span> = <span class="q">''</span><span class="sc">;</span>
        <span class="k">foreach</span> <span class="k">my</span> <span class="i">$sub_key</span> <span class="s">(</span> <span class="k">split</span> <span class="q">','</span><span class="cm">,</span> <span class="i">$KEY</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$this_key</span> .= <span class="i">$data</span>{<span class="i">$sub_key</span>}[ <span class="i">$index</span> - <span class="n">1</span> ]<span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">my</span> <span class="i">%thisrecord</span> = <span class="k">map</span> <span class="s">{</span> <span class="i">$_</span><span class="cm">,</span> <span class="i">$data</span>{<span class="i">$_</span>}-&gt;[ <span class="i">$index</span> - <span class="n">1</span> ] <span class="s">}</span> <span class="k">keys</span> <span class="i">%data</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span><span class="i">$KEY</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">if</span> <span class="s">(</span> <span class="i">$stack_keys</span> &amp;&amp; <span class="k">defined</span> <span class="i">$keyed_data</span>{<span class="i">$this_key</span>} <span class="s">)</span> <span class="s">{</span>
                <span class="k">if</span> <span class="s">(</span> <span class="k">ref</span><span class="s">(</span> <span class="i">$keyed_data</span>{<span class="i">$this_key</span>} <span class="s">)</span> <span class="k">ne</span> <span class="q">'ARRAY'</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="i">$keyed_data</span>{<span class="i">$this_key</span>} = <span class="s">[</span> <span class="i">$keyed_data</span>{<span class="i">$this_key</span>} <span class="s">]</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span><span class="s">(</span> <span class="i">@</span>{ <span class="i">$keyed_data</span>{<span class="i">$this_key</span>} }<span class="cm">,</span> \<span class="i">%thisrecord</span> <span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="i">$keyed_data</span>{<span class="i">$this_key</span>} = \<span class="i">%thisrecord</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">if</span> <span class="s">(</span><span class="i">$order</span><span class="s">)</span> <span class="s">{</span>
                <span class="i">$keyed_data</span>{<span class="w">order</span>}[ <span class="i">$index</span> - <span class="n">1</span> ] = <span class="i">$this_key</span><span class="sc">;</span>
            <span class="s">}</span>    <span class="c">## generate ordered list if desired</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="k">push</span><span class="s">(</span> <span class="i">@array_data</span><span class="cm">,</span> \<span class="i">%thisrecord</span> <span class="s">)</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$KEY</span><span class="s">)</span> <span class="s">{</span>

        <span class="c">#	print &quot;return hash (on $KEY)\n&quot;;</span>
        <span class="k">return</span> \<span class="i">%keyed_data</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>

        <span class="c">#	print &quot;Return array_ref\n&quot;;</span>
        <span class="k">return</span> \<span class="i">@array_data</span><span class="sc">;</span>
    <span class="s">}</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="get_units-"></a><span class="k">sub </span><span class="m">get_units</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="c">#</span>
    <span class="c"># return readable units given amount...</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$amount</span>   = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>    = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$decimals</span> = <span class="s">(</span> <span class="k">defined</span> <span class="i">$_</span>[<span class="n">0</span>] <span class="s">)</span> ? <span class="i">$_</span>[<span class="n">0</span>] <span class="co">:</span> <span class="n">2</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$base</span>    = <span class="q">''</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$unknown</span> = <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$mils</span>    = <span class="n">0</span><span class="sc">;</span>

    <span class="k">if</span>    <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/l/i</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$base</span>    = <span class="q">'L'</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/g/i</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$base</span>    = <span class="q">'g'</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                     <span class="s">{</span> <span class="i">$unknown</span> = <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>

    <span class="c">######## convert to mils.... ###########3</span>

    <span class="k">if</span>    <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^u/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span> / <span class="n">1000</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^m/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^[lg]/i</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$mils</span> = <span class="n">1000</span> * <span class="i">$amount</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^k/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="n">1000</span> * <span class="n">1000</span> * <span class="i">$amount</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^n/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span> / <span class="n">1000000</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                         <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span><span class="sc">;</span> <span class="i">$unknown</span> = <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$unknown</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="q">&quot;$amount units&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">@prefixes</span> = <span class="s">(</span> <span class="q">'n'</span><span class="cm">,</span> <span class="q">'u'</span><span class="cm">,</span> <span class="q">'m'</span><span class="cm">,</span> <span class="q">''</span><span class="cm">,</span> <span class="q">'k'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$prefix_index</span> = <span class="n">2</span><span class="sc">;</span>
    <span class="k">while</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> &gt;= <span class="n">1000</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$prefix_index</span> &lt; <span class="n">4</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> /= <span class="n">1000</span><span class="sc">;</span>
        <span class="i">$prefix_index</span>++<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">while</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> &lt; <span class="n">1</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$prefix_index</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> *= <span class="n">1000</span><span class="sc">;</span>
        <span class="i">$prefix_index</span>--<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="i">$format</span> = <span class="q">&quot;%0.$decimals&quot;</span> . <span class="q">&quot;f&quot;</span><span class="sc">;</span>
    <span class="i">$mils</span> = <span class="k">sprintf</span><span class="s">(</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$mils</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">return</span> <span class="q">&quot;$mils $prefixes[$prefix_index]$base&quot;</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="normalize_units-"></a><span class="k">sub </span><span class="m">normalize_units</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="c">#</span>
    <span class="c"># convert units to ml or mg (returning base unit as second parameter)...</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$amount</span>   = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>    = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$decimals</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">## (defined $_[0]) ? $_[0]:2;</span>

    <span class="k">my</span> <span class="i">$base</span> = <span class="q">'mL'</span><span class="sc">;</span>

    <span class="c">######### if amount contains units, reset units as specified... ###########</span>
    <span class="k">my</span> <span class="i">$mils</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$amount</span> =~ <span class="q">/([\d\.]+)\s?([a-zA-Z]+)/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$1</span><span class="sc">;</span> <span class="i">$units</span> = <span class="i">$2</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                                        <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span><span class="sc">;</span> <span class="i">$units</span> ||= <span class="q">'mL'</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/g/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/g/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$base</span> = <span class="q">'mg'</span><span class="sc">;</span>
    <span class="s">}</span>                        <span class="c">### allow g to override ml (should be checked first since base units may be mL by default</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/l/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/l/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$base</span> = <span class="q">'mL'</span><span class="sc">;</span> <span class="s">}</span>

    <span class="i">$units</span> =~ <span class="q">s/\s//g</span><span class="sc">;</span>       <span class="c">##### remove any spaces if they exist...</span>

    <span class="c">######## convert to mils or mg.... ###########3</span>
    <span class="c">#    print &quot;Checking $mils-$units.&quot;,br();</span>
    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/^u/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^u/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$mils</span> / <span class="n">1000</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/^m/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^m/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/^[lg]/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^[lg]/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> = <span class="n">1000</span> * <span class="i">$mils</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/^k/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^k/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> = <span class="n">1000</span> * <span class="n">1000</span> * <span class="i">$mils</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/^n/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^n/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> = <span class="i">$mils</span> / <span class="n">1000000</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="c">#     (what if 0.0000045 ? - do not sprintf...)</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$decimals</span> &amp;&amp; <span class="i">$mils</span> &gt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">##### if large number reduce number of decimal points..</span>
        <span class="k">my</span> <span class="i">$format</span> = <span class="q">&quot;%0.$decimals&quot;</span> . <span class="q">&quot;f&quot;</span><span class="sc">;</span>
        <span class="i">$mils</span> = <span class="k">sprintf</span><span class="s">(</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$mils</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="i">$mils</span> += <span class="n">0</span><span class="sc">;</span>                        <span class="c">#### return only number...</span>
    <span class="k">return</span> <span class="s">(</span> <span class="i">$mils</span><span class="cm">,</span> <span class="i">$base</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="simplify_units-"></a><span class="k">sub </span><span class="m">simplify_units</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="c">#</span>
    <span class="c"># convert units more readable format...</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$amount</span>   = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>    = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$decimals</span> = <span class="s">(</span> <span class="k">defined</span> <span class="i">$_</span>[<span class="n">0</span>] <span class="s">)</span> ? <span class="i">$_</span>[<span class="n">0</span>] <span class="co">:</span> <span class="n">2</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$base</span> = <span class="q">'mL'</span><span class="sc">;</span>

    <span class="c">######### if amount contains units, reset units as specified... ###########</span>
    <span class="k">my</span> <span class="i">$mils</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$amount</span> =~ <span class="q">/([\d\.]+)\s?([a-zA-Z]+)/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$1</span><span class="sc">;</span> <span class="i">$units</span> = <span class="i">$2</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                                        <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span><span class="sc">;</span> <span class="i">$units</span> ||= <span class="q">'mL'</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/g/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/g/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$base</span> = <span class="q">'mg'</span><span class="sc">;</span>
    <span class="s">}</span>    <span class="c">### allow g to override ml (should be checked first since base units may be mL by default</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> =~ <span class="q">/l/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/l/i</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$base</span> = <span class="q">'mL'</span><span class="sc">;</span> <span class="s">}</span>

    <span class="i">$units</span> =~ <span class="q">s/\s//g</span><span class="sc">;</span>    <span class="c">##### remove any spaces if they exist...</span>

    <span class="k">unless</span> <span class="s">(</span><span class="i">$amount</span><span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$base</span> <span class="s">)</span><span class="sc">;</span> <span class="s">}</span>    <span class="c">########### if zero</span>

    <span class="c">######## convert to mils.... ###########3</span>

    <span class="k">my</span> <span class="i">$unknown</span> = <span class="n">0</span><span class="sc">;</span>
    <span class="k">if</span>    <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^u/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span> / <span class="n">1000</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^m/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^[lg]/i</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$mils</span> = <span class="n">1000</span> * <span class="i">$amount</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^k/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="n">1000</span> * <span class="n">1000</span> * <span class="i">$amount</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/^n/i</span> <span class="s">)</span>    <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span> / <span class="n">1000000</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                         <span class="s">{</span> <span class="i">$mils</span> = <span class="i">$amount</span><span class="sc">;</span> <span class="i">$unknown</span> = <span class="n">1</span><span class="sc">;</span> <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$unknown</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="q">&quot;$amount units&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">@prefixes</span> = <span class="s">(</span> <span class="q">'n'</span><span class="cm">,</span> <span class="q">'u'</span><span class="cm">,</span> <span class="q">'m'</span><span class="cm">,</span> <span class="q">''</span><span class="cm">,</span> <span class="q">'k'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$prefix_index</span> = <span class="n">2</span><span class="sc">;</span>
    <span class="k">while</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> &gt;= <span class="n">1000</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$prefix_index</span> &lt; <span class="n">4</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> /= <span class="n">1000</span><span class="sc">;</span>
        <span class="i">$prefix_index</span>++<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">while</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$mils</span> &lt; <span class="n">10</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$prefix_index</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$mils</span> *= <span class="n">1000</span><span class="sc">;</span>
        <span class="i">$prefix_index</span>--<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">my</span> <span class="i">$format</span> = <span class="q">&quot;%0.$decimals&quot;</span> . <span class="q">&quot;f&quot;</span><span class="sc">;</span>
    <span class="i">$mils</span> = <span class="k">sprintf</span><span class="s">(</span> <span class="i">$format</span><span class="cm">,</span> <span class="i">$mils</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">unless</span> <span class="s">(</span><span class="i">$mils</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$mils</span><span class="cm">,</span> <span class="i">$base</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>    <span class="c">########### if very close to zero</span>

    <span class="k">my</span> <span class="i">$new_prefix</span> = <span class="i">$prefixes</span>[<span class="i">$prefix_index</span>]<span class="sc">;</span>
    <span class="i">$base</span> =~ <span class="q">s /m/$new_prefix/</span><span class="sc">;</span>

    <span class="k">return</span> <span class="s">(</span> <span class="i">$mils</span><span class="cm">,</span> <span class="i">$base</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#############################</span>
<span class="c"># Get the best units</span>
<span class="c">#############################</span>
<a name="Get_Best_Units-"></a><span class="k">sub </span><span class="m">Get_Best_Units</span> <span class="s">{</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$amount</span> = <span class="i">$args</span>{-<span class="w">amount</span>}<span class="sc">;</span>    <span class="c"># Amount</span>
    <span class="k">my</span> <span class="i">$units</span>  = <span class="i">$args</span>{-<span class="w">units</span>}<span class="sc">;</span>     <span class="c"># Current units (e.g. uL)</span>
    <span class="k">my</span> <span class="i">$base</span>   = <span class="i">$args</span>{-<span class="w">base</span>}<span class="sc">;</span>      <span class="c"># Base (e.g. L).  If not provided, then assumed to be the last letter in the units.</span>

    <span class="k">my</span> <span class="i">$prefix</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$base</span><span class="s">)</span> <span class="s">{</span>
        <span class="s">(</span><span class="i">$prefix</span><span class="s">)</span> = <span class="i">$units</span> =~ <span class="q">/^([A-Za-z]{0,1})$base$/</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="s">(</span> <span class="i">$prefix</span><span class="cm">,</span> <span class="i">$base</span> <span class="s">)</span> = <span class="i">$units</span> =~ <span class="q">/^([A-Za-z]{0,1})([A-Za-z]{0,1})$/</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">unless</span> <span class="s">(</span> <span class="i">$amount</span> &gt; <span class="n">0</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">return</span> <span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="i">$base</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>                               <span class="c">## if no value to begin with ...</span>

    <span class="c">#unless ($base) {print &quot;Please specify a base.&lt;BR&gt;\n&quot;; return '';}</span>

    <span class="k">my</span> <span class="i">@prefixes</span> = <span class="s">(</span> <span class="q">'y'</span><span class="cm">,</span> <span class="q">'z'</span><span class="cm">,</span> <span class="q">'a'</span><span class="cm">,</span> <span class="q">'f'</span><span class="cm">,</span> <span class="q">'p'</span><span class="cm">,</span> <span class="q">'n'</span><span class="cm">,</span> <span class="q">'u'</span><span class="cm">,</span> <span class="q">'m'</span><span class="cm">,</span> <span class="q">''</span><span class="cm">,</span> <span class="q">'k'</span><span class="cm">,</span> <span class="q">'M'</span><span class="cm">,</span> <span class="q">'G'</span><span class="cm">,</span> <span class="q">'T'</span><span class="cm">,</span> <span class="q">'P'</span><span class="cm">,</span> <span class="q">'E'</span><span class="cm">,</span> <span class="q">'Z'</span><span class="cm">,</span> <span class="q">'Y'</span> <span class="s">)</span><span class="sc">;</span>    <span class="c"># From 1e-24 to 1e24</span>

    <span class="c"># Get the current prefix index</span>
    <span class="k">my</span> <span class="i">$index</span><span class="sc">;</span>
    <span class="k">for</span> <span class="s">(</span> <span class="i">$index</span> = <span class="n">0</span><span class="sc">;</span> <span class="i">$index</span> &lt;= <span class="i">$#prefixes</span><span class="sc">;</span> <span class="i">$index</span>++ <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$prefix</span> <span class="k">eq</span> <span class="i">$prefixes</span>[<span class="i">$index</span>] <span class="s">)</span> <span class="s">{</span><span class="k">last</span><span class="s">}</span>
    <span class="s">}</span>

    <span class="k">unless</span> <span class="s">(</span><span class="i">$index</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Prefix '$prefix' not supported.&lt;BR&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span> <span class="q">''</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">while</span> <span class="s">(</span> <span class="i">$amount</span> &gt;= <span class="n">1000</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$amount</span> /= <span class="n">1000</span><span class="sc">;</span>
        <span class="i">$index</span>++<span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">while</span> <span class="s">(</span> <span class="i">$amount</span> &lt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$amount</span> *= <span class="n">1000</span><span class="sc">;</span>
        <span class="i">$index</span>--<span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="s">(</span> <span class="i">$amount</span><span class="cm">,</span> <span class="q">&quot;$prefixes[$index]$base&quot;</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#################</span>
<a name="get_number-"></a><span class="k">sub </span><span class="m">get_number</span> <span class="s">{</span>
<span class="c">#################</span>
    <span class="c">#</span>
    <span class="c"># print out a number (reduce to K or M if long)</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$number</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">if</span>    <span class="s">(</span> <span class="i">$number</span> =~ <span class="q">/^(\d+)\s?k$/</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="n">1000</span> * <span class="i">$1</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> =~ <span class="q">/^(\d+)\s?M$/</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="n">1000</span> * <span class="n">1000</span> * <span class="i">$1</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> =~ <span class="q">/^(\d+)\s?m$/</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="i">$1</span> / <span class="n">1000.0</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> =~ <span class="q">/^(\d+)\s?u$/</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="i">$1</span> / <span class="n">1000.0</span> / <span class="n">1000.0</span><span class="sc">;</span> <span class="s">}</span>
    <span class="k">else</span>                               <span class="s">{</span> <span class="k">return</span> <span class="i">$number</span><span class="sc">;</span> <span class="s">}</span>
<span class="s">}</span>

<span class="c">###########</span>
<a name="number-"></a><span class="k">sub </span><span class="m">number</span> <span class="s">{</span>
<span class="c">###########</span>
    <span class="c">#</span>
    <span class="c"># print out a number (reduce to K or M if long)</span>
    <span class="c">#</span>
    <span class="k">my</span> <span class="i">$number</span>    = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$decimals</span>  = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$separator</span> = <span class="k">shift</span><span class="sc">;</span>    <span class="c">### include original number if</span>

    <span class="k">my</span> <span class="i">$new_number</span> = <span class="i">$number</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$number</span> &gt; <span class="n">1000000000</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$new_number</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$number</span> / <span class="n">10000000</span> <span class="s">)</span> / <span class="n">100</span> . <span class="q">&quot;G&quot;</span><span class="sc">;</span>

    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> &gt; <span class="n">1000000</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$new_number</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$number</span> / <span class="n">10000</span> <span class="s">)</span> / <span class="n">100</span> . <span class="q">&quot;M&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> &gt; <span class="n">10000</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$new_number</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$number</span> / <span class="n">10</span> <span class="s">)</span> / <span class="n">100</span> . <span class="q">&quot;K&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="c">###### check smallest to biggest if less than 1;</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> &lt; <span class="n">0.000000001</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$new_number</span> = <span class="q">'0'</span><span class="sc">;</span> <span class="s">}</span>    <span class="c">### if &lt; 0.001 u</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> &lt; <span class="n">0.001</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$new_number</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$number</span> * <span class="n">1000000000</span> <span class="s">)</span> / <span class="n">1000</span> . <span class="q">&quot;u&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$number</span> &lt; <span class="n">1</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$new_number</span> = <span class="k">int</span><span class="s">(</span> <span class="i">$number</span> * <span class="n">1000000</span> <span class="s">)</span> / <span class="n">1000</span> . <span class="q">&quot;m&quot;</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$decimals</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$new_number</span> =~ <span class="q">s/(\d\.\d{0,$decimals})\d+/$1/</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$separator</span> &amp;&amp; <span class="s">(</span> <span class="i">$new_number</span> <span class="k">ne</span> <span class="i">$number</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$separator</span> =~ <span class="q">/&lt;/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$new_number</span> = <span class="q">&quot;&lt;B&gt;$new_number&lt;/B&gt;&quot;</span><span class="sc">;</span>
        <span class="s">}</span>    <span class="c">## if html format detected for separator</span>
        <span class="i">$new_number</span> .= <span class="i">$separator</span> . <span class="q">&quot;[$number]&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">return</span> <span class="i">$new_number</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#######################</span>
<a name="Convert_Case-"></a><span class="k">sub </span><span class="m">Convert_Case</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="k">my</span> <span class="i">$string</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$case</span>   = <span class="k">shift</span><span class="sc">;</span>    <span class="c"># either can be 'upper' or 'lower'</span>
    <span class="k">my</span> <span class="i">$range</span>  = <span class="k">shift</span><span class="sc">;</span>    <span class="c"># which letters to apply (in a range).  If not provide, then all letters are applied.</span>

    <span class="k">my</span> <span class="i">$before</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$match</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$after</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$len</span> = <span class="k">length</span><span class="s">(</span><span class="i">$string</span><span class="s">)</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$range</span> =~ <span class="q">/(\d+)-(d+)/</span> <span class="s">)</span> <span class="s">{</span>    <span class="c"># Range provided.</span>
        <span class="i">$before</span> = <span class="k">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span>      <span class="i">$1</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$match</span>  = <span class="k">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="i">$1</span><span class="cm">,</span>     <span class="i">$2</span> - <span class="i">$1</span> + <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$after</span>  = <span class="k">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="i">$2</span> + <span class="n">1</span><span class="cm">,</span> <span class="i">$len</span> - <span class="i">$2</span> - <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$range</span> =~ <span class="q">/(\d+)/</span> <span class="s">)</span> <span class="s">{</span>      <span class="c"># Only apply to 1 letter.</span>
        <span class="i">$before</span> = <span class="k">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="n">0</span><span class="cm">,</span>      <span class="i">$1</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$match</span>  = <span class="k">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="i">$1</span><span class="cm">,</span>     <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
        <span class="i">$after</span>  = <span class="k">substr</span><span class="s">(</span> <span class="i">$string</span><span class="cm">,</span> <span class="i">$1</span> + <span class="n">1</span><span class="cm">,</span> <span class="i">$len</span> - <span class="i">$1</span> - <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>                             <span class="c"># No range provided. Apply to all characters.</span>
        <span class="i">$before</span> = <span class="q">''</span><span class="sc">;</span>
        <span class="i">$match</span>  = <span class="i">$string</span><span class="sc">;</span>
        <span class="i">$after</span>  = <span class="q">''</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$case</span> =~ <span class="q">/upper/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$string</span> = <span class="i">$before</span> . <span class="k">uc</span><span class="s">(</span><span class="i">$match</span><span class="s">)</span> . <span class="i">$after</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">elsif</span> <span class="s">(</span> <span class="i">$case</span> =~ <span class="q">/lower/i</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$string</span> = <span class="i">$before</span> . <span class="k">lc</span><span class="s">(</span><span class="i">$match</span><span class="s">)</span> . <span class="i">$after</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="i">$string</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#####################################################</span>
<span class="c"># Allow user to specify a custom conversion scale</span>
<span class="c"># and convert the value to either the specified units</span>
<span class="c"># or the optimal units</span>
<span class="c">#####################################################</span>
<a name="Custom_Convert_Units-"></a><span class="k">sub </span><span class="m">Custom_Convert_Units</span> <span class="s">{</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">@_</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$value</span>           = <span class="i">$args</span>{-<span class="w">value</span>}<span class="sc">;</span>             <span class="c"># The value to convert from</span>
    <span class="k">my</span> <span class="i">$units</span>           = <span class="i">$args</span>{-<span class="w">units</span>}<span class="sc">;</span>             <span class="c"># The value units to conver from</span>
    <span class="k">my</span> <span class="i">$scale</span>           = <span class="i">$args</span>{-<span class="w">scale</span>}<span class="sc">;</span>             <span class="c"># The scale to be used. Must start from lowest to highest.</span>
    <span class="k">my</span> <span class="i">$scale_units</span>     = <span class="i">$args</span>{ - <span class="w">scale_units</span> }<span class="sc">;</span>    <span class="c"># The scale units to be used. Must start from lowest to highest.</span>
    <span class="k">my</span> <span class="i">$converted_units</span> = <span class="i">$args</span>{-<span class="w">to</span>} || <span class="q">'auto'</span><span class="sc">;</span>      <span class="c"># The units to conver to.  Default is 'auto', in which the optimal units is automatically determined.</span>
    <span class="k">my</span> <span class="i">$decimals</span>        = <span class="i">$args</span>{ - <span class="w">decimals</span> }<span class="sc">;</span>       <span class="c"># The number of decimals to display for the converted value</span>

    <span class="i">$scale</span>       = <span class="i">Cast_List</span><span class="s">(</span> -<span class="w">list</span> <span class="cm">=&gt;</span> <span class="i">$scale</span><span class="cm">,</span>       -<span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">'arrayref'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="i">$scale_units</span> = <span class="i">Cast_List</span><span class="s">(</span> -<span class="w">list</span> <span class="cm">=&gt;</span> <span class="i">$scale_units</span><span class="cm">,</span> -<span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">'arrayref'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="c"># Check inputs</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="k">defined</span> <span class="i">$value</span> &amp;&amp; <span class="k">defined</span> <span class="i">$units</span> &amp;&amp; <span class="k">defined</span> <span class="i">$scale</span> &amp;&amp; <span class="k">defined</span> <span class="i">$scale_units</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;Missing arguments.&lt;br&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="k">int</span><span class="s">(</span><span class="i">@$scale</span><span class="s">)</span> == <span class="k">int</span><span class="s">(</span><span class="i">@$scale_units</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;The number of elements in -scale (&quot;</span> . <span class="k">int</span><span class="s">(</span><span class="i">@$scale</span><span class="s">)</span> . <span class="q">&quot;) does NOT match the number of elements in -scale_units (&quot;</span> . <span class="k">int</span><span class="s">(</span><span class="i">@$scale_units</span><span class="s">)</span> . <span class="q">&quot;).&lt;br&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="k">grep</span> <span class="q">/^$units$/i</span><span class="cm">,</span> <span class="i">@$scale_units</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;The units provided ($units) is invalid.&lt;br&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$converted_units</span> =~ <span class="q">/auto/i</span> <span class="s">)</span> || <span class="s">(</span> <span class="k">grep</span> <span class="q">/^$converted_units$/i</span><span class="cm">,</span> <span class="i">@$scale_units</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;The units to convert to ($converted_units) is invalid.&lt;br&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">unless</span> <span class="s">(</span> <span class="s">(</span> !<span class="k">defined</span> <span class="i">$decimals</span> <span class="s">)</span> || <span class="i">$decimals</span> =~ <span class="q">/^\d+$/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">print</span> <span class="q">&quot;You can only specify numeric values for the -decimal arugment.&lt;br&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">return</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="c"># Figure out the current scale index</span>
    <span class="k">my</span> <span class="i">$curr_index</span> = <span class="n">0</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$su</span> <span class="s">(</span><span class="i">@$scale_units</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$su</span> =~ <span class="q">/^$units$/i</span> <span class="s">)</span> <span class="s">{</span><span class="k">last</span><span class="s">}</span>
        <span class="i">$curr_index</span>++<span class="sc">;</span>
    <span class="s">}</span>

    <span class="c"># Now do the conversion</span>
    <span class="k">my</span> <span class="i">$converted_value</span> = <span class="i">$value</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$converted_units</span> =~ <span class="q">/auto/i</span> <span class="s">)</span> <span class="s">{</span>    <span class="c"># Automatically figure out the optimal units</span>
                                            <span class="c"># Convert to lowest units</span>
        <span class="i">$converted_value</span> *= <span class="s">(</span> <span class="i">$scale</span>-&gt;[<span class="i">$curr_index</span>] / <span class="i">$scale</span>-&gt;[<span class="n">0</span>] <span class="s">)</span><span class="sc">;</span>
        <span class="i">$curr_index</span>      = <span class="n">0</span><span class="sc">;</span>
        <span class="i">$converted_units</span> = <span class="i">$scale_units</span>-&gt;[<span class="n">0</span>]<span class="sc">;</span>

        <span class="c">#print &quot;CV: $converted_value; CI: $curr_index\n&quot;;</span>

        <span class="k">while</span> <span class="s">(</span> <span class="s">(</span> <span class="i">$converted_value</span> &gt;= <span class="s">(</span> <span class="i">$scale</span>-&gt;[ <span class="i">$curr_index</span> + <span class="n">1</span> ] / <span class="i">$scale</span>-&gt;[<span class="i">$curr_index</span>] <span class="s">)</span> <span class="s">)</span> &amp;&amp; <span class="s">(</span> <span class="i">$curr_index</span> &lt; <span class="i">$#$scale</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$converted_value</span> *= <span class="s">(</span> <span class="i">$scale</span>-&gt;[<span class="i">$curr_index</span>] / <span class="i">$scale</span>-&gt;[ <span class="i">$curr_index</span> + <span class="n">1</span> ] <span class="s">)</span><span class="sc">;</span>
            <span class="i">$converted_units</span> = <span class="i">$scale_units</span>-&gt;[ <span class="i">$curr_index</span> + <span class="n">1</span> ]<span class="sc">;</span>
            <span class="i">$curr_index</span>++<span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>    <span class="c"># Convert to specified units</span>
              <span class="c"># Figure out the target index</span>
        <span class="k">my</span> <span class="i">$tar_index</span> = <span class="n">0</span><span class="sc">;</span>
        <span class="k">foreach</span> <span class="k">my</span> <span class="i">$su</span> <span class="s">(</span><span class="i">@$scale_units</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">if</span> <span class="s">(</span> <span class="i">$su</span> =~ <span class="q">/^$converted_units$/i</span> <span class="s">)</span> <span class="s">{</span><span class="k">last</span><span class="s">}</span>
            <span class="i">$tar_index</span>++<span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">my</span> <span class="i">$factor</span> = <span class="i">$scale</span>-&gt;[<span class="i">$curr_index</span>] / <span class="i">$scale</span>-&gt;[<span class="i">$tar_index</span>]<span class="sc">;</span>
        <span class="i">$converted_value</span> = <span class="i">$converted_value</span> * <span class="i">$factor</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="k">defined</span> <span class="i">$decimals</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$converted_value</span> = <span class="k">sprintf</span><span class="s">(</span> <span class="q">&quot;%.${decimals}f&quot;</span><span class="cm">,</span> <span class="i">$converted_value</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="s">(</span> <span class="i">$converted_value</span><span class="cm">,</span> <span class="i">$converted_units</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#######################</span>
<a name="convert_volume-"></a><span class="k">sub </span><span class="m">convert_volume</span> <span class="s">{</span>
<span class="c">#######################</span>
    <span class="k">my</span> <span class="i">$volume</span>       = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$units</span>        = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$target_units</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@scale</span> = <span class="s">(</span> <span class="n">1</span> / <span class="n">1000000000</span><span class="cm">,</span> <span class="n">1</span> / <span class="n">1000000</span><span class="cm">,</span> <span class="n">1</span> / <span class="n">1000</span><span class="cm">,</span> <span class="n">1</span><span class="cm">,</span> <span class="n">1000</span><span class="cm">,</span> <span class="n">4000</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@scale_units</span> = <span class="s">(</span> <span class="q">'pl'</span><span class="cm">,</span> <span class="q">'nl'</span><span class="cm">,</span> <span class="q">'ul'</span><span class="cm">,</span> <span class="q">'ml'</span><span class="cm">,</span> <span class="q">'l'</span><span class="cm">,</span> <span class="q">'gallons'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span> <span class="i">$units</span> =~ <span class="q">/g$/i</span> <span class="s">)</span> <span class="s">{</span> <span class="k">return</span> <span class="s">(</span> <span class="i">$volume</span><span class="cm">,</span> <span class="i">$units</span> <span class="s">)</span> <span class="s">}</span>    <span class="c">## ignore mass measurements</span>
    <span class="k">return</span> <span class="i">Custom_Convert_Units</span><span class="s">(</span> -<span class="w">value</span> <span class="cm">=&gt;</span> <span class="i">$volume</span><span class="cm">,</span> -<span class="w">units</span> <span class="cm">=&gt;</span> <span class="i">$units</span><span class="cm">,</span> -<span class="w">to</span> <span class="cm">=&gt;</span> <span class="i">$target_units</span><span class="cm">,</span> -<span class="w">scale</span> <span class="cm">=&gt;</span> \<span class="i">@scale</span><span class="cm">,</span> -<span class="w">scale_units</span> <span class="cm">=&gt;</span> \<span class="i">@scale_units</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#####################</span>
<a name="wiki_to_HTML-"></a><span class="k">sub </span><span class="m">wiki_to_HTML</span> <span class="s">{</span>
<span class="c">#####################</span>
    <span class="k">my</span> <span class="i">$text</span> = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$config</span> = <span class="s">{</span>
        <span class="q">'h'</span>   <span class="cm">=&gt;</span> <span class="q">'h'</span><span class="cm">,</span>
        <span class="q">'li'</span>  <span class="cm">=&gt;</span> <span class="q">'LI'</span><span class="cm">,</span>
        <span class="q">'ul'</span>  <span class="cm">=&gt;</span> <span class="q">'UL'</span><span class="cm">,</span>
        <span class="q">'il'</span>  <span class="cm">=&gt;</span> <span class="q">'OL'</span><span class="cm">,</span>
        <span class="q">'img'</span> <span class="cm">=&gt;</span> <span class="q">'IMG SRC'</span><span class="cm">,</span>
        <span class="q">'ref'</span> <span class="cm">=&gt;</span> <span class="q">'A HREF'</span><span class="cm">,</span>
    <span class="s">}</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">wiki_to_xml</span><span class="s">(</span> <span class="i">$text</span><span class="cm">,</span> <span class="i">$config</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#####################</span>
<span class="c"># Useful for converting HTML to other XML format (eg XMLmind)</span>
<span class="c">#</span>
<span class="c">#     my %config = {</span>
<span class="c">#        'b'      =&gt; 'emphasis'</span>
<span class="c"># 	'h'      =&gt; 'title',</span>
<span class="c"># 	'li'     =&gt; 'listitem',</span>
<span class="c"># 	'ul'     =&gt; 'itemizedlist',</span>
<span class="c"># 	'ol'     =&gt; 'orderedlist',</span>
<span class="c"># 	'img'    =&gt; 'graphic fileref',</span>
<span class="c"># 	'A Href'    =&gt; 'ulink url',</span>
<span class="c">#     };</span>
<span class="c">#</span>
<span class="c"># my $converted_text = convert_tags($text,\%config);</span>
<span class="c">#</span>
<span class="c"># Return: converted text string</span>
<span class="c">######################</span>
<a name="convert_tags-"></a><span class="k">sub </span><span class="m">convert_tags</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">&amp;filter_input</span><span class="s">(</span>
         \<span class="i">@_</span><span class="cm">,</span>
        -<span class="w">args</span>      <span class="cm">=&gt;</span> <span class="q">'text,convert'</span><span class="cm">,</span>
        -<span class="w">mandatory</span> <span class="cm">=&gt;</span> <span class="q">'text,convert'</span>
    <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$text</span>         = <span class="i">$args</span>{-<span class="w">text</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$convert</span>      = <span class="i">$args</span>{-<span class="w">convert</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$self_closing</span> = <span class="i">$args</span>{-<span class="w">self_closing</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$quiet</span>        = <span class="i">$args</span>{-<span class="w">quiet</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">@self_closing_tags</span> = <span class="i">@$self_closing</span> <span class="k">if</span> <span class="i">$self_closing</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@tags</span>              = <span class="k">keys</span> <span class="i">%$convert</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@new_tags</span>          = <span class="k">values</span> <span class="i">%$convert</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">%Key</span> = <span class="i">%</span>{<span class="i">$convert</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="s">(</span> <span class="i">$fixed_sct</span><span class="cm">,</span> <span class="i">$fixed_tag</span> <span class="s">)</span> = <span class="s">(</span> <span class="n">0</span><span class="cm">,</span> <span class="n">0</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">print</span> <span class="q">&quot;Converting Tags:\n&quot;</span><span class="sc">;</span>
    <span class="k">print</span> <span class="q">&quot;*&quot;</span> x <span class="n">40</span> . <span class="q">&quot;\n&quot;</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$tag</span> <span class="s">(</span><span class="i">@self_closing_tags</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$new_tag</span> = <span class="i">$Key</span>{<span class="i">$tag</span>}<span class="sc">;</span>
        <span class="i">Message</span><span class="s">(</span><span class="q">&quot;$tag -&gt; $new_tag&quot;</span><span class="s">)</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
        <span class="k">while</span> <span class="s">(</span> <span class="i">$text</span> =~ <span class="q">s /&lt;$tag([^&gt;]*?)\/&gt;/&lt;$new_tag$1\/&gt;/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$fixed_sct</span>++<span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$tag</span> <span class="s">(</span><span class="i">@tags</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">my</span> <span class="i">$new_tag</span> = <span class="i">$Key</span>{<span class="i">$tag</span>}<span class="sc">;</span>
        <span class="k">my</span> <span class="s">(</span><span class="i">$stop_tag</span><span class="s">)</span>     = <span class="k">split</span> <span class="q">' '</span><span class="cm">,</span> <span class="i">$tag</span><span class="sc">;</span>
        <span class="k">my</span> <span class="s">(</span><span class="i">$new_stop_tag</span><span class="s">)</span> = <span class="k">split</span> <span class="q">' '</span><span class="cm">,</span> <span class="i">$new_tag</span><span class="sc">;</span>
        <span class="i">Message</span><span class="s">(</span><span class="q">&quot;$tag -&gt; $new_tag .. /$new_stop_tag&quot;</span><span class="s">)</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
        <span class="k">while</span> <span class="s">(</span> <span class="i">$text</span> =~ <span class="q">s /&lt;$tag(.*?)&lt;\/$stop_tag&gt;/&lt;$new_tag$1&lt;\/$new_stop_tag&gt;/i</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$fixed_tag</span>++<span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="k">print</span> <span class="q">&quot;*&quot;</span> x <span class="n">40</span> . <span class="q">&quot;\n&quot;</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$copy</span> = <span class="i">$text</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@unidentified_tags</span><span class="sc">;</span>

    <span class="k">while</span> <span class="s">(</span> <span class="i">$copy</span> =~ <span class="q">s/^(.*?)&lt;(\w+)(.*)$/$3/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">push</span> <span class="i">@unidentified_tags</span><span class="cm">,</span> <span class="i">$2</span> <span class="k">unless</span> <span class="k">grep</span> <span class="q">/^$2/</span><span class="cm">,</span> <span class="i">@new_tags</span><span class="cm">,</span> <span class="i">@unidentified_tags</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="i">Message</span><span class="s">(</span><span class="q">&quot;Found $fixed_tag defined tags + $fixed_sct self-closing tags&quot;</span><span class="s">)</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">@unidentified_tags</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">Message</span><span class="s">(</span><span class="q">&quot;Warning: found unidentified tags:&quot;</span><span class="s">)</span><span class="sc">;</span>
        <span class="k">print</span> <span class="k">join</span> <span class="q">&quot;\n &quot;</span><span class="cm">,</span> <span class="i">@unidentified_tags</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="i">$text</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#################</span>
<a name="escape_regex_special_chars-"></a><span class="k">sub </span><span class="m">escape_regex_special_chars</span> <span class="s">{</span>
<span class="c">#################</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">&amp;filter_input</span><span class="s">(</span> \<span class="i">@_</span><span class="cm">,</span> -<span class="w">args</span> <span class="cm">=&gt;</span> <span class="q">'pattern,preserve'</span><span class="cm">,</span> -<span class="w">mandatory</span> <span class="cm">=&gt;</span> <span class="q">'pattern'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$pattern</span> = <span class="i">$args</span>{-<span class="w">pattern</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$preserve</span> = <span class="i">Cast_List</span><span class="s">(</span> -<span class="w">list</span> <span class="cm">=&gt;</span> <span class="i">$args</span>{-<span class="w">preserve</span>}<span class="cm">,</span> -<span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">'string'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$spec_chars</span> = <span class="q">'()[]^$|*.'</span><span class="sc">;</span>

    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$char</span> <span class="s">(</span> <span class="k">split</span> <span class="q">''</span><span class="cm">,</span> <span class="i">$preserve</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$char</span> = <span class="q">'\\'</span> . <span class="i">$char</span><span class="sc">;</span>
        <span class="i">$spec_chars</span> =~ <span class="q">s/$char//</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$char</span> <span class="s">(</span> <span class="k">split</span> <span class="q">''</span><span class="cm">,</span> <span class="i">$spec_chars</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$char</span> = <span class="q">'\\'</span> . <span class="i">$char</span><span class="sc">;</span>
        <span class="i">$pattern</span> =~ <span class="q">s/$char/$char/g</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">return</span> <span class="i">$pattern</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">####################</span>
<a name="HTML_to_xml-"></a><span class="k">sub </span><span class="m">HTML_to_xml</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="k">my</span> <span class="i">$text</span>       = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$config_ref</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$quiet</span>      = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$config</span><span class="sc">;</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$config_ref</span><span class="s">)</span> <span class="s">{</span> <span class="i">$config</span> = <span class="i">$config_ref</span> <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="i">$config</span> = <span class="s">{</span>
            <span class="c">## xml mind configuration ##</span>
            <span class="q">'b'</span>       <span class="cm">=&gt;</span> <span class="q">'emphasis'</span><span class="cm">,</span>
            <span class="q">'h'</span>       <span class="cm">=&gt;</span> <span class="q">'title'</span><span class="cm">,</span>
            <span class="q">'li'</span>      <span class="cm">=&gt;</span> <span class="q">'listitem'</span><span class="cm">,</span>
            <span class="q">'ul'</span>      <span class="cm">=&gt;</span> <span class="q">'itemizedlist'</span><span class="cm">,</span>
            <span class="q">'ol'</span>      <span class="cm">=&gt;</span> <span class="q">'orderedlist'</span><span class="cm">,</span>
            <span class="q">'img src'</span> <span class="cm">=&gt;</span> <span class="q">'graphic fileref'</span><span class="cm">,</span>
            <span class="q">'A Href'</span>  <span class="cm">=&gt;</span> <span class="q">'ulink url'</span><span class="cm">,</span>
            <span class="q">'table'</span>   <span class="cm">=&gt;</span> <span class="q">'table'</span><span class="cm">,</span>
            <span class="q">'tr'</span>      <span class="cm">=&gt;</span> <span class="q">'row'</span><span class="cm">,</span>
            <span class="q">'td'</span>      <span class="cm">=&gt;</span> <span class="q">'entry'</span><span class="cm">,</span>
        <span class="s">}</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="i">convert_tags</span><span class="s">(</span> <span class="i">$text</span><span class="cm">,</span> <span class="i">$config</span><span class="cm">,</span> -<span class="w">self_closing</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">'img src'</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#</span>
<span class="c">#</span>
<span class="c"># Convert standard wiki to HTML format</span>
<span class="c">######################</span>
<a name="wiki_to_xml_old-"></a><span class="k">sub </span><span class="m">wiki_to_xml_old</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">$text</span>   = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$config</span> = <span class="k">shift</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$quiet</span>  = <span class="k">shift</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@lines</span> = <span class="k">split</span> <span class="q">&quot;\n&quot;</span><span class="cm">,</span> <span class="i">$text</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@std_keys</span> = <span class="k">keys</span> <span class="i">%$config</span><span class="sc">;</span>    <span class="c"># qw(h b i u li ul ol img ref tr td);</span>

    <span class="k">my</span> <span class="i">%key</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$std_key</span> <span class="s">(</span><span class="i">@std_keys</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$key</span>{<span class="i">$std_key</span>} = <span class="i">$config</span>-&gt;{ <span class="k">lc</span><span class="s">(</span><span class="i">$std_key</span><span class="s">)</span> } || <span class="i">$config</span>-&gt;{ <span class="k">uc</span><span class="s">(</span><span class="i">$std_key</span><span class="s">)</span> } || <span class="i">$std_key</span><span class="sc">;</span>
        <span class="s">(</span> <span class="i">$key</span>{<span class="q">&quot;stop_$std_key&quot;</span>} <span class="s">)</span> = <span class="k">split</span> <span class="q">' '</span><span class="cm">,</span> <span class="i">$key</span>{<span class="i">$std_key</span>}<span class="sc">;</span>    <span class="c">### strip possible parameters from end tag</span>
        <span class="k">print</span> <span class="q">&quot;convert key: $std_key .. $std_key\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">print</span> <span class="i">Dumper</span> \<span class="i">%key</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@html_lines</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$bullets_on</span> = <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$table_on</span>   = <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@sections</span>   = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@stops</span>      = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$line</span> <span class="s">(</span><span class="i">@lines</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">chomp</span> <span class="i">$line</span><span class="sc">;</span>
        <span class="i">$line</span> =~ <span class="q">s/\bh(\d+)\.(.*)$/&lt;$key{h}$1&gt;$2&lt;\/$key{stop_h}$1&gt;/ig</span><span class="sc">;</span>
        <span class="i">$line</span> =~ <span class="q">s/\*(\w.*?\w)\*/&lt;$key{b}&gt;$1&lt;\/$key{stop_b}&gt;/ig</span><span class="sc">;</span>         <span class="c">## bold</span>
        <span class="i">$line</span> =~ <span class="q">s/\b\_(\w.*?\w)\_\b/&lt;$key{i}&gt;$1&lt;\/$key{stop_i}&gt;/ig</span><span class="sc">;</span>     <span class="c">## bold</span>
        <span class="i">$line</span> =~ <span class="q">s/\+(\w.*?\w)\+/&lt;$key{u}&gt;$1&lt;\/$key{stop_u}&gt;/ig</span><span class="sc">;</span>         <span class="c">## bold</span>

        <span class="c">## Tables ##</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$line</span> =~ <span class="q">/^\|(.+)\|(.*)/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$line</span> = <span class="q">&quot;$1|$2&quot;</span><span class="sc">;</span>                                             <span class="c"># trim leading row identifier #</span>
            <span class="k">my</span> <span class="i">@row</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">@cols</span> = <span class="k">split</span> <span class="q">/\|/</span><span class="cm">,</span> <span class="i">$line</span><span class="sc">;</span>

            <span class="k">unless</span> <span class="s">(</span><span class="i">$table_on</span><span class="s">)</span> <span class="s">{</span>
                <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{table}&gt;\n&quot;</span><span class="sc">;</span>
                <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;title&gt;&lt;/title&gt;\n &lt;tgroup cols=\&quot;&quot;</span> . <span class="k">int</span><span class="s">(</span><span class="i">@cols</span><span class="s">)</span> . <span class="q">&quot;\&quot;&gt;\n  &lt;tbody&gt;\n&quot;</span><span class="sc">;</span>    <span class="c">## xml mind</span>
                <span class="i">$table_on</span> = <span class="n">1</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{tr}&gt;\n &lt;$key{td}&gt;&quot;</span><span class="sc">;</span>
            <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="k">join</span> <span class="q">&quot;&lt;\/$key{stop_td}&gt;\n &lt;$key{td}&gt;&quot;</span><span class="cm">,</span> <span class="i">@cols</span><span class="sc">;</span>
            <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_td}&gt;\n&lt;\/$key{stop_tr}&gt;\n&quot;</span><span class="sc">;</span>
            <span class="i">$line</span> = <span class="k">join</span> <span class="q">''</span><span class="cm">,</span> <span class="i">@row</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span><span class="i">$table_on</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;  &lt;/tbody&gt;\n &lt;/tgroup&gt;\n&quot;</span><span class="sc">;</span>                                            <span class="c">## xml mind</span>
            <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_table}&gt;\n&quot;</span><span class="sc">;</span>
            <span class="i">$table_on</span> = <span class="n">0</span><span class="sc">;</span>
        <span class="s">}</span>

        <span class="c">## Bullets ##</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$line</span> =~ <span class="q">s/^([\*\#]+)\s+(.*)$/$2/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$type</span>    = <span class="i">$1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$indents</span> = <span class="k">length</span><span class="s">(</span><span class="i">$type</span><span class="s">)</span><span class="sc">;</span>
            <span class="k">if</span>   <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/\#/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$type</span> = <span class="q">'ol'</span> <span class="s">}</span>
            <span class="k">else</span>                   <span class="s">{</span> <span class="i">$type</span> = <span class="q">'ul'</span> <span class="s">}</span>

            <span class="k">if</span> <span class="s">(</span> !<span class="i">$bullets_on</span> &amp;&amp; !<span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$bullets_on</span> == <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_li}&gt;\n&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$bullets_on</span> &lt; <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$bullets_on</span>++<span class="sc">;</span>
                <span class="k">foreach</span> <span class="k">my</span> <span class="i">$in</span> <span class="s">(</span> <span class="i">$bullets_on</span> .. <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{$type}&gt;\n&quot;</span><span class="sc">;</span>
                    <span class="k">print</span> <span class="q">'+'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
                    <span class="k">push</span> <span class="i">@stops</span><span class="cm">,</span> <span class="q">&quot;&lt;\/&quot;</span> . <span class="i">$key</span>{<span class="q">&quot;stop_$type&quot;</span>} . <span class="q">&quot;&gt;\n&quot;</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$bullets_on</span> &gt; <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$bullets_on</span>--<span class="sc">;</span>
                <span class="k">foreach</span> <span class="k">my</span> <span class="i">$out</span> <span class="s">(</span> <span class="i">$indents</span> .. <span class="i">$bullets_on</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_li}&gt;\n&quot;</span><span class="sc">;</span>
                    <span class="k">my</span> <span class="i">$stop</span> = <span class="k">shift</span> <span class="i">@stops</span><span class="sc">;</span>
                    <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="i">$stop</span><span class="sc">;</span>
                    <span class="k">print</span> <span class="q">'-'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="i">Message</span><span class="s">(</span><span class="q">&quot;NO OTHER POSSIBILITY&quot;</span><span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
        <span class="c">## close bullets ##</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="k">while</span> <span class="s">(</span><span class="i">$bullets_on</span><span class="s">)</span> <span class="s">{</span>
                <span class="i">$bullets_on</span>--<span class="sc">;</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;\n &lt;\/$key{stop_li}&gt;\n&lt;\/$key{stop_ul}&gt;\n&quot;</span><span class="sc">;</span>
                <span class="k">print</span> <span class="q">'-'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>

        <span class="c">## special tags ##</span>
        <span class="i">$line</span> =~ <span class="q">s/\[(.*?)\|(.*?)\]/&lt;$key{ref}=$2&gt;$1&lt;\/$key{stop_ref}&gt;/g</span><span class="sc">;</span>    <span class="c">## ref with text</span>
        <span class="i">$line</span> =~ <span class="q">s/\[(.*?)\]/&lt;$key{ref}=$1&gt;$1&lt;\/$key{stop_ref}&gt;/g</span><span class="sc">;</span>           <span class="c">## explicit ref</span>

        <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="i">$line</span><span class="sc">;</span>

        <span class="c">#	push @html_lines, &quot;&lt;BR&gt;\n&quot;;</span>
        <span class="k">print</span> <span class="q">&quot;** $line ** ($bullets_on)\n&quot;</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">while</span> <span class="s">(</span><span class="i">$bullets_on</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$bullets_on</span>--<span class="sc">;</span>
        <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;\n &lt;\/$key{stop_li}&gt;\n&lt;\/$key{stop_ul}&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">print</span> <span class="q">'-'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="k">join</span> <span class="q">&quot;\n&quot;</span><span class="cm">,</span> <span class="i">@html_lines</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">#</span>
<span class="c">#</span>
<span class="c"># Convert standard wiki to HTML format</span>
<span class="c">######################</span>
<a name="wiki_to_xml-"></a><span class="k">sub </span><span class="m">wiki_to_xml</span> <span class="s">{</span>
<span class="c">######################</span>
    <span class="k">my</span> <span class="i">%args</span>     = <span class="i">&amp;filter_input</span><span class="s">(</span> \<span class="i">@_</span><span class="cm">,</span> -<span class="w">args</span> <span class="cm">=&gt;</span> <span class="q">'text,config,quiet'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$text</span>     = <span class="i">$args</span>{-<span class="w">text</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$config</span>   = <span class="i">$args</span>{-<span class="w">config</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$quiet</span>    = <span class="i">$args</span>{-<span class="w">quiet</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$xml_mind</span> = <span class="i">$args</span>{-<span class="w">xml_mind</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">@lines</span> = <span class="k">split</span> <span class="q">&quot;\n&quot;</span><span class="cm">,</span> <span class="i">$text</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@std_keys</span> = <span class="k">keys</span> <span class="i">%$config</span><span class="sc">;</span>    <span class="c"># qw(h b i u li ul ol img ref tr td);</span>

    <span class="k">my</span> <span class="i">%key</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$std_key</span> <span class="s">(</span><span class="i">@std_keys</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$key</span>{<span class="i">$std_key</span>} = <span class="i">$config</span>-&gt;{ <span class="k">lc</span><span class="s">(</span><span class="i">$std_key</span><span class="s">)</span> } || <span class="i">$config</span>-&gt;{ <span class="k">uc</span><span class="s">(</span><span class="i">$std_key</span><span class="s">)</span> } || <span class="i">$std_key</span><span class="sc">;</span>
        <span class="s">(</span> <span class="i">$key</span>{<span class="q">&quot;stop_$std_key&quot;</span>} <span class="s">)</span> = <span class="k">split</span> <span class="q">' '</span><span class="cm">,</span> <span class="i">$key</span>{<span class="i">$std_key</span>}<span class="sc">;</span>    <span class="c">### strip possible parameters from end tag</span>
        <span class="k">print</span> <span class="q">&quot;convert key: $std_key .. $std_key\n&quot;</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">print</span> <span class="i">Dumper</span> \<span class="i">%key</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">@html_lines</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$bullets_on</span> = <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$table_on</span>   = <span class="n">0</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@sections</span>   = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">@stops</span>      = <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="i">$line</span> <span class="s">(</span><span class="i">@lines</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">chomp</span> <span class="i">$line</span><span class="sc">;</span>
        <span class="k">if</span> <span class="s">(</span><span class="i">$xml_mind</span><span class="s">)</span> <span class="s">{</span>
            <span class="c">### special handling for headers ###</span>
            <span class="k">if</span> <span class="s">(</span> <span class="i">$line</span> =~ <span class="q">s/\bh(\d+)\.(.*)$/&lt;section&gt;&lt;$key{h}&gt;$2&lt;\/$key{stop_h}&gt;/ig</span> <span class="s">)</span> <span class="s">{</span>
                <span class="c">## customized for xml mind to make headers define sections ##</span>
                <span class="k">my</span> <span class="i">$hlevel</span> = <span class="i">$1</span><span class="sc">;</span>
                <span class="k">print</span> <span class="q">&quot;Current Sections: @sections\n&quot;</span><span class="sc">;</span>
                <span class="k">if</span> <span class="s">(</span> <span class="i">@sections</span> &amp;&amp; <span class="s">(</span> <span class="i">$sections</span>[<span class="n">-1</span>] &gt;= <span class="i">$hlevel</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>    <span class="c">## -&gt; close and open new section</span>
                    <span class="k">while</span> <span class="s">(</span> <span class="i">@sections</span> &amp;&amp; <span class="s">(</span> <span class="i">$sections</span>[<span class="n">-1</span>] &gt;= <span class="i">$hlevel</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
                        <span class="i">$line</span> =~ <span class="q">s /&lt;section&gt;/\n&lt;\/section&gt;\n&lt;section&gt;/</span><span class="sc">;</span>
                        <span class="k">print</span> <span class="q">&quot;&gt;&gt; open ($hlevel) / close ($sections[-1])&quot;</span><span class="sc">;</span>
                        <span class="k">pop</span> <span class="i">@sections</span><span class="sc">;</span>
                    <span class="s">}</span>
                <span class="s">}</span>
                <span class="k">else</span> <span class="s">{</span>                                                <span class="c"># ($sections[-1] &gt; $hlevel) {</span>
                    <span class="c">## ok just open subsection ##</span>
                    <span class="k">print</span> <span class="q">&quot;&gt;&gt; new level ($hlevel)\n&quot;</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span> <span class="i">@sections</span><span class="cm">,</span> <span class="i">$hlevel</span><span class="sc">;</span>
            <span class="s">}</span>    <span class="c">## header forced to a new section</span>
        <span class="s">}</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="i">$line</span> =~ <span class="q">s/\bh(\d+)\.(.*)$/&lt;section&gt;&lt;$key{h}$1&gt;$2&lt;\/$key{stop_h}$1&gt;/ig</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="i">$line</span> =~ <span class="q">s/\*(\w.*?\w)\*/&lt;$key{b}&gt;$1&lt;\/$key{stop_b}&gt;/ig</span><span class="sc">;</span>        <span class="c">## bold</span>
        <span class="i">$line</span> =~ <span class="q">s/\b\_(\w.*?\w)\_\b/&lt;$key{i}&gt;$1&lt;\/$key{stop_i}&gt;/ig</span><span class="sc">;</span>    <span class="c">## bold</span>
        <span class="i">$line</span> =~ <span class="q">s/\+(\w.*?\w)\+/&lt;$key{u}&gt;$1&lt;\/$key{stop_u}&gt;/ig</span><span class="sc">;</span>        <span class="c">## bold</span>

        <span class="c">## Tables ##</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$line</span> =~ <span class="q">/^\|(.+)\|(.*)/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="i">$line</span> = <span class="q">&quot;$1|$2&quot;</span><span class="sc">;</span>                                            <span class="c"># trim leading row identifier #</span>
            <span class="k">my</span> <span class="i">@row</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">@cols</span> = <span class="k">split</span> <span class="q">/\|/</span><span class="cm">,</span> <span class="i">$line</span><span class="sc">;</span>

            <span class="k">unless</span> <span class="s">(</span><span class="i">$table_on</span><span class="s">)</span> <span class="s">{</span>
                <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{table}&gt;\n&quot;</span><span class="sc">;</span>
                <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;title&gt;&lt;/title&gt;\n &lt;tgroup cols=\&quot;&quot;</span> . <span class="k">int</span><span class="s">(</span><span class="i">@cols</span><span class="s">)</span> . <span class="q">&quot;\&quot;&gt;\n  &lt;tbody&gt;\n&quot;</span><span class="sc">;</span>    <span class="c">## xml mind</span>
                <span class="i">$table_on</span> = <span class="n">1</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{tr}&gt;\n &lt;$key{td}&gt;&quot;</span><span class="sc">;</span>
            <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="k">join</span> <span class="q">&quot;&lt;\/$key{stop_td}&gt;\n &lt;$key{td}&gt;&quot;</span><span class="cm">,</span> <span class="i">@cols</span><span class="sc">;</span>
            <span class="k">push</span> <span class="i">@row</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_td}&gt;\n&lt;\/$key{stop_tr}&gt;\n&quot;</span><span class="sc">;</span>
            <span class="i">$line</span> = <span class="k">join</span> <span class="q">''</span><span class="cm">,</span> <span class="i">@row</span><span class="sc">;</span>
        <span class="s">}</span>
        <span class="k">elsif</span> <span class="s">(</span><span class="i">$table_on</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;  &lt;/tbody&gt;\n &lt;/tgroup&gt;\n&quot;</span><span class="sc">;</span>                                            <span class="c">## xml mind</span>
            <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_table}&gt;\n&quot;</span><span class="sc">;</span>
            <span class="i">$table_on</span> = <span class="n">0</span><span class="sc">;</span>
        <span class="s">}</span>

        <span class="c">## Bullets ##</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$line</span> =~ <span class="q">s/^([\*\#]+)\s+(.*)$/$2/</span> <span class="s">)</span> <span class="s">{</span>
            <span class="k">my</span> <span class="i">$type</span>    = <span class="i">$1</span><span class="sc">;</span>
            <span class="k">my</span> <span class="i">$indents</span> = <span class="k">length</span><span class="s">(</span><span class="i">$type</span><span class="s">)</span><span class="sc">;</span>
            <span class="k">if</span>   <span class="s">(</span> <span class="i">$type</span> =~ <span class="q">/\#/</span> <span class="s">)</span> <span class="s">{</span> <span class="i">$type</span> = <span class="q">'ol'</span> <span class="s">}</span>
            <span class="k">else</span>                   <span class="s">{</span> <span class="i">$type</span> = <span class="q">'ul'</span> <span class="s">}</span>

            <span class="k">if</span> <span class="s">(</span> !<span class="i">$bullets_on</span> &amp;&amp; !<span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$bullets_on</span> == <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_li}&gt;\n&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$bullets_on</span> &lt; <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$bullets_on</span>++<span class="sc">;</span>
                <span class="k">foreach</span> <span class="k">my</span> <span class="i">$in</span> <span class="s">(</span> <span class="i">$bullets_on</span> .. <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{$type}&gt;\n&quot;</span><span class="sc">;</span>
                    <span class="k">print</span> <span class="q">'+'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
                    <span class="k">push</span> <span class="i">@stops</span><span class="cm">,</span> <span class="q">&quot;&lt;\/&quot;</span> . <span class="i">$key</span>{<span class="q">&quot;stop_$type&quot;</span>} . <span class="q">&quot;&gt;\n&quot;</span><span class="sc">;</span>
                    <span class="k">print</span> <span class="q">&quot;** Add $type stop **\n&quot;</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">elsif</span> <span class="s">(</span> <span class="i">$bullets_on</span> &gt; <span class="i">$indents</span> <span class="s">)</span> <span class="s">{</span>
                <span class="i">$bullets_on</span>--<span class="sc">;</span>
                <span class="k">foreach</span> <span class="k">my</span> <span class="i">$out</span> <span class="s">(</span> <span class="i">$indents</span> .. <span class="i">$bullets_on</span> <span class="s">)</span> <span class="s">{</span>
                    <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;\/$key{stop_li}&gt;\n&quot;</span><span class="sc">;</span>
                    <span class="k">my</span> <span class="i">$stop</span> = <span class="k">shift</span> <span class="i">@stops</span><span class="sc">;</span>
                    <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="i">$stop</span><span class="sc">;</span>
                    <span class="k">print</span> <span class="q">'-'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
                    <span class="k">print</span> <span class="q">&quot;** Close $type stop **\n&quot;</span><span class="sc">;</span>
                <span class="s">}</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;$key{li}&gt;&quot;</span><span class="sc">;</span>
            <span class="s">}</span>
            <span class="k">else</span> <span class="s">{</span>
                <span class="i">Message</span><span class="s">(</span><span class="q">&quot;NO OTHER POSSIBILITY&quot;</span><span class="s">)</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>
        <span class="c">## close bullets ##</span>
        <span class="k">else</span> <span class="s">{</span>
            <span class="k">while</span> <span class="s">(</span><span class="i">$bullets_on</span><span class="s">)</span> <span class="s">{</span>
                <span class="i">$bullets_on</span>--<span class="sc">;</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;\n &lt;\/$key{stop_li}&gt;\n&quot;</span><span class="sc">;</span>
                <span class="k">my</span> <span class="i">$stop</span> = <span class="k">shift</span> <span class="i">@stops</span><span class="sc">;</span>
                <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="i">$stop</span><span class="sc">;</span>
                <span class="k">print</span> <span class="q">'-'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
            <span class="s">}</span>
        <span class="s">}</span>

        <span class="c">## special tags ##</span>
        <span class="i">$line</span> =~ <span class="q">s/\[(.*?)\|(.*?)\]/&lt;$key{ref}=$2&gt;$1&lt;\/$key{stop_ref}&gt;/g</span><span class="sc">;</span>    <span class="c">## ref with text</span>
        <span class="i">$line</span> =~ <span class="q">s/\[(.*?)\]/&lt;$key{ref}=$1&gt;$1&lt;\/$key{stop_ref}&gt;/g</span><span class="sc">;</span>           <span class="c">## explicit ref</span>

        <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="i">$line</span><span class="sc">;</span>

        <span class="c">#	push @html_lines, &quot;&lt;BR&gt;\n&quot;;</span>
        <span class="k">print</span> <span class="q">&quot;** $line ** ($bullets_on)\n&quot;</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">while</span> <span class="s">(</span><span class="i">$bullets_on</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">$bullets_on</span>--<span class="sc">;</span>
        <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;\n &lt;\/$key{stop_li}&gt;\n&quot;</span><span class="sc">;</span>
        <span class="k">my</span> <span class="i">$stop</span> = <span class="k">shift</span> <span class="i">@stops</span><span class="sc">;</span>
        <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="i">$stop</span><span class="sc">;</span>
        <span class="k">print</span> <span class="q">'-'</span> <span class="k">unless</span> <span class="i">$quiet</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">if</span> <span class="s">(</span><span class="i">$xml_mind</span><span class="s">)</span> <span class="s">{</span>
        <span class="k">while</span> <span class="s">(</span><span class="i">@sections</span><span class="s">)</span> <span class="s">{</span>
            <span class="k">push</span> <span class="i">@html_lines</span><span class="cm">,</span> <span class="q">&quot;&lt;/section&gt;\n&quot;</span><span class="sc">;</span>
            <span class="k">pop</span> <span class="i">@sections</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>

    <span class="k">return</span> <span class="k">join</span> <span class="q">&quot;\n&quot;</span><span class="cm">,</span> <span class="i">@html_lines</span><span class="sc">;</span>
<span class="s">}</span>

<span class="c">##############################</span>
<span class="c"># private_methods            #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># private_functions          #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># main_footer                #</span>
<span class="c">##############################</span>
<span class="c">##############################</span>
<span class="c"># perldoc_footer             #</span>
<span class="c">##############################</span>

</pre><p></p>
<hr />
<h1><a name="known_issues__uplink_">KNOWN ISSUES &lt;UPLINK&gt;</a></h1>
<p>&lt;&lt;KNOWN ISSUES&gt;&gt;</p>
<p>
</p>
<hr />
<h1><a name="future_improvements__uplink_">FUTURE IMPROVEMENTS &lt;UPLINK&gt;</a></h1>
<p>&lt;&lt;FUTURE IMPROVEMENTS&gt;&gt;</p>
<p>
</p>
<hr />
<h1><a name="authors__uplink_">AUTHORS &lt;UPLINK&gt;</a></h1>
<p>&lt;&lt;AUTHORS&gt;&gt;</p>
<p>
</p>
<hr />
<h1><a name="created__uplink_">CREATED &lt;UPLINK&gt;</a></h1>
<p>2004-11-29</p>
<p>
</p>
<hr />
<h1><a name="revision__uplink_">REVISION &lt;UPLINK&gt;</a></h1>
<p>$Id: Conversion.pm,v 1.20 2004/12/09 17:42:07 rguin Exp $ (Release: $Name:  $)</p>

<pre>
<span class="k">return</span> <span class="n">1</span><span class="sc">;</span>
<a name="EOF-"></a></pre></body>

</html>
