<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Tue Jan  8 16:57:39 2013 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>lib/perl/Core/alDente/Grp.pm</title>
<style type="text/css">
<!--
/* default style sheet generated by perltidy */
body {background: #FFFFFF; color: #000000}
pre { color: #000000; 
      background: #FFFFFF;
      font-family: courier;
    } 

.c  { color: #228B22;} /* comment */
.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.h  { color: #CD5555; font-weight:bold;} /* here-doc-target */
.hh { color: #CD5555; font-style:italic;} /* here-doc-text */
.i  { color: #00688B;} /* identifier */
.j  { color: #CD5555; font-weight:bold;} /* label */
.k  { color: #8B008B; font-weight:bold;} /* keyword */
.m  { color: #FF0000; font-weight:bold;} /* subroutine */
.n  { color: #B452CD;} /* numeric */
.p  { color: #000000;} /* paren */
.pd { color: #228B22; font-style:italic;} /* pod-text */
.pu { color: #000000;} /* punctuation */
.q  { color: #CD5555;} /* quote */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.v  { color: #B452CD;} /* v-string */
.w  { color: #000000;} /* bareword */
-->
</style>
</head>
<body>
<a name="-top-"></a>
<h1>lib/perl/Core/alDente/Grp.pm</h1>
<!-- BEGIN CODE INDEX --><a name="code-index"></a>
<ul>
<li><a href="#package-alDente::Grp-">package alDente::Grp</a>
<ul>
<li><a href="#display_groups-">display_groups</a></li>
<li><a href="#get_Grps-">get_Grps</a></li>
</ul>
</li>
<li><a href="#EOF-">EOF</a></li>
</ul>
<!-- END CODE INDEX -->
<hr />
<!-- contents of filename: lib/perl/Core/alDente/Grp.pm -->
<pre>
<a name="package-alDente::Grp-"></a><span class="k">package </span><span class="i">alDente::Grp</span><span class="sc">;</span>

<span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">CGI</span> <span class="q">qw(:standard)</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">Data::Dumper</span><span class="sc">;</span>

<span class="k">use</span> <span class="w">SDB::CustomSettings</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">RGTools::RGIO</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">SDB::DBIO</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">SDB::HTML</span><span class="sc">;</span>

<span class="k">use</span> <span class="w">alDente::SDB_Defaults</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">alDente::Validation</span><span class="sc">;</span>

<span class="k">use</span> <span class="w">vars</span> <span class="q">qw($Connection)</span><span class="sc">;</span>

<span class="c">########################################</span>
<span class="c">#</span>
<span class="c">#  Retruns the list of Groups associated with an object in HTML format</span>
<span class="c">#</span>
<span class="c">#  Inputs: -table=&gt;Object_Table, -id=&gt;Object_ID, [-output=&gt;'name'], -groups=&gt;group list</span>
<span class="c">#</span>
<span class="c">#  Outputs: HTML List of groups</span>
<span class="c">#</span>
<span class="c">#  &lt;snip&gt;</span>
<span class="c">#    ### Display the groups associated with this object</span>
<span class="c">#    alDente::Grp::display_groups('Standard_Solution',$id,-output=&gt;'name');</span>
<span class="c">#</span>
<span class="c">#    ### Display the name of these groups</span>
<span class="c">#    alDente::Grp::display_groups(-groups=&gt;$groups,-output=&gt;'name');</span>
<span class="c">#  &lt;/snip&gt;</span>
<span class="c">#</span>
<span class="c">####################</span>
<a name="display_groups-"></a><span class="k">sub </span><span class="m">display_groups</span> <span class="s">{</span>
<span class="c">####################</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">&amp;filter_input</span><span class="s">(</span> \<span class="i">@_</span><span class="cm">,</span> -<span class="w">args</span> <span class="cm">=&gt;</span> <span class="q">'table,id'</span> <span class="s">)</span><span class="sc">;</span>

    <span class="k">my</span> <span class="i">$dbc</span>          = <span class="i">$args</span>{-<span class="w">dbc</span>} || <span class="i">SDB::Errors::log_deprecated_usage</span><span class="s">(</span><span class="q">&quot;Connection&quot;</span><span class="cm">,</span> <span class="i">$Connection</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$table</span>        = <span class="i">$args</span>{-<span class="w">table</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$id</span>           = <span class="i">$args</span>{-<span class="w">id</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$output</span>       = <span class="i">$args</span>{-<span class="w">output</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$child_groups</span> = <span class="i">$args</span>{-<span class="w">child_groups</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$no_add_link</span>  = <span class="i">$args</span>{-<span class="w">noadd</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$unlink_group</span> = <span class="i">$args</span>{-<span class="w">unlink_group</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$groups</span>       = <span class="i">$args</span>{-<span class="w">groups</span>}<span class="sc">;</span>

    <span class="k">my</span> <span class="i">@groups</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span><span class="i">$groups</span><span class="s">)</span> <span class="s">{</span>
        <span class="i">@groups</span> = <span class="i">Cast_List</span><span class="s">(</span> -<span class="w">list</span> <span class="cm">=&gt;</span> <span class="i">$groups</span><span class="cm">,</span> -<span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">'array'</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    <span class="k">else</span> <span class="s">{</span>
        <span class="i">@groups</span> = <span class="i">get_groups</span><span class="s">(</span> -<span class="w">table</span> <span class="cm">=&gt;</span> <span class="i">$table</span><span class="cm">,</span> -<span class="w">ids</span> <span class="cm">=&gt;</span> <span class="i">$id</span><span class="cm">,</span> -<span class="w">child_grps</span> <span class="cm">=&gt;</span> <span class="i">$child_groups</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$output</span> =~ <span class="q">/name/</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">@groups</span> = <span class="i">$dbc</span><span class="i">-&gt;Table_find</span><span class="s">(</span> <span class="q">'Grp'</span><span class="cm">,</span> <span class="q">'Grp_Name'</span><span class="cm">,</span> <span class="q">&quot;WHERE Grp_ID IN(&quot;</span> . <span class="k">join</span><span class="s">(</span> <span class="q">','</span><span class="cm">,</span> <span class="i">@groups</span> <span class="s">)</span> . <span class="q">&quot;)&quot;</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>

    <span class="k">my</span> <span class="i">$html</span> = <span class="q">&quot;&lt;h2&gt;Viewable by the following groups: &quot;</span><span class="sc">;</span>

    <span class="k">if</span> <span class="s">(</span> <span class="i">$table</span> &amp;&amp; !<span class="i">$no_add_link</span> <span class="s">)</span> <span class="s">{</span>
        <span class="i">$html</span> .= <span class="i">&amp;Link_To</span><span class="s">(</span> <span class="i">$homelink</span><span class="cm">,</span> <span class="i">HTML_Comment</span><span class="s">(</span><span class="q">'(Add Group)'</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;&amp;New+Entry=New+Grp$table&amp;FK_$table&quot;</span> . <span class="q">&quot;__ID=$id&quot;</span><span class="cm">,</span> <span class="i">$Settings</span>{<span class="w">LINK_COLOUR</span>}<span class="cm">,</span> <span class="s">[</span><span class="q">'newwin'</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    
    <span class="k">if</span> <span class="s">(</span> <span class="i">$table</span> &amp;&amp; <span class="i">$unlink_group</span> <span class="s">)</span> <span class="s">{</span>
	<span class="i">$html</span> .= <span class="i">&amp;Link_To</span><span class="s">(</span> <span class="i">$homelink</span><span class="cm">,</span> <span class="i">HTML_Comment</span><span class="s">(</span><span class="q">'(Unlink Group)'</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;&amp;Edit+Table=Edit+Grp$table+Table&amp;Condition=FK_Grp__ID+IN+($groups)&quot;</span><span class="cm">,</span> <span class="i">$Settings</span>{<span class="w">LINK_COLOUR</span>}<span class="cm">,</span> <span class="s">[</span><span class="q">'newwin'</span><span class="s">]</span> <span class="s">)</span><span class="sc">;</span>
    <span class="s">}</span>
    
    <span class="i">$html</span> .= <span class="q">&quot;&lt;UL type=circle&gt;&quot;</span> . <span class="k">join</span><span class="s">(</span> <span class="q">''</span><span class="cm">,</span> <span class="k">map</span> <span class="s">{</span><span class="q">&quot;&lt;LI&gt;$_&lt;/LI&gt;&quot;</span><span class="s">}</span> <span class="i">@groups</span> <span class="s">)</span> . <span class="q">&quot;&lt;/UL&gt;&lt;/h2&gt;&quot;</span><span class="sc">;</span>

<span class="s">}</span>
<span class="c">#</span>
<span class="c"># Return list of Grps of given type, access, and/or department (uses FK_info list with applicable condition)</span>
<span class="c">#</span>
<span class="c"># &lt;snip&gt;</span>
<span class="c">#</span>
<span class="c">#  my @grps = alDente::Grp::get_Grps($dbc,'Lab,Research');</span>
<span class="c">#</span>
<span class="c">#  or to return just list of ids:</span>
<span class="c">#</span>
<span class="c">#  my @grps = alDente::Grp::get_Grps($dbc,['Lab','Research'],-format=&gt;'ids');</span>
<span class="c">#</span>
<span class="c">#  Return: Array of groups.</span>
<span class="c">########################</span>
<a name="get_Grps-"></a><span class="k">sub </span><span class="m">get_Grps</span> <span class="s">{</span>
<span class="c">########################</span>
    <span class="k">my</span> <span class="i">%args</span> = <span class="i">filter_input</span><span class="s">(</span>\<span class="i">@_</span><span class="cm">,</span>-<span class="w">args</span><span class="cm">=&gt;</span><span class="q">'dbc,type,format'</span><span class="s">)</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$dbc</span> = <span class="i">$args</span>{-<span class="w">dbc</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$type</span> = <span class="i">$args</span>{-<span class="w">type</span>}<span class="sc">;</span>
    <span class="k">my</span> <span class="i">$format</span> = <span class="i">$args</span>{-<span class="k">format} || 'names';  ## ids or names</span>
<span class="hh">    my $access = $args{-access};</span>
<span class="hh">    my $department = $args{-department};	# list of department IDs</span>

<span class="hh">    my $types = Cast_List(-list=&gt;$type,-to=&gt;'string',-autoquote=&gt;1);</span>
<span class="hh">    my $accesses = Cast_List(-list=&gt;$access,-to=&gt;'string',-autoquote=&gt;1);</span>
<span class="hh">    my $departments = Cast_List(-list=&gt;$department,-to=&gt;'string');</span>
    
<span class="hh">    my $conditions = &quot;WHERE Grp_Status = 'Active' &quot;;</span>
<span class="hh">    if( $type ) {</span>
<span class="hh">    	$conditions .= &quot; and Grp_Type IN ($types) &quot;;</span>
<span class="hh">    }</span>
<span class="hh">    if( $access ) {</span>
<span class="hh">    	$conditions .= &quot; and Access in ($accesses) &quot;;</span>
<span class="hh">    }</span>
<span class="hh">    if( $department ) {</span>
<span class="hh">    	$conditions .= &quot; and FK_Department__ID in ($departments) &quot;;</span>
<span class="hh">    }</span>

<span class="hh">    my @returnval;</span>
<span class="hh">    if ($format =~/ids/i) {</span>
<span class="hh">		@returnval =  $dbc-&gt;Table_find('Grp','Grp_ID',-condition =&gt; $conditions);</span>
<span class="hh">    }</span>
<span class="hh">    else {</span>
<span class="hh">		@returnval = $dbc-&gt;get_FK_info_list('FK_Grp__ID',-condition =&gt; $conditions );</span>
<span class="hh">    }</span>

<span class="hh">    return @returnval;</span>
<span class="hh">}</span>

<span class="hh">###########################</span>
<span class="hh">sub get_parent_groups {</span>
<span class="hh">###########################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'group_id', -mandatory =&gt; 'group_id' );</span>

<span class="hh">    my $dbc = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $group_id = $args{-group_id};</span>

<span class="hh">    ## convert to ID if in alphanumeric form ##</span>
<span class="hh">    if ( $group_id =~ /\D/ ) { ($group_id) = $dbc-&gt;Table_find( 'Grp', 'Grp_ID', &quot;WHERE Grp_Name IN ('$group_id')&quot; ); }</span>

<span class="hh">    my $add     = $group_id;</span>
<span class="hh">    my $parents = $group_id;</span>

<span class="hh">    my $stuck = 64;</span>
<span class="hh">    while ( $add &amp;&amp; $stuck-- ) {</span>
<span class="hh">        $add = join ',', $dbc-&gt;Table_find( 'Grp_Relationship', 'FKDerived_Grp__ID', &quot;WHERE FKBase_Grp__ID IN ($add) AND FKDerived_Grp__ID NOT IN ($add)&quot;, -distinct =&gt; 1 );</span>
<span class="hh">        $parents .= &quot;,$add&quot; if $add;</span>

<span class="hh">    }</span>

<span class="hh">    return $parents;</span>
<span class="hh">}</span>

<span class="hh">####################</span>
<span class="hh">sub get_child_groups {</span>
<span class="hh">####################</span>
<span class="hh">    my %args     = &amp;filter_input( \@_, -args =&gt; 'group_id', -mandatory =&gt; 'group_id' );</span>
<span class="hh">    my $group_id = $args{-group_id};</span>
<span class="hh">    my $dbc      = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>

<span class="hh">    ## convert to ID if in alphanumeric form ##</span>
<span class="hh">    if ( $group_id !~ /^[\d,\s]+$/ ) { ($group_id) = $dbc-&gt;Table_find( 'Grp', 'Grp_ID', &quot;WHERE Grp_Name IN ('$group_id')&quot; ); }</span>

<span class="hh">    my $add      = $group_id;</span>
<span class="hh">    my $children = $group_id;</span>

<span class="hh">    my $stuck = 64;</span>
<span class="hh">    while ( $add &amp;&amp; $stuck-- ) {</span>
<span class="hh">        $add = join ',', $dbc-&gt;Table_find( 'Grp_Relationship', 'FKBase_Grp__ID', &quot;WHERE FKDerived_Grp__ID IN ($add) AND FKBase_Grp__ID NOT IN ($add)&quot; );</span>
<span class="hh">        $children .= &quot;,$add&quot; if $add;</span>

<span class="hh">    }</span>

<span class="hh">    return $children;</span>
<span class="hh">}</span>

<span class="hh">############################</span>
<span class="hh">sub get_system_groups {</span>
<span class="hh">############################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'level' );</span>
<span class="hh">    my $dbc = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $access = $args{-access};</span>

<span class="hh">    my $condition = 'WHERE 1';</span>
<span class="hh">    if ($access) {</span>
<span class="hh">        $condition = &quot;WHERE Acess='$access'&quot;;</span>
<span class="hh">    }</span>

<span class="hh">    return join ',', $dbc-&gt;Table_find( 'Grp', 'Grp_ID', $condition );</span>
<span class="hh">}</span>

<span class="hh">########################################</span>
<span class="hh">#</span>
<span class="hh">#  Retrieve the groups associated with an object</span>
<span class="hh">#</span>
<span class="hh">#  &lt;snip&gt;</span>
<span class="hh">#    alDente::Grp::get_groups('Employee',222)</span>
<span class="hh">#  &lt;/snip&gt;</span>
<span class="hh">#</span>
<span class="hh">####################</span>
<span class="hh">sub get_groups {</span>
<span class="hh">####################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'table,ids' );</span>
<span class="hh">    my $dbc           = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $table         = $args{-table};</span>
<span class="hh">    my $ids           = $args{-ids};</span>
<span class="hh">    my $child_grps    = $args{-child_grps} || 'yes';</span>
<span class="hh">    my $access_levels = join( &quot;','&quot;, @{ $args{-access} } ) if ( $args{-access} );</span>
<span class="hh">    my $superuser     = $args{-superuser} || 0;</span>

<span class="hh">    my ($public_group) = $dbc-&gt;Table_find('Grp','Grp_ID',&quot;WHERE Grp_Name = 'Public'&quot;);</span>
    
<span class="hh">	my $condition = '1';</span>
<span class="hh">    if ($superuser) {</span>
<span class="hh">        $condition = '1';</span>
<span class="hh">    }</span>
<span class="hh">    elsif ($ids) {    ## previously this also had the condition $ids !~ /\s*/ - why ?</span>
<span class="hh">        $condition = 'FK_' . $table . &quot;__ID IN ($ids)&quot;;</span>
<span class="hh">        if ($access_levels) {</span>
<span class="hh">            $condition .= &quot; AND Access IN ('$access_levels')&quot;;</span>
<span class="hh">        }</span>
<span class="hh">    }</span>

<span class="hh">    my @object_groups = $dbc-&gt;Table_find( 'Grp LEFT JOIN Grp' . $table . ' ON FK_Grp__ID=Grp_ID', 'Grp_ID', &quot;WHERE $condition&quot;, -distinct =&gt; 1 );</span>

<span class="hh">    if ($superuser) { return @object_groups }    ## return all groups if superuser ##</span>

<span class="hh">    my @groups;</span>
<span class="hh">    if ( ( $child_grps eq 'yes' ) &amp;&amp; @object_groups ) {</span>
<span class="hh">        my $group_list = join ',', @object_groups;</span>
<span class="hh">        @groups = _get_Groups_below( $dbc, $group_list );</span>
<span class="hh">    }</span>
<span class="hh">    else {</span>
<span class="hh">        @groups = @object_groups;</span>
<span class="hh">    }</span>

<span class="hh">    push @groups, @object_groups;                ## include original list as well</span>
<span class="hh">    push @groups, $public_group if $public_group;   ## add generic public group...</span>
<span class="hh">    return @{ RGTools::RGIO::unique_items( \@groups ) };</span>
<span class="hh">}</span>

<span class="hh">########################################</span>
<span class="hh">#</span>
<span class="hh">#  Given a group ID, this method will return the objects that are part of that group</span>
<span class="hh">#</span>
<span class="hh">#  &lt;snip&gt;</span>
<span class="hh">#     alDente::Grp::get_group_members('Employee',14)</span>
<span class="hh">#  &lt;/snip&gt;</span>
<span class="hh">####################</span>
<span class="hh">sub get_group_members {</span>
<span class="hh">####################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'table,group_ids' );</span>
<span class="hh">    my $dbc       = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $table     = $args{-table};</span>
<span class="hh">    my $group_ids = $args{-group_ids};</span>

<span class="hh">    my @ids = $dbc-&gt;Table_find( 'Grp' . $table, 'FK_' . $table . '__ID', &quot;WHERE FK_Grp__ID IN ($group_ids)&quot; );</span>
<span class="hh">    return @ids;</span>
<span class="hh">}</span>
<span class="hh">########################################</span>
<span class="hh">#</span>
<span class="hh">#  Recursively retreive all the child groups given a relation hash in the format (relation{derived} =&gt; child)</span>
<span class="hh">#</span>
<span class="hh">#  &lt;snip&gt;</span>
<span class="hh">#     alDente::Grp::_get_Groups_above(24)</span>
<span class="hh">#  &lt;/snip&gt;</span>
<span class="hh">##########################</span>
<span class="hh">sub _get_Groups_above {</span>
<span class="hh">##########################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'dbc,grp_id,relation', -mandatory =&gt; 'grp_id', -formats =&gt; { 'grp_id' =&gt; q{^\d+$} } ) or return err (&quot;Input error&quot;);</span>
<span class="hh">    my $dbc = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $grp_id = $args{-grp_id};</span>

<span class="hh">    unless ($grp_id) { return (undef) }</span>

<span class="hh">    my @parents;</span>
<span class="hh">    my $generation = $grp_id;</span>
<span class="hh">    while ($generation) {</span>
<span class="hh">        my @next_gen = $dbc-&gt;Table_find( 'Grp_Relationship', 'FKDerived_Grp__ID', &quot;WHERE FKBase_Grp__ID IN ($generation)&quot;, -distinct =&gt; 1 );</span>
<span class="hh">        $generation = join ',', @next_gen;</span>
<span class="hh">        foreach my $add_grp (@next_gen) {</span>
<span class="hh">            push @parents, $add_grp unless ( grep /^$add_grp$/, @parents );</span>
<span class="hh">        }</span>
<span class="hh">    }</span>
<span class="hh">    return @parents;</span>
<span class="hh">}</span>

<span class="hh">########################################</span>
<span class="hh">#</span>
<span class="hh">#  recursively retreive all the child groups given a relation hash in the format (relation{derived} =&gt; child)</span>
<span class="hh">#</span>
<span class="hh">#  &lt;snip&gt;</span>
<span class="hh">#     alDente::Grp::_get_Groups_below(24)</span>
<span class="hh">#  &lt;/snip&gt;</span>
<span class="hh">##########################</span>
<span class="hh">sub _get_Groups_below {</span>
<span class="hh">##########################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'dbc,grp_id,relation', -mandatory =&gt; 'grp_id', -format =&gt; { 'grp_id' =&gt; q{^\d+\$} } );</span>
<span class="hh">    my $dbc = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $grp_id = $args{-grp_id};</span>

<span class="hh">    my @children;</span>
<span class="hh">    my $generation = $grp_id;</span>
<span class="hh">    while ($generation) {</span>
<span class="hh">        my @next_gen = $dbc-&gt;Table_find( 'Grp_Relationship', 'FKBase_Grp__ID', &quot;WHERE FKDerived_Grp__ID IN ($generation)&quot;, -distinct =&gt; 1 );</span>
<span class="hh">        $generation = join ',', @next_gen;</span>
<span class="hh">        foreach my $add_grp (@next_gen) {</span>
<span class="hh">            push @children, $add_grp unless ( grep /^$add_grp$/, @children );</span>
<span class="hh">        }</span>
<span class="hh">    }</span>
<span class="hh">    return @children;</span>
<span class="hh">}</span>

<span class="hh">#############################</span>
<span class="hh">#</span>
<span class="hh">#  This function takes one of the following as input parameter as an array reference and returns an array reference of the Grp_IDs which the input parameter belongs to.</span>
<span class="hh">#  Equipment, Project, Group, Library</span>
<span class="hh">#  The include_parent flag allows the search to include the parent groups of the input parameter if it is set to 1.</span>
<span class="hh">#############################</span>
<span class="hh">sub relevant_grp {</span>
<span class="hh">#############################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'dbc,equipment_ids,project_ids,group_ids,library,include_parent' );</span>

<span class="hh">    my $dbc = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>

<span class="hh">    my $equipment      = $args{-equipment_ids};     # Equipment_ID from the Equipment Table.</span>
<span class="hh">    my $project        = $args{-project_ids};       # Project_ID from the Project Table</span>
<span class="hh">    my $group          = $args{-group_ids};         # Grp_ID from the Grp Table</span>
<span class="hh">    my $library        = $args{-library};           # Library_Name from the Library Table</span>
<span class="hh">    my $include_parent = $args{-include_parent};    # If set to 1, include parent group in the search results</span>

<span class="hh">    $equipment = Cast_List( -list =&gt; $equipment, -to =&gt; 'string', -delimiter =&gt; ',' );</span>
<span class="hh">    $group     = Cast_List( -list =&gt; $group,     -to =&gt; 'string', -delimiter =&gt; ',' );</span>
<span class="hh">    $library   = Cast_List( -list =&gt; $library,   -to =&gt; 'string', -delimiter =&gt; ',', -autoquote =&gt; 1 );</span>
<span class="hh">    $project   = Cast_List( -list =&gt; $project,   -to =&gt; 'string', -delimiter =&gt; ',' );</span>
<span class="hh">    my @grp_id = ();</span>

<span class="hh">    if ( length($equipment) &gt; 0 ) {</span>

<span class="hh">        # get data from stock</span>
<span class="hh">        @grp_id = $dbc-&gt;Table_find( 'Equipment,Stock', 'FK_Grp__ID', &quot;WHERE Equipment_ID in ($equipment) and Stock_ID = FK_Stock__ID&quot;, -debug =&gt; 0, -distinct =&gt; 1 );</span>

<span class="hh">    }</span>

<span class="hh">    if ( length($project) &gt; 0 ) {</span>

<span class="hh">        #retrieve from library</span>
<span class="hh">        @grp_id = $dbc-&gt;Table_find( 'Library', 'FK_Grp__ID', &quot;WHERE FK_Project__ID in ($project)&quot;, -debug =&gt; 0, -distinct =&gt; 1 );</span>

<span class="hh">    }</span>

<span class="hh">    if ( length($group) &gt; 0 ) {</span>
<span class="hh">        @grp_id = Cast_List( -list =&gt; $group, -to =&gt; 'Array' );</span>
<span class="hh">    }</span>

<span class="hh">    if ( length($library) &gt; 0 ) {</span>
<span class="hh">        @grp_id = $dbc-&gt;Table_find( 'Library,Project', 'FK_Grp__ID', &quot;WHERE Library_Name in ($library) and FK_Project__ID = Project_ID&quot;, -debug =&gt; 0, -distinct =&gt; 1 );</span>

<span class="hh">    }</span>

<span class="hh">    my $group_id;</span>
<span class="hh">    my @group_id_list = ();</span>
<span class="hh">    if ( $include_parent == 1 ) {</span>
<span class="hh">        for my $grp (@grp_id) {</span>
<span class="hh">            $group_id = get_parent_groups( -group_id =&gt; $grp, -dbc =&gt; $dbc );</span>

<span class="hh">            my @parent_grps = Cast_List( -list =&gt; $group_id, -to =&gt; 'array', -delimiter =&gt; ',' );</span>
<span class="hh">            push( @group_id_list, @parent_grps );</span>
<span class="hh">        }</span>
<span class="hh">        return \@group_id_list;</span>
<span class="hh">    }</span>
<span class="hh">    else {</span>
<span class="hh">        return \@grp_id;</span>
<span class="hh">    }</span>

<span class="hh">}</span>

<span class="hh">#############################</span>
<span class="hh">#</span>
<span class="hh">#  This function find all the Libaray for the Group specified by  the input parameter Grp_ID.</span>
<span class="hh">#</span>
<span class="hh">#############################</span>
<span class="hh">sub relevant_library {</span>
<span class="hh">#############################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'dbc,groupid' );</span>

<span class="hh">    my $dbc = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>

<span class="hh">    my @group_id = $args{-groupid};</span>
<span class="hh">    my $group_id_list = Cast_List( -list =&gt; @group_id, -to =&gt; 'string' );</span>

<span class="hh">    my @library_id = $dbc-&gt;Table_find( 'Grp', 'FK_Library__ID', &quot;WHERE Grp_ID in ($group_id_list)&quot;, -debug =&gt; 1 );</span>

<span class="hh">    return @library_id;</span>
<span class="hh">}</span>

<span class="hh">##########################################################</span>
<span class="hh"># find all the group ids in which the department belongs to</span>
<span class="hh">##########################################################</span>
<span class="hh">sub get_dept_groups {</span>
<span class="hh">#######################</span>
<span class="hh">    my %args = &amp;filter_input( \@_, -args =&gt; 'dbc,dept_id' );</span>
<span class="hh">    my $dbc     = $args{-dbc} || SDB::Errors::log_deprecated_usage(&quot;Connection&quot;, $Connection);</span>
<span class="hh">    my $dept_id = $args{-dept_id};</span>
<span class="hh">    my @result  = $dbc-&gt;Table_find( 'Grp', 'Grp_ID', &quot; WHERE FK_Department__ID = $dept_id &quot; );</span>
<span class="hh">    return \@result;</span>
<span class="hh">}</span>

<span class="hh">#</span>
<span class="hh"># Remove Grp from Database</span>
<span class="hh"># * Requires Replacement group if anything references this group</span>
<span class="hh"># * Automatically removes group from Relationship hierarchy</span>
<span class="hh">#   ie - changes all 'Base' grp records to its list of 'Base' grps</span>
<span class="hh">#   - changes all 'Derived' grp records to be derived from its 'Base' grps</span>
<span class="hh">#</span>
<span class="hh"># Return: 1 on success</span>
<span class="hh">##################</span>
<span class="hh">sub remove_Grp {</span>
<span class="hh">##################</span>
<span class="hh">    my $dbc         = shift;</span>
<span class="hh">    my $grp_id      = shift;</span>
<span class="hh">    my $replacement = shift;</span>
<span class="hh">    my $debug       = shift;</span>

<span class="hh">    if ( $grp_id =~ /^\d+$/ &amp;&amp; $replacement =~ /^\d*$/ ) {</span>
<span class="hh">        ## included group ids explicitly ... leave alone</span>
<span class="hh">        Message(&quot;Replacing Grp$grp_id with Grp$replacement&quot;);</span>
<span class="hh">    }</span>
<span class="hh">    else {</span>
<span class="hh">        ## convert names to ids  .. ##</span>
<span class="hh">        Message(&quot;Replacing $grp_id with $replacement&quot;);</span>
<span class="hh">        ($grp_id) = $dbc-&gt;Table_find( 'Grp', 'Grp_ID', &quot;WHERE Grp_Name = '$grp_id'&quot; );</span>
<span class="hh">        if ($replacement) { ($replacement) = $dbc-&gt;Table_find( 'Grp', 'Grp_ID', &quot;WHERE Grp_Name = '$replacement'&quot; ) }</span>
<span class="hh">    }</span>

<span class="hh">    if (!$grp_id) { Message(&quot;No Grp found&quot;); return 1; }</span>
<span class="hh">    ## example for deleting 'B' given relationship: A -&gt; B -&gt; C</span>

<span class="hh">    ## get list of derived groups (eg Admin) ##</span>
<span class="hh">    my @derived = $dbc-&gt;Table_find( 'Grp_Relationship', 'FKDerived_Grp__ID', &quot;WHERE FKBase_Grp__ID = '$grp_id'&quot; );</span>

<span class="hh">    ## get list of base groups ( eg Public)</span>
<span class="hh">    my @base = $dbc-&gt;Table_find( 'Grp_Relationship', 'FKBase_Grp__ID', &quot;WHERE FKDerived_Grp__ID = '$grp_id'&quot; );</span>

<span class="hh">    $dbc-&gt;start_transaction('remove_grp');</span>

<span class="hh">    ### Delete Grp Relationship records (will be replaced below) ###</span>
<span class="hh">    $dbc-&gt;delete_record( 'Grp_Relationship', -field =&gt; 'FKBase_Grp__ID',    -value =&gt; $grp_id, -debug =&gt; $debug );</span>
<span class="hh">    $dbc-&gt;delete_record( 'Grp_Relationship', -field =&gt; 'FKDerived_Grp__ID', -value =&gt; $grp_id, -debug =&gt; $debug );</span>

<span class="hh">    ### replace Grp (along with all remaining Grp referencing records) - replace if applicable</span>
<span class="hh">    if ($replacement){</span>
<span class="hh">        $dbc-&gt;replace_records(-table =&gt; 'Grp', -field =&gt; 'Grp_ID', -value =&gt; $grp_id, -replace =&gt; $replacement, -debug =&gt; $debug );</span>
<span class="hh">    }</span>
<span class="hh">    else {</span>
<span class="hh">        $dbc-&gt;delete_record( 'Grp', -field =&gt; 'Grp_ID', -value =&gt; $grp_id, -replace =&gt; $replacement, -debug =&gt; $debug );</span>
<span class="hh">    }</span>
<span class="hh">    ### Replace all Group Relationships (eg change A -&gt; B into A -&gt; C) ##</span>
<span class="hh">    foreach my $derived_grp (@derived) {</span>
<span class="hh">        foreach my $base_grp (@base) {</span>
<span class="hh">            if ( ( $base_grp eq $replacement ) || ( $derived_grp eq $replacement ) ) {next}</span>
<span class="hh">            ## add every combination of base -&gt; derived if mid group is replaced...</span>
<span class="hh">            my ($count) = $dbc-&gt;Table_find( 'Grp_Relationship', 'Count(*)', &quot;WHERE FKBase_Grp__ID=$base_grp AND FKDerived_Grp__ID=$derived_grp&quot; );</span>

<span class="hh">            ## only add relationship if it does not already exist .. ##</span>
<span class="hh">            if ( !$count ) { $dbc-&gt;Table_append_array( 'Grp_Relationship', [ 'FKBase_Grp__ID', 'FKDerived_Grp__ID' ], [ $base_grp, $derived_grp ], -debug =&gt; $debug ) }</span>
<span class="hh">        }</span>
<span class="hh">    }</span>
<span class="hh">    return $dbc-&gt;finish_transaction('remove_grp');</span>
<span class="hh">}</span>

<span class="hh">return 1;</span>
<a name="EOF-"></a></pre>
</body>
</html>
