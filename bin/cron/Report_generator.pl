#!/usr/local/bin/perl
#
# This script generates reports using the existing alDente web interface.
#
# It simply extracts dynamically generated files that are dumped to the tmp directory and attaches them to an email notification.
# (it also copies a version of the file to the share directory so it can be accessed using the internal css formatting)
#
# It does require a 'Printable version' of the table of interest to be generated based upon the supplied parameters.
#
# Report specifications are defined within the Report table in the database.
#  
# <CONSTRUCTION>
#
# The css formatting should also be enabled as in-line html to make the default views and attachments more cleanly viewable.
#
###################################################################################################################################

use strict;
use DBI;

use FindBin;
use lib $FindBin::RealBin . "/../lib/perl/";         # add the local directory to the lib search path
use lib $FindBin::RealBin . "/../lib/perl/Core/";         # add the local directory to the lib search path
use lib $FindBin::RealBin . "/../lib/perl/Imported/";         # add the local directory to the lib search path

use RGTools::RGIO;
use alDente::Notification;

use vars qw($opt_help $opt_quiet);

use Getopt::Long;
&GetOptions(
	    'help'                  => \$opt_help,
	    'quiet'                 => \$opt_quiet,
	    );

my $help  = $opt_help;
my $quiet = $opt_quiet;

my $master = 'lims02';
my $slave = 'lims01';
#my $dbase = 'alDente_unit_test_DB';
my $dbase = 'sequence';
my $user = 'cron';
my $pwd;

require SDB::DBIO;
my $dbc = new SDB::DBIO(
                        -host     => $slave,
                        -dbase    => $dbase,
                        -user     => $user,
                        -password => $pwd,
                        -connect  => 1,
                        );

my $dbc_master = new SDB::DBIO(
                        -host     => $master,
                        -dbase    => $dbase,
                        -user     => 'super_cron',
                        -password => $pwd,
                        -connect  => 1,
                        );

my %reports = $dbc->Table_retrieve('Report',['Report_ID','Parameter_String','Target','Extract_File','Report_Frequency','Report_Sent',"CASE WHEN DATE(AddDate(Report_Sent, INTERVAL Report_Frequency DAY)) > CURDATE() THEN 'NO' ELSE 'YES' END as Send"]);

my $temp_dir = "dynamic/tmp";
my $report_dir = "dynamic/share";

my $full_temp_dir = "/opt/alDente/www/$temp_dir";
my $full_report_dir    = "/opt/alDente/www/$report_dir";

my $index = 0;
while (defined $reports{Parameter_String}[$index]) {
    my $string =  $reports{Parameter_String}[$index];
    my $target =  $reports{Target}[$index];
    my $extract =  $reports{Extract_File}[$index];
    my $frequency = $reports{Report_Frequency}[$index];
    my $sent      = $reports{Report_Sent}[$index];
    my $send      = $reports{Send}[$index];
    my $id        = $reports{Report_ID}[$index];
    $index++;

    ## replace standard tags in parameters string ##

    while ($string =~ /<(\d*\s?)(HOUR|DAY|WEEK|MONTH|YEAR)S?>/i) {
	my $replace = "$1$2";
	my $offset = $1 || 1;
	my $unit = $2;
	if ($unit =~ /(today|now)/) { $offset = 0 }
	my $date = date_time("-$offset$unit");
	unless ($unit =~ /(now|hour)/) { $date = substr($date,0,10) }
	$string =~s /<$replace[S]?>/$date/ig;
    }
	
    unless ($send eq 'YES') { Message("Report $id not sent (sent $sent)\n"); next; }

    my $command = "/opt/alDente/versions/production/cgi-bin/barcode.pl Session=Auto User=Guest Database=$dbase ";
    $command .= $string; 
    
    print ">$command\n";
   
    my $output = try_system_command($command);
    
    if ($output =~ /$temp_dir\/([\/\w\.]*$extract[\/\w]*)\.(\w+)\b/) {
	my $found = $1;
	my $ext   = $2;
	my $output = "$extract." . timestamp . ".$ext";
	try_system_command("cp $full_temp_dir/$found.$ext $full_report_dir/$output");
	my $dump = try_system_command("cat $full_temp_dir/$found.$ext");
	print "*** cp $full_temp_dir/$found -> $report_dir/$extract." . timestamp . " ***\n";
	alDente::Notification::Email_Notification($target,'LIMS Reporter <aldente@bcgsc.ca>',
						  -subject=>"$extract Report Auto-generated for $target",
						  -body=>"<HR>Link to:\n<A Href='http://lims02.bcgsc.ca/SDB/dynamic/share/$output'>Report</A> <- (on-line version may be more easily viewable)<HR>" . 
						  'This report is autogenerated.  Please notify LIMS staff (aldente@bcgsc.ca) to change the report parameters or frequency' . "<HR>$dump",
						  -content_type=>'html',
						  -attachments=>{"$full_temp_dir/$found.$ext" => $dump});


    my $timestamp = date_time();
    $dbc_master->Table_update_array('Report',['Report_Sent'],[$timestamp],"WHERE Report_ID = $id",-autoquote=>1); 
    }
    else {
	print "$extract not found in output\n";
	print "$output\n";
    }    
}

exit;

#############
sub help {
#############

    print <<HELP;

Usage:
*********

    <script> [options]

Mandatory Input:
**************************

Options:
**************************     


Examples:
***********

HELP

}
